
hexapod_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003634  08003634  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003634  08003634  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003634  08003634  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003638  08003638  00013638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800363c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  080036ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080036ac  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e32c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f7d  00000000  00000000  0002e3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  00030348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  00030d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001830e  00000000  00000000  000316c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000986b  00000000  00000000  000499ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088932  00000000  00000000  00053239  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbb6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c18  00000000  00000000  000dbbe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080035a0 	.word	0x080035a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080035a0 	.word	0x080035a0

0800014c <strtoINT>:
 *  Created on: Dec 12, 2020
 *      Author: root
 */
#include "functions.h"

void strtoINT(uint32_t number, int lenght){
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	466b      	mov	r3, sp
 8000158:	461d      	mov	r5, r3
	uch string[lenght];
 800015a:	6838      	ldr	r0, [r7, #0]
 800015c:	1e43      	subs	r3, r0, #1
 800015e:	60fb      	str	r3, [r7, #12]
 8000160:	4603      	mov	r3, r0
 8000162:	4619      	mov	r1, r3
 8000164:	f04f 0200 	mov.w	r2, #0
 8000168:	f04f 0300 	mov.w	r3, #0
 800016c:	f04f 0400 	mov.w	r4, #0
 8000170:	00d4      	lsls	r4, r2, #3
 8000172:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000176:	00cb      	lsls	r3, r1, #3
 8000178:	4603      	mov	r3, r0
 800017a:	4619      	mov	r1, r3
 800017c:	f04f 0200 	mov.w	r2, #0
 8000180:	f04f 0300 	mov.w	r3, #0
 8000184:	f04f 0400 	mov.w	r4, #0
 8000188:	00d4      	lsls	r4, r2, #3
 800018a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800018e:	00cb      	lsls	r3, r1, #3
 8000190:	4603      	mov	r3, r0
 8000192:	3307      	adds	r3, #7
 8000194:	08db      	lsrs	r3, r3, #3
 8000196:	00db      	lsls	r3, r3, #3
 8000198:	ebad 0d03 	sub.w	sp, sp, r3
 800019c:	466b      	mov	r3, sp
 800019e:	3300      	adds	r3, #0
 80001a0:	60bb      	str	r3, [r7, #8]
	sprintf(string,"%d",number);
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	687a      	ldr	r2, [r7, #4]
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <strtoINT+0x74>)
 80001a8:	4618      	mov	r0, r3
 80001aa:	f002 fde7 	bl	8002d7c <siprintf>

	LCD_string(string);
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 f883 	bl	80002bc <LCD_string>
 80001b6:	46ad      	mov	sp, r5
}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bdb0      	pop	{r4, r5, r7, pc}
 80001c0:	080035b8 	.word	0x080035b8

080001c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b088      	sub	sp, #32
 80001c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ca:	f107 0310 	add.w	r3, r7, #16
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d8:	4b35      	ldr	r3, [pc, #212]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a34      	ldr	r2, [pc, #208]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001de:	f043 0310 	orr.w	r3, r3, #16
 80001e2:	6193      	str	r3, [r2, #24]
 80001e4:	4b32      	ldr	r3, [pc, #200]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	f003 0310 	and.w	r3, r3, #16
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f0:	4b2f      	ldr	r3, [pc, #188]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a2e      	ldr	r2, [pc, #184]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001f6:	f043 0320 	orr.w	r3, r3, #32
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b2c      	ldr	r3, [pc, #176]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0320 	and.w	r3, r3, #32
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000208:	4b29      	ldr	r3, [pc, #164]	; (80002b0 <MX_GPIO_Init+0xec>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a28      	ldr	r2, [pc, #160]	; (80002b0 <MX_GPIO_Init+0xec>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b26      	ldr	r3, [pc, #152]	; (80002b0 <MX_GPIO_Init+0xec>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0304 	and.w	r3, r3, #4
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000220:	4b23      	ldr	r3, [pc, #140]	; (80002b0 <MX_GPIO_Init+0xec>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a22      	ldr	r2, [pc, #136]	; (80002b0 <MX_GPIO_Init+0xec>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6193      	str	r3, [r2, #24]
 800022c:	4b20      	ldr	r3, [pc, #128]	; (80002b0 <MX_GPIO_Init+0xec>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	f003 0308 	and.w	r3, r3, #8
 8000234:	603b      	str	r3, [r7, #0]
 8000236:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_board_GPIO_Port, led_board_Pin, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023e:	481d      	ldr	r0, [pc, #116]	; (80002b4 <MX_GPIO_Init+0xf0>)
 8000240:	f001 f9b3 	bl	80015aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DATA_7_Pin|LCD_DATA_6_Pin|LCD_DATA_5_Pin|LCD_DATA_4_Pin
 8000244:	2200      	movs	r2, #0
 8000246:	f24f 01c0 	movw	r1, #61632	; 0xf0c0
 800024a:	481b      	ldr	r0, [pc, #108]	; (80002b8 <MX_GPIO_Init+0xf4>)
 800024c:	f001 f9ad 	bl	80015aa <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_board_Pin;
 8000250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000256:	2301      	movs	r3, #1
 8000258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025a:	2300      	movs	r3, #0
 800025c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800025e:	2302      	movs	r3, #2
 8000260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_board_GPIO_Port, &GPIO_InitStruct);
 8000262:	f107 0310 	add.w	r3, r7, #16
 8000266:	4619      	mov	r1, r3
 8000268:	4812      	ldr	r0, [pc, #72]	; (80002b4 <MX_GPIO_Init+0xf0>)
 800026a:	f001 f82d 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = btn1_Pin|btn0_Pin;
 800026e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000274:	2300      	movs	r3, #0
 8000276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000278:	2300      	movs	r3, #0
 800027a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027c:	f107 0310 	add.w	r3, r7, #16
 8000280:	4619      	mov	r1, r3
 8000282:	480d      	ldr	r0, [pc, #52]	; (80002b8 <MX_GPIO_Init+0xf4>)
 8000284:	f001 f820 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DATA_7_Pin|LCD_DATA_6_Pin|LCD_DATA_5_Pin|LCD_DATA_4_Pin
 8000288:	f24f 03c0 	movw	r3, #61632	; 0xf0c0
 800028c:	613b      	str	r3, [r7, #16]
                          |LCD_E_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2302      	movs	r3, #2
 8000298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_GPIO_Init+0xf4>)
 80002a2:	f001 f811 	bl	80012c8 <HAL_GPIO_Init>

}
 80002a6:	bf00      	nop
 80002a8:	3720      	adds	r7, #32
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40021000 	.word	0x40021000
 80002b4:	40011000 	.word	0x40011000
 80002b8:	40010c00 	.word	0x40010c00

080002bc <LCD_string>:
 */
//I use a LCD display with 2 row and 16 cool, with Hitachi basic
//i use it in 4 data_bit mode
#include "lcd.h"

void LCD_string(char *str){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	while(*str){
 80002c4:	e007      	b.n	80002d6 <LCD_string+0x1a>
		LCD_data(*str);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f8cc 	bl	8000468 <LCD_data>
		str++;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
	while(*str){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1f3      	bne.n	80002c6 <LCD_string+0xa>
	}
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <LCD_goto>:

void LCD_goto(u8 row, u8 col){
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b084      	sub	sp, #16
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	4603      	mov	r3, r0
 80002ee:	460a      	mov	r2, r1
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	4613      	mov	r3, r2
 80002f4:	71bb      	strb	r3, [r7, #6]
	switch(row){
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <LCD_goto+0x1c>
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d010      	beq.n	8000322 <LCD_goto+0x3c>
			for(u8 i = col; i>0; i--){
				LCD_cmd(0x14);
			}
		 break;
	}
}
 8000300:	e01f      	b.n	8000342 <LCD_goto+0x5c>
			LCD_cmd(0x80);
 8000302:	2080      	movs	r0, #128	; 0x80
 8000304:	f000 f840 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e005      	b.n	800031a <LCD_goto+0x34>
				LCD_cmd(0x14);
 800030e:	2014      	movs	r0, #20
 8000310:	f000 f83a 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000314:	7bfb      	ldrb	r3, [r7, #15]
 8000316:	3b01      	subs	r3, #1
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d1f6      	bne.n	800030e <LCD_goto+0x28>
		 break;
 8000320:	e00f      	b.n	8000342 <LCD_goto+0x5c>
			LCD_cmd(0xC0);
 8000322:	20c0      	movs	r0, #192	; 0xc0
 8000324:	f000 f830 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000328:	79bb      	ldrb	r3, [r7, #6]
 800032a:	73bb      	strb	r3, [r7, #14]
 800032c:	e005      	b.n	800033a <LCD_goto+0x54>
				LCD_cmd(0x14);
 800032e:	2014      	movs	r0, #20
 8000330:	f000 f82a 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000334:	7bbb      	ldrb	r3, [r7, #14]
 8000336:	3b01      	subs	r3, #1
 8000338:	73bb      	strb	r3, [r7, #14]
 800033a:	7bbb      	ldrb	r3, [r7, #14]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1f6      	bne.n	800032e <LCD_goto+0x48>
		 break;
 8000340:	bf00      	nop
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <LCD_enable>:

void LCD_enable(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	//need a square  signal _| |_ for LCD enable Port
	//we need a 0-1-0 signalflow, transition
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, RESET);	//make _
 8000350:	2200      	movs	r2, #0
 8000352:	2140      	movs	r1, #64	; 0x40
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <LCD_enable+0x38>)
 8000356:	f001 f928 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 800035a:	2005      	movs	r0, #5
 800035c:	f000 fe84 	bl	8001068 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, SET);	//_|
 8000360:	2201      	movs	r2, #1
 8000362:	2140      	movs	r1, #64	; 0x40
 8000364:	4807      	ldr	r0, [pc, #28]	; (8000384 <LCD_enable+0x38>)
 8000366:	f001 f920 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 800036a:	2005      	movs	r0, #5
 800036c:	f000 fe7c 	bl	8001068 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, RESET);	//	|_
 8000370:	2200      	movs	r2, #0
 8000372:	2140      	movs	r1, #64	; 0x40
 8000374:	4803      	ldr	r0, [pc, #12]	; (8000384 <LCD_enable+0x38>)
 8000376:	f001 f918 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800037a:	2005      	movs	r0, #5
 800037c:	f000 fe74 	bl	8001068 <HAL_Delay>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40010c00 	.word	0x40010c00

08000388 <LCD_cmd>:

void LCD_cmd(u8 cmd){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	//we need reset RS port, why we send commands for the LCD display
		//the R/W pin is already on GNDm because we only write the display
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	4833      	ldr	r0, [pc, #204]	; (8000464 <LCD_cmd+0xdc>)
 8000398:	f001 f907 	bl	80015aa <HAL_GPIO_WritePin>
	//we write the data with 2 cycle, first the upper Bits
		//we use PORT MASK just in case
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>7) & 0x01);
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	09db      	lsrs	r3, r3, #7
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a8:	482e      	ldr	r0, [pc, #184]	; (8000464 <LCD_cmd+0xdc>)
 80003aa:	f001 f8fe 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>6) & 0x01);
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	099b      	lsrs	r3, r3, #6
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	461a      	mov	r2, r3
 80003bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c0:	4828      	ldr	r0, [pc, #160]	; (8000464 <LCD_cmd+0xdc>)
 80003c2:	f001 f8f2 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>5) & 0x01);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	095b      	lsrs	r3, r3, #5
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	f003 0301 	and.w	r3, r3, #1
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	461a      	mov	r2, r3
 80003d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003d8:	4822      	ldr	r0, [pc, #136]	; (8000464 <LCD_cmd+0xdc>)
 80003da:	f001 f8e6 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>4) & 0x01);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	091b      	lsrs	r3, r3, #4
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	461a      	mov	r2, r3
 80003ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f0:	481c      	ldr	r0, [pc, #112]	; (8000464 <LCD_cmd+0xdc>)
 80003f2:	f001 f8da 	bl	80015aa <HAL_GPIO_WritePin>

	//we write this for LCD with LCD_enable, we send the datas
	LCD_enable();
 80003f6:	f7ff ffa9 	bl	800034c <LCD_enable>

	//now we write the four lower Bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>3) & 0x01);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	08db      	lsrs	r3, r3, #3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	f003 0301 	and.w	r3, r3, #1
 8000404:	b2db      	uxtb	r3, r3
 8000406:	461a      	mov	r2, r3
 8000408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <LCD_cmd+0xdc>)
 800040e:	f001 f8cc 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>2) & 0x01);
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	089b      	lsrs	r3, r3, #2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	b2db      	uxtb	r3, r3
 800041e:	461a      	mov	r2, r3
 8000420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000424:	480f      	ldr	r0, [pc, #60]	; (8000464 <LCD_cmd+0xdc>)
 8000426:	f001 f8c0 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>1) & 0x01);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	085b      	lsrs	r3, r3, #1
 800042e:	b2db      	uxtb	r3, r3
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	b2db      	uxtb	r3, r3
 8000436:	461a      	mov	r2, r3
 8000438:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800043c:	4809      	ldr	r0, [pc, #36]	; (8000464 <LCD_cmd+0xdc>)
 800043e:	f001 f8b4 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>0) & 0x01);		//here truly we don`t need the MASK,just in case
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	b2db      	uxtb	r3, r3
 800044a:	461a      	mov	r2, r3
 800044c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <LCD_cmd+0xdc>)
 8000452:	f001 f8aa 	bl	80015aa <HAL_GPIO_WritePin>

	//again write for LCD
	LCD_enable();
 8000456:	f7ff ff79 	bl	800034c <LCD_enable>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40010c00 	.word	0x40010c00

08000468 <LCD_data>:

void LCD_data(u8 data){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
	//we set the RS Pin, because we send now data
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,SET);
 8000472:	2201      	movs	r2, #1
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	4833      	ldr	r0, [pc, #204]	; (8000544 <LCD_data+0xdc>)
 8000478:	f001 f897 	bl	80015aa <HAL_GPIO_WritePin>
	//send data again with 2 cycles
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>7) & 0x01);
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	09db      	lsrs	r3, r3, #7
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000488:	482e      	ldr	r0, [pc, #184]	; (8000544 <LCD_data+0xdc>)
 800048a:	f001 f88e 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>6) & 0x01);
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	099b      	lsrs	r3, r3, #6
 8000492:	b2db      	uxtb	r3, r3
 8000494:	f003 0301 	and.w	r3, r3, #1
 8000498:	b2db      	uxtb	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a0:	4828      	ldr	r0, [pc, #160]	; (8000544 <LCD_data+0xdc>)
 80004a2:	f001 f882 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>5) & 0x01);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	095b      	lsrs	r3, r3, #5
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	461a      	mov	r2, r3
 80004b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004b8:	4822      	ldr	r0, [pc, #136]	; (8000544 <LCD_data+0xdc>)
 80004ba:	f001 f876 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>4) & 0x01);
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	f003 0301 	and.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	461a      	mov	r2, r3
 80004cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d0:	481c      	ldr	r0, [pc, #112]	; (8000544 <LCD_data+0xdc>)
 80004d2:	f001 f86a 	bl	80015aa <HAL_GPIO_WritePin>
	//we send the data for display
	LCD_enable();
 80004d6:	f7ff ff39 	bl	800034c <LCD_enable>

	//now we send the low 4 bits
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>3) & 0x01);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	08db      	lsrs	r3, r3, #3
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	461a      	mov	r2, r3
 80004e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ec:	4815      	ldr	r0, [pc, #84]	; (8000544 <LCD_data+0xdc>)
 80004ee:	f001 f85c 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>2) & 0x01);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	089b      	lsrs	r3, r3, #2
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000504:	480f      	ldr	r0, [pc, #60]	; (8000544 <LCD_data+0xdc>)
 8000506:	f001 f850 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>1) & 0x01);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	085b      	lsrs	r3, r3, #1
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	461a      	mov	r2, r3
 8000518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <LCD_data+0xdc>)
 800051e:	f001 f844 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>0) & 0x01);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	461a      	mov	r2, r3
 800052c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <LCD_data+0xdc>)
 8000532:	f001 f83a 	bl	80015aa <HAL_GPIO_WritePin>

	LCD_enable();
 8000536:	f7ff ff09 	bl	800034c <LCD_enable>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40010c00 	.word	0x40010c00

08000548 <LCD_init>:

void LCD_init(bool curzor, bool blink){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	460a      	mov	r2, r1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	4613      	mov	r3, r2
 8000556:	71bb      	strb	r3, [r7, #6]
	//we before init
	HAL_Delay(15);
 8000558:	200f      	movs	r0, #15
 800055a:	f000 fd85 	bl	8001068 <HAL_Delay>
	//we use it in 4bit mode with 2 row - 5*8 pixel
	LCD_cmd(0x20);
 800055e:	2020      	movs	r0, #32
 8000560:	f7ff ff12 	bl	8000388 <LCD_cmd>

	//just in case we send for Enable PORT 3 cycle
	LCD_enable();
 8000564:	f7ff fef2 	bl	800034c <LCD_enable>
	LCD_enable();
 8000568:	f7ff fef0 	bl	800034c <LCD_enable>
	LCD_enable();
 800056c:	f7ff feee 	bl	800034c <LCD_enable>

	//this hexacodes is from datasheet (LCD 1602, with hitachi base)
	LCD_cmd(0x28);		//set the mode 3 time
 8000570:	2028      	movs	r0, #40	; 0x28
 8000572:	f7ff ff09 	bl	8000388 <LCD_cmd>
	LCD_cmd(0x28);		//we don`t know before the init function wich one mode is the display
 8000576:	2028      	movs	r0, #40	; 0x28
 8000578:	f7ff ff06 	bl	8000388 <LCD_cmd>
	LCD_cmd(0x28);		//when we set the mode only 2 times, the display cant work well
 800057c:	2028      	movs	r0, #40	; 0x28
 800057e:	f7ff ff03 	bl	8000388 <LCD_cmd>

	LCD_cmd(0x01);			//lcd clear
 8000582:	2001      	movs	r0, #1
 8000584:	f7ff ff00 	bl	8000388 <LCD_cmd>
	LCD_cmd(0x02);			//send the curzor to 0.row 0.cool
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff fefd 	bl	8000388 <LCD_cmd>
	//set the curzor blink and the curzor visibility
	LCD_cmd(0x08 | (1<<LCD_E) | (curzor<<LCD_curzor) | (blink<<LCD_blink));
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	b25b      	sxtb	r3, r3
 8000594:	f043 030c 	orr.w	r3, r3, #12
 8000598:	b25a      	sxtb	r2, r3
 800059a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800059e:	4313      	orrs	r3, r2
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff feef 	bl	8000388 <LCD_cmd>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <LCD_test>:

void LCD_test(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	LCD_goto(0,0);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff fe93 	bl	80002e6 <LCD_goto>
	LCD_string("TEST++++++++TEST");
 80005c0:	4809      	ldr	r0, [pc, #36]	; (80005e8 <LCD_test+0x34>)
 80005c2:	f7ff fe7b 	bl	80002bc <LCD_string>
	LCD_goto(1,0);
 80005c6:	2100      	movs	r1, #0
 80005c8:	2001      	movs	r0, #1
 80005ca:	f7ff fe8c 	bl	80002e6 <LCD_goto>
	LCD_string("TEST++++++++TEST");
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <LCD_test+0x34>)
 80005d0:	f7ff fe74 	bl	80002bc <LCD_string>
	HAL_Delay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f000 fd46 	bl	8001068 <HAL_Delay>
	LCD_cmd(CLEAR);
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff fed3 	bl	8000388 <LCD_cmd>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	080035bc 	.word	0x080035bc

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uch buffer[] = "";
 80005f2:	2300      	movs	r3, #0
 80005f4:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fcd5 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f887 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f7ff fde1 	bl	80001c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000602:	f000 fa41 	bl	8000a88 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000606:	f000 facb 	bl	8000ba0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800060a:	f000 fb61 	bl	8000cd0 <MX_TIM4_Init>
  MX_TIM1_Init();
 800060e:	f000 f993 	bl	8000938 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000612:	4837      	ldr	r0, [pc, #220]	; (80006f0 <main+0x104>)
 8000614:	f001 fc34 	bl	8001e80 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000618:	2104      	movs	r1, #4
 800061a:	4836      	ldr	r0, [pc, #216]	; (80006f4 <main+0x108>)
 800061c:	f001 fcd2 	bl	8001fc4 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000620:	2104      	movs	r1, #4
 8000622:	4835      	ldr	r0, [pc, #212]	; (80006f8 <main+0x10c>)
 8000624:	f001 fcce 	bl	8001fc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000628:	2108      	movs	r1, #8
 800062a:	4833      	ldr	r0, [pc, #204]	; (80006f8 <main+0x10c>)
 800062c:	f001 fcca 	bl	8001fc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000630:	210c      	movs	r1, #12
 8000632:	4831      	ldr	r0, [pc, #196]	; (80006f8 <main+0x10c>)
 8000634:	f001 fcc6 	bl	8001fc4 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000638:	2100      	movs	r1, #0
 800063a:	4830      	ldr	r0, [pc, #192]	; (80006fc <main+0x110>)
 800063c:	f001 fcc2 	bl	8001fc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000640:	2104      	movs	r1, #4
 8000642:	482e      	ldr	r0, [pc, #184]	; (80006fc <main+0x110>)
 8000644:	f001 fcbe 	bl	8001fc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000648:	2108      	movs	r1, #8
 800064a:	482c      	ldr	r0, [pc, #176]	; (80006fc <main+0x110>)
 800064c:	f001 fcba 	bl	8001fc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000650:	210c      	movs	r1, #12
 8000652:	482a      	ldr	r0, [pc, #168]	; (80006fc <main+0x110>)
 8000654:	f001 fcb6 	bl	8001fc4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LCD_init(1,1);
 8000658:	2101      	movs	r1, #1
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff ff74 	bl	8000548 <LCD_init>
  LCD_test();
 8000660:	f7ff ffa8 	bl	80005b4 <LCD_test>
  HAL_Delay(1000);
  htim3.Instance -> CCR2 = 75;
  HAL_Delay(1000);
  htim3.Instance -> CCR2 = 125;
*/
  htim3.Instance -> CCR3 = 25;
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <main+0x110>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2219      	movs	r2, #25
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c

  while (1)
  {
	LCD_goto(0,0);
 800066c:	2100      	movs	r1, #0
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff fe39 	bl	80002e6 <LCD_goto>
	LCD_string("Pozi: ");
 8000674:	4822      	ldr	r0, [pc, #136]	; (8000700 <main+0x114>)
 8000676:	f7ff fe21 	bl	80002bc <LCD_string>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(led_board_GPIO_Port, led_board_Pin);
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4821      	ldr	r0, [pc, #132]	; (8000704 <main+0x118>)
 8000680:	f000 ffab 	bl	80015da <HAL_GPIO_TogglePin>
	  for(u8 i = 25; i <= 125; i+= 25){
 8000684:	2319      	movs	r3, #25
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	e02e      	b.n	80006e8 <main+0xfc>
		  LCD_goto(1,1);
 800068a:	2101      	movs	r1, #1
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff fe2a 	bl	80002e6 <LCD_goto>
		  strtoINT(i, sizeof(i));
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2101      	movs	r1, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fd58 	bl	800014c <strtoINT>
		  LCD_string("   ");
 800069c:	481a      	ldr	r0, [pc, #104]	; (8000708 <main+0x11c>)
 800069e:	f7ff fe0d 	bl	80002bc <LCD_string>
		  //htim1.Instance -> CCR1 = i;
		  htim1.Instance -> CCR2 = i;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <main+0x108>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	79fa      	ldrb	r2, [r7, #7]
 80006a8:	639a      	str	r2, [r3, #56]	; 0x38
		  htim2.Instance -> CCR2 = i;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <main+0x10c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	639a      	str	r2, [r3, #56]	; 0x38
		  htim2.Instance -> CCR3 = i;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <main+0x10c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	79fa      	ldrb	r2, [r7, #7]
 80006b8:	63da      	str	r2, [r3, #60]	; 0x3c
		  htim2.Instance -> CCR4 = i;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <main+0x10c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	641a      	str	r2, [r3, #64]	; 0x40
		  htim3.Instance -> CCR1 = i;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <main+0x110>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
		  htim3.Instance -> CCR2 = i;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <main+0x110>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	639a      	str	r2, [r3, #56]	; 0x38
		  //htim3.Instance -> CCR3 = i;
		  htim3.Instance -> CCR4 = i;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <main+0x110>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(2000);
 80006da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006de:	f000 fcc3 	bl	8001068 <HAL_Delay>
	  for(u8 i = 25; i <= 125; i+= 25){
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	3319      	adds	r3, #25
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b7d      	cmp	r3, #125	; 0x7d
 80006ec:	d9cd      	bls.n	800068a <main+0x9e>
	LCD_goto(0,0);
 80006ee:	e7bd      	b.n	800066c <main+0x80>
 80006f0:	20000098 	.word	0x20000098
 80006f4:	20000128 	.word	0x20000128
 80006f8:	20000170 	.word	0x20000170
 80006fc:	200000e0 	.word	0x200000e0
 8000700:	080035d0 	.word	0x080035d0
 8000704:	40011000 	.word	0x40011000
 8000708:	080035d8 	.word	0x080035d8

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b090      	sub	sp, #64	; 0x40
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	2228      	movs	r2, #40	; 0x28
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fb26 	bl	8002d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072e:	2302      	movs	r3, #2
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000732:	2301      	movs	r3, #1
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000736:	2310      	movs	r3, #16
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800073e:	2300      	movs	r3, #0
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000742:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0318 	add.w	r3, r7, #24
 800074c:	4618      	mov	r0, r3
 800074e:	f000 ff5d 	bl	800160c <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000758:	f000 f84a 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f001 f9c9 	bl	8001b0c <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000780:	f000 f836 	bl	80007f0 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3740      	adds	r7, #64	; 0x40
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM4){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d11d      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x4e>
		if(HAL_GPIO_ReadPin(btn0_GPIO_Port, btn0_Pin) == 1){
 800079e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a2:	4811      	ldr	r0, [pc, #68]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80007a4:	f000 feea 	bl	800157c <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d104      	bne.n	80007b8 <HAL_TIM_PeriodElapsedCallback+0x2c>
			htim3.Instance -> CCR3 = 125;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	227d      	movs	r2, #125	; 0x7d
 80007b4:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance -> CCR3 = 75;
		}else{
			htim3.Instance -> CCR3 = 25;
		}
	}
}
 80007b6:	e010      	b.n	80007da <HAL_TIM_PeriodElapsedCallback+0x4e>
		}else if(HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == 1){
 80007b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80007be:	f000 fedd 	bl	800157c <HAL_GPIO_ReadPin>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d104      	bne.n	80007d2 <HAL_TIM_PeriodElapsedCallback+0x46>
			htim3.Instance -> CCR3 = 75;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	224b      	movs	r2, #75	; 0x4b
 80007ce:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007d0:	e003      	b.n	80007da <HAL_TIM_PeriodElapsedCallback+0x4e>
			htim3.Instance -> CCR3 = 25;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2219      	movs	r2, #25
 80007d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40000800 	.word	0x40000800
 80007e8:	40010c00 	.word	0x40010c00
 80007ec:	200000e0 	.word	0x200000e0

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <Error_Handler+0x6>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_MspInit+0x5c>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_MspInit+0x5c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6193      	str	r3, [r2, #24]
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x5c>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x5c>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_MspInit+0x5c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_MspInit+0x5c>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_MspInit+0x60>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <HAL_MspInit+0x60>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000
 8000858:	40010000 	.word	0x40010000

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <NMI_Handler+0x4>

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler+0x4>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <UsageFault_Handler+0x4>

0800087a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a2:	f000 fbc5 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <TIM4_IRQHandler+0x10>)
 80008b2:	f001 fc29 	bl	8002108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000098 	.word	0x20000098

080008c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c8:	4a14      	ldr	r2, [pc, #80]	; (800091c <_sbrk+0x5c>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <_sbrk+0x60>)
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <_sbrk+0x64>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <_sbrk+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d207      	bcs.n	8000900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f0:	f002 fa12 	bl	8002d18 <__errno>
 80008f4:	4602      	mov	r2, r0
 80008f6:	230c      	movs	r3, #12
 80008f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008fe:	e009      	b.n	8000914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <_sbrk+0x64>)
 8000910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20005000 	.word	0x20005000
 8000920:	00000400 	.word	0x00000400
 8000924:	2000008c 	.word	0x2000008c
 8000928:	200001c0 	.word	0x200001c0

0800092c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b092      	sub	sp, #72	; 0x48
 800093c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2220      	movs	r2, #32
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fa02 	bl	8002d6c <memset>

  htim1.Instance = TIM1;
 8000968:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <MX_TIM1_Init+0x148>)
 800096a:	4a46      	ldr	r2, [pc, #280]	; (8000a84 <MX_TIM1_Init+0x14c>)
 800096c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 319;
 800096e:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <MX_TIM1_Init+0x148>)
 8000970:	f240 123f 	movw	r2, #319	; 0x13f
 8000974:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <MX_TIM1_Init+0x148>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800097c:	4b40      	ldr	r3, [pc, #256]	; (8000a80 <MX_TIM1_Init+0x148>)
 800097e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000982:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <MX_TIM1_Init+0x148>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098a:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <MX_TIM1_Init+0x148>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <MX_TIM1_Init+0x148>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000996:	483a      	ldr	r0, [pc, #232]	; (8000a80 <MX_TIM1_Init+0x148>)
 8000998:	f001 fac4 	bl	8001f24 <HAL_TIM_PWM_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f7ff ff25 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009b2:	4619      	mov	r1, r3
 80009b4:	4832      	ldr	r0, [pc, #200]	; (8000a80 <MX_TIM1_Init+0x148>)
 80009b6:	f002 f8ed 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80009c0:	f7ff ff16 	bl	80007f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c4:	2360      	movs	r3, #96	; 0x60
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e4:	2200      	movs	r2, #0
 80009e6:	4619      	mov	r1, r3
 80009e8:	4825      	ldr	r0, [pc, #148]	; (8000a80 <MX_TIM1_Init+0x148>)
 80009ea:	f001 fc95 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80009f4:	f7ff fefc 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	2204      	movs	r2, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	481f      	ldr	r0, [pc, #124]	; (8000a80 <MX_TIM1_Init+0x148>)
 8000a02:	f001 fc89 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000a0c:	f7ff fef0 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	2208      	movs	r2, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	4819      	ldr	r0, [pc, #100]	; (8000a80 <MX_TIM1_Init+0x148>)
 8000a1a:	f001 fc7d 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000a24:	f7ff fee4 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2c:	220c      	movs	r2, #12
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_TIM1_Init+0x148>)
 8000a32:	f001 fc71 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000a3c:	f7ff fed8 	bl	80007f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM1_Init+0x148>)
 8000a64:	f002 f8f4 	bl	8002c50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000a6e:	f7ff febf 	bl	80007f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM1_Init+0x148>)
 8000a74:	f000 f9e4 	bl	8000e40 <HAL_TIM_MspPostInit>

}
 8000a78:	bf00      	nop
 8000a7a:	3748      	adds	r7, #72	; 0x48
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000128 	.word	0x20000128
 8000a84:	40012c00 	.word	0x40012c00

08000a88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	; 0x38
 8000a8c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	f107 0320 	add.w	r3, r7, #32
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	615a      	str	r2, [r3, #20]
 8000ab6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000ab8:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000abe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 8000ac0:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000ac2:	f240 123f 	movw	r2, #319	; 0x13f
 8000ac6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ace:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000ad0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae2:	482e      	ldr	r0, [pc, #184]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000ae4:	f001 f97c 	bl	8001de0 <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f7ff fe7f 	bl	80007f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4827      	ldr	r0, [pc, #156]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000b00:	f001 fcc8 	bl	8002494 <HAL_TIM_ConfigClockSource>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b0a:	f7ff fe71 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b0e:	4823      	ldr	r0, [pc, #140]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000b10:	f001 fa08 	bl	8001f24 <HAL_TIM_PWM_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b1a:	f7ff fe69 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481b      	ldr	r0, [pc, #108]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000b2e:	f002 f831 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b38:	f7ff fe5a 	bl	80007f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3c:	2360      	movs	r3, #96	; 0x60
 8000b3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2204      	movs	r2, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4812      	ldr	r0, [pc, #72]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000b54:	f001 fbe0 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b5e:	f7ff fe47 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2208      	movs	r2, #8
 8000b66:	4619      	mov	r1, r3
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000b6a:	f001 fbd5 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b74:	f7ff fe3c 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000b80:	f001 fbca 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000b8a:	f7ff fe31 	bl	80007f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <MX_TIM2_Init+0x114>)
 8000b90:	f000 f956 	bl	8000e40 <HAL_TIM_MspPostInit>

}
 8000b94:	bf00      	nop
 8000b96:	3738      	adds	r7, #56	; 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000170 	.word	0x20000170

08000ba0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	f107 0320 	add.w	r3, r7, #32
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000bd0:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000bd2:	4a3e      	ldr	r2, [pc, #248]	; (8000ccc <MX_TIM3_Init+0x12c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000bd6:	4b3c      	ldr	r3, [pc, #240]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000bd8:	f240 123f 	movw	r2, #319	; 0x13f
 8000bdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000be4:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000be6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bf8:	4833      	ldr	r0, [pc, #204]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000bfa:	f001 f8f1 	bl	8001de0 <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c04:	f7ff fdf4 	bl	80007f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c12:	4619      	mov	r1, r3
 8000c14:	482c      	ldr	r0, [pc, #176]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000c16:	f001 fc3d 	bl	8002494 <HAL_TIM_ConfigClockSource>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c20:	f7ff fde6 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c24:	4828      	ldr	r0, [pc, #160]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000c26:	f001 f97d 	bl	8001f24 <HAL_TIM_PWM_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c30:	f7ff fdde 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	4619      	mov	r1, r3
 8000c42:	4821      	ldr	r0, [pc, #132]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000c44:	f001 ffa6 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c4e:	f7ff fdcf 	bl	80007f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c52:	2360      	movs	r3, #96	; 0x60
 8000c54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	4619      	mov	r1, r3
 8000c68:	4817      	ldr	r0, [pc, #92]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000c6a:	f001 fb55 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c74:	f7ff fdbc 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000c80:	f001 fb4a 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c8a:	f7ff fdb1 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2208      	movs	r2, #8
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000c96:	f001 fb3f 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000ca0:	f7ff fda6 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000cac:	f001 fb34 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000cb6:	f7ff fd9b 	bl	80007f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <MX_TIM3_Init+0x128>)
 8000cbc:	f000 f8c0 	bl	8000e40 <HAL_TIM_MspPostInit>

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200000e0 	.word	0x200000e0
 8000ccc:	40000400 	.word	0x40000400

08000cd0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000cee:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <MX_TIM4_Init+0x98>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39999;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000cf4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000cf8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d02:	f240 128f 	movw	r2, #399	; 0x18f
 8000d06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d14:	4813      	ldr	r0, [pc, #76]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d16:	f001 f863 	bl	8001de0 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d20:	f7ff fd66 	bl	80007f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d32:	f001 fbaf 	bl	8002494 <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000d3c:	f7ff fd58 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d4e:	f001 ff21 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f7ff fd4a 	bl	80007f0 <Error_Handler>
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000098 	.word	0x20000098
 8000d68:	40000800 	.word	0x40000800

08000d6c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <HAL_TIM_PWM_MspInit+0x34>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10b      	bne.n	8000d96 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_TIM_PWM_MspInit+0x38>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_TIM_PWM_MspInit+0x38>)
 8000d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_TIM_PWM_MspInit+0x38>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	40012c00 	.word	0x40012c00
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db8:	d10c      	bne.n	8000dd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <HAL_TIM_Base_MspInit+0x8c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <HAL_TIM_Base_MspInit+0x8c>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_TIM_Base_MspInit+0x8c>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000dd2:	e02a      	b.n	8000e2a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_TIM_Base_MspInit+0x90>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d10c      	bne.n	8000df8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_TIM_Base_MspInit+0x8c>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <HAL_TIM_Base_MspInit+0x8c>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	61d3      	str	r3, [r2, #28]
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_TIM_Base_MspInit+0x8c>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
}
 8000df6:	e018      	b.n	8000e2a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <HAL_TIM_Base_MspInit+0x94>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d113      	bne.n	8000e2a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_TIM_Base_MspInit+0x8c>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <HAL_TIM_Base_MspInit+0x8c>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_TIM_Base_MspInit+0x8c>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	201e      	movs	r0, #30
 8000e20:	f000 fa1b 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e24:	201e      	movs	r0, #30
 8000e26:	f000 fa34 	bl	8001292 <HAL_NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40000400 	.word	0x40000400
 8000e3c:	40000800 	.word	0x40000800

08000e40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a3a      	ldr	r2, [pc, #232]	; (8000f44 <HAL_TIM_MspPostInit+0x104>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d119      	bne.n	8000e94 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a38      	ldr	r2, [pc, #224]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000e78:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2302      	movs	r3, #2
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482f      	ldr	r0, [pc, #188]	; (8000f4c <HAL_TIM_MspPostInit+0x10c>)
 8000e8e:	f000 fa1b 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e92:	e052      	b.n	8000f3a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e9c:	d118      	bne.n	8000ed0 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a29      	ldr	r2, [pc, #164]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6193      	str	r3, [r2, #24]
 8000eaa:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000eb6:	230e      	movs	r3, #14
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0318 	add.w	r3, r7, #24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4820      	ldr	r0, [pc, #128]	; (8000f4c <HAL_TIM_MspPostInit+0x10c>)
 8000eca:	f000 f9fd 	bl	80012c8 <HAL_GPIO_Init>
}
 8000ece:	e034      	b.n	8000f3a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM3)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	; (8000f50 <HAL_TIM_MspPostInit+0x110>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d12f      	bne.n	8000f3a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	4a1a      	ldr	r2, [pc, #104]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6193      	str	r3, [r2, #24]
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6193      	str	r3, [r2, #24]
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_TIM_MspPostInit+0x108>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f0a:	23c0      	movs	r3, #192	; 0xc0
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2302      	movs	r3, #2
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <HAL_TIM_MspPostInit+0x10c>)
 8000f1e:	f000 f9d3 	bl	80012c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f22:	2303      	movs	r3, #3
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	4619      	mov	r1, r3
 8000f34:	4807      	ldr	r0, [pc, #28]	; (8000f54 <HAL_TIM_MspPostInit+0x114>)
 8000f36:	f000 f9c7 	bl	80012c8 <HAL_GPIO_Init>
}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	; 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40012c00 	.word	0x40012c00
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	40000400 	.word	0x40000400
 8000f54:	40010c00 	.word	0x40010c00

08000f58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f5a:	e003      	b.n	8000f64 <LoopCopyDataInit>

08000f5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f62:	3104      	adds	r1, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f64:	480a      	ldr	r0, [pc, #40]	; (8000f90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f6c:	d3f6      	bcc.n	8000f5c <CopyDataInit>
  ldr r2, =_sbss
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f70:	e002      	b.n	8000f78 <LoopFillZerobss>

08000f72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f74:	f842 3b04 	str.w	r3, [r2], #4

08000f78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f7c:	d3f9      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f7e:	f7ff fcd5 	bl	800092c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f82:	f001 fecf 	bl	8002d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f86:	f7ff fb31 	bl	80005ec <main>
  bx lr
 8000f8a:	4770      	bx	lr
  ldr r3, =_sidata
 8000f8c:	0800363c 	.word	0x0800363c
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f94:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000f98:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000f9c:	200001c0 	.word	0x200001c0

08000fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_2_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_Init+0x28>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x28>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f945 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fc1a 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40022000 	.word	0x40022000

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f95d 	bl	80012ae <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800100c:	f000 f925 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000
 8001028:	20000008 	.word	0x20000008
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_IncTick+0x1c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_IncTick+0x20>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a03      	ldr	r2, [pc, #12]	; (8001050 <HAL_IncTick+0x20>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	20000008 	.word	0x20000008
 8001050:	200001b8 	.word	0x200001b8

08001054 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b02      	ldr	r3, [pc, #8]	; (8001064 <HAL_GetTick+0x10>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	200001b8 	.word	0x200001b8

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff fff0 	bl	8001054 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_Delay+0x40>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffe0 	bl	8001054 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000008 	.word	0x20000008

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db0b      	blt.n	800113a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4906      	ldr	r1, [pc, #24]	; (8001144 <__NVIC_EnableIRQ+0x34>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001224:	f7ff ff90 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff2d 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff42 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff90 	bl	800119c <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5f 	bl	8001148 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff35 	bl	8001110 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b08b      	sub	sp, #44	; 0x2c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	e127      	b.n	800152c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012dc:	2201      	movs	r2, #1
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8116 	bne.w	8001526 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b12      	cmp	r3, #18
 8001300:	d034      	beq.n	800136c <HAL_GPIO_Init+0xa4>
 8001302:	2b12      	cmp	r3, #18
 8001304:	d80d      	bhi.n	8001322 <HAL_GPIO_Init+0x5a>
 8001306:	2b02      	cmp	r3, #2
 8001308:	d02b      	beq.n	8001362 <HAL_GPIO_Init+0x9a>
 800130a:	2b02      	cmp	r3, #2
 800130c:	d804      	bhi.n	8001318 <HAL_GPIO_Init+0x50>
 800130e:	2b00      	cmp	r3, #0
 8001310:	d031      	beq.n	8001376 <HAL_GPIO_Init+0xae>
 8001312:	2b01      	cmp	r3, #1
 8001314:	d01c      	beq.n	8001350 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001316:	e048      	b.n	80013aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001318:	2b03      	cmp	r3, #3
 800131a:	d043      	beq.n	80013a4 <HAL_GPIO_Init+0xdc>
 800131c:	2b11      	cmp	r3, #17
 800131e:	d01b      	beq.n	8001358 <HAL_GPIO_Init+0x90>
          break;
 8001320:	e043      	b.n	80013aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001322:	4a89      	ldr	r2, [pc, #548]	; (8001548 <HAL_GPIO_Init+0x280>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d026      	beq.n	8001376 <HAL_GPIO_Init+0xae>
 8001328:	4a87      	ldr	r2, [pc, #540]	; (8001548 <HAL_GPIO_Init+0x280>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d806      	bhi.n	800133c <HAL_GPIO_Init+0x74>
 800132e:	4a87      	ldr	r2, [pc, #540]	; (800154c <HAL_GPIO_Init+0x284>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d020      	beq.n	8001376 <HAL_GPIO_Init+0xae>
 8001334:	4a86      	ldr	r2, [pc, #536]	; (8001550 <HAL_GPIO_Init+0x288>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d01d      	beq.n	8001376 <HAL_GPIO_Init+0xae>
          break;
 800133a:	e036      	b.n	80013aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800133c:	4a85      	ldr	r2, [pc, #532]	; (8001554 <HAL_GPIO_Init+0x28c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0xae>
 8001342:	4a85      	ldr	r2, [pc, #532]	; (8001558 <HAL_GPIO_Init+0x290>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d016      	beq.n	8001376 <HAL_GPIO_Init+0xae>
 8001348:	4a84      	ldr	r2, [pc, #528]	; (800155c <HAL_GPIO_Init+0x294>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0xae>
          break;
 800134e:	e02c      	b.n	80013aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e028      	b.n	80013aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	3304      	adds	r3, #4
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e023      	b.n	80013aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	3308      	adds	r3, #8
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e01e      	b.n	80013aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	330c      	adds	r3, #12
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e019      	b.n	80013aa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137e:	2304      	movs	r3, #4
 8001380:	623b      	str	r3, [r7, #32]
          break;
 8001382:	e012      	b.n	80013aa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800138c:	2308      	movs	r3, #8
 800138e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	611a      	str	r2, [r3, #16]
          break;
 8001396:	e008      	b.n	80013aa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001398:	2308      	movs	r3, #8
 800139a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	615a      	str	r2, [r3, #20]
          break;
 80013a2:	e002      	b.n	80013aa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
          break;
 80013a8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2bff      	cmp	r3, #255	; 0xff
 80013ae:	d801      	bhi.n	80013b4 <HAL_GPIO_Init+0xec>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	e001      	b.n	80013b8 <HAL_GPIO_Init+0xf0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3304      	adds	r3, #4
 80013b8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2bff      	cmp	r3, #255	; 0xff
 80013be:	d802      	bhi.n	80013c6 <HAL_GPIO_Init+0xfe>
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_Init+0x104>
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	3b08      	subs	r3, #8
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	210f      	movs	r1, #15
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	401a      	ands	r2, r3
 80013de:	6a39      	ldr	r1, [r7, #32]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	431a      	orrs	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 8096 	beq.w	8001526 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013fa:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_GPIO_Init+0x298>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_GPIO_Init+0x298>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6193      	str	r3, [r2, #24]
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <HAL_GPIO_Init+0x298>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001412:	4a54      	ldr	r2, [pc, #336]	; (8001564 <HAL_GPIO_Init+0x29c>)
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <HAL_GPIO_Init+0x2a0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x19e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4a      	ldr	r2, [pc, #296]	; (800156c <HAL_GPIO_Init+0x2a4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x19a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a49      	ldr	r2, [pc, #292]	; (8001570 <HAL_GPIO_Init+0x2a8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x196>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a48      	ldr	r2, [pc, #288]	; (8001574 <HAL_GPIO_Init+0x2ac>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x192>
 8001456:	2303      	movs	r3, #3
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x1a0>
 800145a:	2304      	movs	r3, #4
 800145c:	e004      	b.n	8001468 <HAL_GPIO_Init+0x1a0>
 800145e:	2302      	movs	r3, #2
 8001460:	e002      	b.n	8001468 <HAL_GPIO_Init+0x1a0>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x1a0>
 8001466:	2300      	movs	r3, #0
 8001468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146a:	f002 0203 	and.w	r2, r2, #3
 800146e:	0092      	lsls	r2, r2, #2
 8001470:	4093      	lsls	r3, r2
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001478:	493a      	ldr	r1, [pc, #232]	; (8001564 <HAL_GPIO_Init+0x29c>)
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001492:	4b39      	ldr	r3, [pc, #228]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4938      	ldr	r1, [pc, #224]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
 800149e:	e006      	b.n	80014ae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	4933      	ldr	r1, [pc, #204]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d006      	beq.n	80014c8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ba:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	492e      	ldr	r1, [pc, #184]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
 80014c6:	e006      	b.n	80014d6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	4929      	ldr	r1, [pc, #164]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e2:	4b25      	ldr	r3, [pc, #148]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	4924      	ldr	r1, [pc, #144]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
 80014ee:	e006      	b.n	80014fe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	491f      	ldr	r1, [pc, #124]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	491a      	ldr	r1, [pc, #104]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	60cb      	str	r3, [r1, #12]
 8001516:	e006      	b.n	8001526 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	43db      	mvns	r3, r3
 8001520:	4915      	ldr	r1, [pc, #84]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001522:	4013      	ands	r3, r2
 8001524:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	3301      	adds	r3, #1
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	f47f aed0 	bne.w	80012dc <HAL_GPIO_Init+0x14>
  }
}
 800153c:	bf00      	nop
 800153e:	372c      	adds	r7, #44	; 0x2c
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	10210000 	.word	0x10210000
 800154c:	10110000 	.word	0x10110000
 8001550:	10120000 	.word	0x10120000
 8001554:	10310000 	.word	0x10310000
 8001558:	10320000 	.word	0x10320000
 800155c:	10220000 	.word	0x10220000
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000
 8001568:	40010800 	.word	0x40010800
 800156c:	40010c00 	.word	0x40010c00
 8001570:	40011000 	.word	0x40011000
 8001574:	40011400 	.word	0x40011400
 8001578:	40010400 	.word	0x40010400

0800157c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e001      	b.n	800159e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	807b      	strh	r3, [r7, #2]
 80015b6:	4613      	mov	r3, r2
 80015b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ba:	787b      	ldrb	r3, [r7, #1]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c0:	887a      	ldrh	r2, [r7, #2]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015c6:	e003      	b.n	80015d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	041a      	lsls	r2, r3, #16
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	611a      	str	r2, [r3, #16]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ec:	887a      	ldrh	r2, [r7, #2]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4013      	ands	r3, r2
 80015f2:	041a      	lsls	r2, r3, #16
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	400b      	ands	r3, r1
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	611a      	str	r2, [r3, #16]
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e26c      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8087 	beq.w	800173a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800162c:	4b92      	ldr	r3, [pc, #584]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b04      	cmp	r3, #4
 8001636:	d00c      	beq.n	8001652 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001638:	4b8f      	ldr	r3, [pc, #572]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d112      	bne.n	800166a <HAL_RCC_OscConfig+0x5e>
 8001644:	4b8c      	ldr	r3, [pc, #560]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001650:	d10b      	bne.n	800166a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001652:	4b89      	ldr	r3, [pc, #548]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d06c      	beq.n	8001738 <HAL_RCC_OscConfig+0x12c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d168      	bne.n	8001738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e246      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x76>
 8001674:	4b80      	ldr	r3, [pc, #512]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a7f      	ldr	r2, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800167a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e02e      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x98>
 800168a:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7a      	ldr	r2, [pc, #488]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b78      	ldr	r3, [pc, #480]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a77      	ldr	r2, [pc, #476]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800169c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e01d      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0xbc>
 80016ae:	4b72      	ldr	r3, [pc, #456]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a71      	ldr	r2, [pc, #452]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b6f      	ldr	r3, [pc, #444]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a6e      	ldr	r2, [pc, #440]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 80016c8:	4b6b      	ldr	r3, [pc, #428]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a6a      	ldr	r2, [pc, #424]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a67      	ldr	r2, [pc, #412]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d013      	beq.n	8001710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fcb4 	bl	8001054 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fcb0 	bl	8001054 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1fa      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0xe4>
 800170e:	e014      	b.n	800173a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fca0 	bl	8001054 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff fc9c 	bl	8001054 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e1e6      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x10c>
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d063      	beq.n	800180e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001746:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00b      	beq.n	800176a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001752:	4b49      	ldr	r3, [pc, #292]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b08      	cmp	r3, #8
 800175c:	d11c      	bne.n	8001798 <HAL_RCC_OscConfig+0x18c>
 800175e:	4b46      	ldr	r3, [pc, #280]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d116      	bne.n	8001798 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	4b43      	ldr	r3, [pc, #268]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <HAL_RCC_OscConfig+0x176>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e1ba      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4939      	ldr	r1, [pc, #228]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001796:	e03a      	b.n	800180e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d020      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a0:	4b36      	ldr	r3, [pc, #216]	; (800187c <HAL_RCC_OscConfig+0x270>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fc55 	bl	8001054 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ae:	f7ff fc51 	bl	8001054 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e19b      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4927      	ldr	r1, [pc, #156]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
 80017e0:	e015      	b.n	800180e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <HAL_RCC_OscConfig+0x270>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fc34 	bl	8001054 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f0:	f7ff fc30 	bl	8001054 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e17a      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d03a      	beq.n	8001890 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d019      	beq.n	8001856 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_RCC_OscConfig+0x274>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7ff fc14 	bl	8001054 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001830:	f7ff fc10 	bl	8001054 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e15a      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f000 faa8 	bl	8001da4 <RCC_Delay>
 8001854:	e01c      	b.n	8001890 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_RCC_OscConfig+0x274>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185c:	f7ff fbfa 	bl	8001054 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001862:	e00f      	b.n	8001884 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001864:	f7ff fbf6 	bl	8001054 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d908      	bls.n	8001884 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e140      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	42420000 	.word	0x42420000
 8001880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001884:	4b9e      	ldr	r3, [pc, #632]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e9      	bne.n	8001864 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a6 	beq.w	80019ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a2:	4b97      	ldr	r3, [pc, #604]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10d      	bne.n	80018ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b94      	ldr	r3, [pc, #592]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a93      	ldr	r2, [pc, #588]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b91      	ldr	r3, [pc, #580]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c6:	2301      	movs	r3, #1
 80018c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ca:	4b8e      	ldr	r3, [pc, #568]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d6:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a8a      	ldr	r2, [pc, #552]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fbb7 	bl	8001054 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ea:	f7ff fbb3 	bl	8001054 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b64      	cmp	r3, #100	; 0x64
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0fd      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	4b81      	ldr	r3, [pc, #516]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d106      	bne.n	800191e <HAL_RCC_OscConfig+0x312>
 8001910:	4b7b      	ldr	r3, [pc, #492]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4a7a      	ldr	r2, [pc, #488]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	e02d      	b.n	800197a <HAL_RCC_OscConfig+0x36e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x334>
 8001926:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a75      	ldr	r2, [pc, #468]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a72      	ldr	r2, [pc, #456]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	e01c      	b.n	800197a <HAL_RCC_OscConfig+0x36e>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b05      	cmp	r3, #5
 8001946:	d10c      	bne.n	8001962 <HAL_RCC_OscConfig+0x356>
 8001948:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a6c      	ldr	r2, [pc, #432]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a69      	ldr	r2, [pc, #420]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	e00b      	b.n	800197a <HAL_RCC_OscConfig+0x36e>
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	4a66      	ldr	r2, [pc, #408]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	6213      	str	r3, [r2, #32]
 800196e:	4b64      	ldr	r3, [pc, #400]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a63      	ldr	r2, [pc, #396]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d015      	beq.n	80019ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff fb67 	bl	8001054 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff fb63 	bl	8001054 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	; 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e0ab      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ee      	beq.n	800198a <HAL_RCC_OscConfig+0x37e>
 80019ac:	e014      	b.n	80019d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fb51 	bl	8001054 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7ff fb4d 	bl	8001054 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e095      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019cc:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1ee      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d105      	bne.n	80019ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a47      	ldr	r2, [pc, #284]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8081 	beq.w	8001af6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f4:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d061      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d146      	bne.n	8001a96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a08:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <HAL_RCC_OscConfig+0x4fc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fb21 	bl	8001054 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff fb1d 	bl	8001054 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e067      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f0      	bne.n	8001a16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3c:	d108      	bne.n	8001a50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	492d      	ldr	r1, [pc, #180]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a19      	ldr	r1, [r3, #32]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	430b      	orrs	r3, r1
 8001a62:	4927      	ldr	r1, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_RCC_OscConfig+0x4fc>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6e:	f7ff faf1 	bl	8001054 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a76:	f7ff faed 	bl	8001054 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e037      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x46a>
 8001a94:	e02f      	b.n	8001af6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <HAL_RCC_OscConfig+0x4fc>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fada 	bl	8001054 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff fad6 	bl	8001054 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e020      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x498>
 8001ac2:	e018      	b.n	8001af6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e013      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40007000 	.word	0x40007000
 8001b08:	42420060 	.word	0x42420060

08001b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0d0      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b20:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d910      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b67      	ldr	r3, [pc, #412]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 0207 	bic.w	r2, r3, #7
 8001b36:	4965      	ldr	r1, [pc, #404]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b63      	ldr	r3, [pc, #396]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0b8      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	494d      	ldr	r1, [pc, #308]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d040      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d115      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e07f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e073      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e06b      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f023 0203 	bic.w	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4936      	ldr	r1, [pc, #216]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff fa2a 	bl	8001054 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff fa26 	bl	8001054 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e053      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 020c 	and.w	r2, r3, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1eb      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d210      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	4922      	ldr	r1, [pc, #136]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e032      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4916      	ldr	r1, [pc, #88]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c9a:	f000 f821 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	fa21 f303 	lsr.w	r3, r1, r3
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1d0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f988 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	080035f0 	.word	0x080035f0
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	b490      	push	{r4, r7}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ce8:	1d3c      	adds	r4, r7, #4
 8001cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cf0:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d002      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x40>
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x46>
 8001d1e:	e02d      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d22:	623b      	str	r3, [r7, #32]
      break;
 8001d24:	e02d      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	0c9b      	lsrs	r3, r3, #18
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d32:	4413      	add	r3, r2
 8001d34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d38:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0c5b      	lsrs	r3, r3, #17
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d52:	4413      	add	r3, r2
 8001d54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d5e:	fb02 f203 	mul.w	r2, r2, r3
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	e004      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	623b      	str	r3, [r7, #32]
      break;
 8001d7a:	e002      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d7e:	623b      	str	r3, [r7, #32]
      break;
 8001d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d82:	6a3b      	ldr	r3, [r7, #32]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc90      	pop	{r4, r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	080035dc 	.word	0x080035dc
 8001d94:	080035ec 	.word	0x080035ec
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	007a1200 	.word	0x007a1200
 8001da0:	003d0900 	.word	0x003d0900

08001da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <RCC_Delay+0x34>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <RCC_Delay+0x38>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0a5b      	lsrs	r3, r3, #9
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc0:	bf00      	nop
  }
  while (Delay --);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1e5a      	subs	r2, r3, #1
 8001dc6:	60fa      	str	r2, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f9      	bne.n	8001dc0 <RCC_Delay+0x1c>
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	10624dd3 	.word	0x10624dd3

08001de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e041      	b.n	8001e76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7fe ffce 	bl	8000da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f000 fc14 	bl	800264c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d001      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e03a      	b.n	8001f0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_TIM_Base_Start_IT+0x98>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00e      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x58>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec2:	d009      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x58>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_TIM_Base_Start_IT+0x9c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d004      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x58>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d111      	bne.n	8001efc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d010      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efa:	e007      	b.n	8001f0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	40012c00 	.word	0x40012c00
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40000800 	.word	0x40000800

08001f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e041      	b.n	8001fba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe ff0e 	bl	8000d6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f000 fb72 	bl	800264c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_TIM_PWM_Start+0x24>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	bf14      	ite	ne
 8001fe0:	2301      	movne	r3, #1
 8001fe2:	2300      	moveq	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e022      	b.n	800202e <HAL_TIM_PWM_Start+0x6a>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d109      	bne.n	8002002 <HAL_TIM_PWM_Start+0x3e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	bf14      	ite	ne
 8001ffa:	2301      	movne	r3, #1
 8001ffc:	2300      	moveq	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	e015      	b.n	800202e <HAL_TIM_PWM_Start+0x6a>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d109      	bne.n	800201c <HAL_TIM_PWM_Start+0x58>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	bf14      	ite	ne
 8002014:	2301      	movne	r3, #1
 8002016:	2300      	moveq	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	e008      	b.n	800202e <HAL_TIM_PWM_Start+0x6a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e05e      	b.n	80020f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d104      	bne.n	8002046 <HAL_TIM_PWM_Start+0x82>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002044:	e013      	b.n	800206e <HAL_TIM_PWM_Start+0xaa>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d104      	bne.n	8002056 <HAL_TIM_PWM_Start+0x92>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002054:	e00b      	b.n	800206e <HAL_TIM_PWM_Start+0xaa>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d104      	bne.n	8002066 <HAL_TIM_PWM_Start+0xa2>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002064:	e003      	b.n	800206e <HAL_TIM_PWM_Start+0xaa>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2201      	movs	r2, #1
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fd68 	bl	8002b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_TIM_PWM_Start+0x138>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d107      	bne.n	8002096 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002094:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a18      	ldr	r2, [pc, #96]	; (80020fc <HAL_TIM_PWM_Start+0x138>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00e      	beq.n	80020be <HAL_TIM_PWM_Start+0xfa>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a8:	d009      	beq.n	80020be <HAL_TIM_PWM_Start+0xfa>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a14      	ldr	r2, [pc, #80]	; (8002100 <HAL_TIM_PWM_Start+0x13c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d004      	beq.n	80020be <HAL_TIM_PWM_Start+0xfa>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <HAL_TIM_PWM_Start+0x140>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d111      	bne.n	80020e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b06      	cmp	r3, #6
 80020ce:	d010      	beq.n	80020f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e0:	e007      	b.n	80020f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0201 	orr.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	40000400 	.word	0x40000400
 8002104:	40000800 	.word	0x40000800

08002108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d122      	bne.n	8002164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b02      	cmp	r3, #2
 800212a:	d11b      	bne.n	8002164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0202 	mvn.w	r2, #2
 8002134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fa62 	bl	8002614 <HAL_TIM_IC_CaptureCallback>
 8002150:	e005      	b.n	800215e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fa55 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fa64 	bl	8002626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b04      	cmp	r3, #4
 8002170:	d122      	bne.n	80021b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b04      	cmp	r3, #4
 800217e:	d11b      	bne.n	80021b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0204 	mvn.w	r2, #4
 8002188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2202      	movs	r2, #2
 800218e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa38 	bl	8002614 <HAL_TIM_IC_CaptureCallback>
 80021a4:	e005      	b.n	80021b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fa2b 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fa3a 	bl	8002626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d122      	bne.n	800220c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d11b      	bne.n	800220c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0208 	mvn.w	r2, #8
 80021dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa0e 	bl	8002614 <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fa01 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fa10 	bl	8002626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b10      	cmp	r3, #16
 8002218:	d122      	bne.n	8002260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b10      	cmp	r3, #16
 8002226:	d11b      	bne.n	8002260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0210 	mvn.w	r2, #16
 8002230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2208      	movs	r2, #8
 8002236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f9e4 	bl	8002614 <HAL_TIM_IC_CaptureCallback>
 800224c:	e005      	b.n	800225a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f9d7 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f9e6 	bl	8002626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b01      	cmp	r3, #1
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0201 	mvn.w	r2, #1
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fa80 	bl	800078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	2b80      	cmp	r3, #128	; 0x80
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a4:	2b80      	cmp	r3, #128	; 0x80
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fd26 	bl	8002d04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d0:	2b40      	cmp	r3, #64	; 0x40
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f9aa 	bl	8002638 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d10e      	bne.n	8002310 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d107      	bne.n	8002310 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0220 	mvn.w	r2, #32
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fcf1 	bl	8002cf2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800232e:	2302      	movs	r3, #2
 8002330:	e0ac      	b.n	800248c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	f200 809f 	bhi.w	8002480 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	0800237d 	.word	0x0800237d
 800234c:	08002481 	.word	0x08002481
 8002350:	08002481 	.word	0x08002481
 8002354:	08002481 	.word	0x08002481
 8002358:	080023bd 	.word	0x080023bd
 800235c:	08002481 	.word	0x08002481
 8002360:	08002481 	.word	0x08002481
 8002364:	08002481 	.word	0x08002481
 8002368:	080023ff 	.word	0x080023ff
 800236c:	08002481 	.word	0x08002481
 8002370:	08002481 	.word	0x08002481
 8002374:	08002481 	.word	0x08002481
 8002378:	0800243f 	.word	0x0800243f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f9c4 	bl	8002710 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0208 	orr.w	r2, r2, #8
 8002396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0204 	bic.w	r2, r2, #4
 80023a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6999      	ldr	r1, [r3, #24]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	619a      	str	r2, [r3, #24]
      break;
 80023ba:	e062      	b.n	8002482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fa0a 	bl	80027dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6999      	ldr	r1, [r3, #24]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	021a      	lsls	r2, r3, #8
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	619a      	str	r2, [r3, #24]
      break;
 80023fc:	e041      	b.n	8002482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fa53 	bl	80028b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0208 	orr.w	r2, r2, #8
 8002418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0204 	bic.w	r2, r2, #4
 8002428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69d9      	ldr	r1, [r3, #28]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	61da      	str	r2, [r3, #28]
      break;
 800243c:	e021      	b.n	8002482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fa9d 	bl	8002984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69d9      	ldr	r1, [r3, #28]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	021a      	lsls	r2, r3, #8
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	61da      	str	r2, [r3, #28]
      break;
 800247e:	e000      	b.n	8002482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_TIM_ConfigClockSource+0x18>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e0a6      	b.n	80025fa <HAL_TIM_ConfigClockSource+0x166>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b40      	cmp	r3, #64	; 0x40
 80024e2:	d067      	beq.n	80025b4 <HAL_TIM_ConfigClockSource+0x120>
 80024e4:	2b40      	cmp	r3, #64	; 0x40
 80024e6:	d80b      	bhi.n	8002500 <HAL_TIM_ConfigClockSource+0x6c>
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d073      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0x140>
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d802      	bhi.n	80024f6 <HAL_TIM_ConfigClockSource+0x62>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d06f      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024f4:	e078      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d06c      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0x140>
 80024fa:	2b30      	cmp	r3, #48	; 0x30
 80024fc:	d06a      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80024fe:	e073      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002500:	2b70      	cmp	r3, #112	; 0x70
 8002502:	d00d      	beq.n	8002520 <HAL_TIM_ConfigClockSource+0x8c>
 8002504:	2b70      	cmp	r3, #112	; 0x70
 8002506:	d804      	bhi.n	8002512 <HAL_TIM_ConfigClockSource+0x7e>
 8002508:	2b50      	cmp	r3, #80	; 0x50
 800250a:	d033      	beq.n	8002574 <HAL_TIM_ConfigClockSource+0xe0>
 800250c:	2b60      	cmp	r3, #96	; 0x60
 800250e:	d041      	beq.n	8002594 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002510:	e06a      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002516:	d066      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0x152>
 8002518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251c:	d017      	beq.n	800254e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800251e:	e063      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6899      	ldr	r1, [r3, #8]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f000 faed 	bl	8002b0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002542:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	609a      	str	r2, [r3, #8]
      break;
 800254c:	e04c      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6899      	ldr	r1, [r3, #8]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f000 fad6 	bl	8002b0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002570:	609a      	str	r2, [r3, #8]
      break;
 8002572:	e039      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	461a      	mov	r2, r3
 8002582:	f000 fa4d 	bl	8002a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2150      	movs	r1, #80	; 0x50
 800258c:	4618      	mov	r0, r3
 800258e:	f000 faa4 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 8002592:	e029      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	461a      	mov	r2, r3
 80025a2:	f000 fa6b 	bl	8002a7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2160      	movs	r1, #96	; 0x60
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fa94 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80025b2:	e019      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	461a      	mov	r2, r3
 80025c2:	f000 fa2d 	bl	8002a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fa84 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80025d2:	e009      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f000 fa7b 	bl	8002ada <TIM_ITRx_SetConfig>
        break;
 80025e4:	e000      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00b      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d007      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a26      	ldr	r2, [pc, #152]	; (8002708 <TIM_Base_SetConfig+0xbc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a25      	ldr	r2, [pc, #148]	; (800270c <TIM_Base_SetConfig+0xc0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d108      	bne.n	800268e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00b      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d007      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <TIM_Base_SetConfig+0xbc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d003      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <TIM_Base_SetConfig+0xc0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d108      	bne.n	80026c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d103      	bne.n	80026f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	615a      	str	r2, [r3, #20]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400
 800270c:	40000800 	.word	0x40000800

08002710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f023 0201 	bic.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0303 	bic.w	r3, r3, #3
 8002746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f023 0302 	bic.w	r3, r3, #2
 8002758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <TIM_OC1_SetConfig+0xc8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d10c      	bne.n	8002786 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f023 0308 	bic.w	r3, r3, #8
 8002772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <TIM_OC1_SetConfig+0xc8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d111      	bne.n	80027b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800279c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	621a      	str	r2, [r3, #32]
}
 80027cc:	bf00      	nop
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40012c00 	.word	0x40012c00

080027dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	f023 0210 	bic.w	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0320 	bic.w	r3, r3, #32
 8002826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <TIM_OC2_SetConfig+0xd0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d10d      	bne.n	8002858 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002856:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a14      	ldr	r2, [pc, #80]	; (80028ac <TIM_OC2_SetConfig+0xd0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d113      	bne.n	8002888 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800286e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	621a      	str	r2, [r3, #32]
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40012c00 	.word	0x40012c00

080028b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <TIM_OC3_SetConfig+0xd0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10d      	bne.n	800292a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <TIM_OC3_SetConfig+0xd0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d113      	bne.n	800295a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	621a      	str	r2, [r3, #32]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00

08002984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	031b      	lsls	r3, r3, #12
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <TIM_OC4_SetConfig+0x98>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d109      	bne.n	80029f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	019b      	lsls	r3, r3, #6
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	621a      	str	r2, [r3, #32]
}
 8002a12:	bf00      	nop
 8002a14:	371c      	adds	r7, #28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	40012c00 	.word	0x40012c00

08002a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f023 0201 	bic.w	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f023 030a 	bic.w	r3, r3, #10
 8002a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	621a      	str	r2, [r3, #32]
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f023 0210 	bic.w	r2, r3, #16
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	031b      	lsls	r3, r3, #12
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ab8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	621a      	str	r2, [r3, #32]
}
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f043 0307 	orr.w	r3, r3, #7
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b087      	sub	sp, #28
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	021a      	lsls	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	609a      	str	r2, [r3, #8]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2201      	movs	r2, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1a      	ldr	r2, [r3, #32]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	401a      	ands	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a1a      	ldr	r2, [r3, #32]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e046      	b.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10c      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800

08002c50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e03d      	b.n	8002ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
	...

08002d18 <__errno>:
 8002d18:	4b01      	ldr	r3, [pc, #4]	; (8002d20 <__errno+0x8>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	2000000c 	.word	0x2000000c

08002d24 <__libc_init_array>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	2500      	movs	r5, #0
 8002d28:	4e0c      	ldr	r6, [pc, #48]	; (8002d5c <__libc_init_array+0x38>)
 8002d2a:	4c0d      	ldr	r4, [pc, #52]	; (8002d60 <__libc_init_array+0x3c>)
 8002d2c:	1ba4      	subs	r4, r4, r6
 8002d2e:	10a4      	asrs	r4, r4, #2
 8002d30:	42a5      	cmp	r5, r4
 8002d32:	d109      	bne.n	8002d48 <__libc_init_array+0x24>
 8002d34:	f000 fc34 	bl	80035a0 <_init>
 8002d38:	2500      	movs	r5, #0
 8002d3a:	4e0a      	ldr	r6, [pc, #40]	; (8002d64 <__libc_init_array+0x40>)
 8002d3c:	4c0a      	ldr	r4, [pc, #40]	; (8002d68 <__libc_init_array+0x44>)
 8002d3e:	1ba4      	subs	r4, r4, r6
 8002d40:	10a4      	asrs	r4, r4, #2
 8002d42:	42a5      	cmp	r5, r4
 8002d44:	d105      	bne.n	8002d52 <__libc_init_array+0x2e>
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d4c:	4798      	blx	r3
 8002d4e:	3501      	adds	r5, #1
 8002d50:	e7ee      	b.n	8002d30 <__libc_init_array+0xc>
 8002d52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d56:	4798      	blx	r3
 8002d58:	3501      	adds	r5, #1
 8002d5a:	e7f2      	b.n	8002d42 <__libc_init_array+0x1e>
 8002d5c:	08003634 	.word	0x08003634
 8002d60:	08003634 	.word	0x08003634
 8002d64:	08003634 	.word	0x08003634
 8002d68:	08003638 	.word	0x08003638

08002d6c <memset>:
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4402      	add	r2, r0
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d100      	bne.n	8002d76 <memset+0xa>
 8002d74:	4770      	bx	lr
 8002d76:	f803 1b01 	strb.w	r1, [r3], #1
 8002d7a:	e7f9      	b.n	8002d70 <memset+0x4>

08002d7c <siprintf>:
 8002d7c:	b40e      	push	{r1, r2, r3}
 8002d7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d82:	b500      	push	{lr}
 8002d84:	b09c      	sub	sp, #112	; 0x70
 8002d86:	ab1d      	add	r3, sp, #116	; 0x74
 8002d88:	9002      	str	r0, [sp, #8]
 8002d8a:	9006      	str	r0, [sp, #24]
 8002d8c:	9107      	str	r1, [sp, #28]
 8002d8e:	9104      	str	r1, [sp, #16]
 8002d90:	4808      	ldr	r0, [pc, #32]	; (8002db4 <siprintf+0x38>)
 8002d92:	4909      	ldr	r1, [pc, #36]	; (8002db8 <siprintf+0x3c>)
 8002d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d98:	9105      	str	r1, [sp, #20]
 8002d9a:	6800      	ldr	r0, [r0, #0]
 8002d9c:	a902      	add	r1, sp, #8
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	f000 f866 	bl	8002e70 <_svfiprintf_r>
 8002da4:	2200      	movs	r2, #0
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	b01c      	add	sp, #112	; 0x70
 8002dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8002db0:	b003      	add	sp, #12
 8002db2:	4770      	bx	lr
 8002db4:	2000000c 	.word	0x2000000c
 8002db8:	ffff0208 	.word	0xffff0208

08002dbc <__ssputs_r>:
 8002dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dc0:	688e      	ldr	r6, [r1, #8]
 8002dc2:	4682      	mov	sl, r0
 8002dc4:	429e      	cmp	r6, r3
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	4690      	mov	r8, r2
 8002dca:	4699      	mov	r9, r3
 8002dcc:	d837      	bhi.n	8002e3e <__ssputs_r+0x82>
 8002dce:	898a      	ldrh	r2, [r1, #12]
 8002dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002dd4:	d031      	beq.n	8002e3a <__ssputs_r+0x7e>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	6825      	ldr	r5, [r4, #0]
 8002dda:	6909      	ldr	r1, [r1, #16]
 8002ddc:	1a6f      	subs	r7, r5, r1
 8002dde:	6965      	ldr	r5, [r4, #20]
 8002de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002de4:	fb95 f5f3 	sdiv	r5, r5, r3
 8002de8:	f109 0301 	add.w	r3, r9, #1
 8002dec:	443b      	add	r3, r7
 8002dee:	429d      	cmp	r5, r3
 8002df0:	bf38      	it	cc
 8002df2:	461d      	movcc	r5, r3
 8002df4:	0553      	lsls	r3, r2, #21
 8002df6:	d530      	bpl.n	8002e5a <__ssputs_r+0x9e>
 8002df8:	4629      	mov	r1, r5
 8002dfa:	f000 fb37 	bl	800346c <_malloc_r>
 8002dfe:	4606      	mov	r6, r0
 8002e00:	b950      	cbnz	r0, 8002e18 <__ssputs_r+0x5c>
 8002e02:	230c      	movs	r3, #12
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e08:	f8ca 3000 	str.w	r3, [sl]
 8002e0c:	89a3      	ldrh	r3, [r4, #12]
 8002e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e12:	81a3      	strh	r3, [r4, #12]
 8002e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e18:	463a      	mov	r2, r7
 8002e1a:	6921      	ldr	r1, [r4, #16]
 8002e1c:	f000 fab6 	bl	800338c <memcpy>
 8002e20:	89a3      	ldrh	r3, [r4, #12]
 8002e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2a:	81a3      	strh	r3, [r4, #12]
 8002e2c:	6126      	str	r6, [r4, #16]
 8002e2e:	443e      	add	r6, r7
 8002e30:	6026      	str	r6, [r4, #0]
 8002e32:	464e      	mov	r6, r9
 8002e34:	6165      	str	r5, [r4, #20]
 8002e36:	1bed      	subs	r5, r5, r7
 8002e38:	60a5      	str	r5, [r4, #8]
 8002e3a:	454e      	cmp	r6, r9
 8002e3c:	d900      	bls.n	8002e40 <__ssputs_r+0x84>
 8002e3e:	464e      	mov	r6, r9
 8002e40:	4632      	mov	r2, r6
 8002e42:	4641      	mov	r1, r8
 8002e44:	6820      	ldr	r0, [r4, #0]
 8002e46:	f000 faac 	bl	80033a2 <memmove>
 8002e4a:	68a3      	ldr	r3, [r4, #8]
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	1b9b      	subs	r3, r3, r6
 8002e50:	60a3      	str	r3, [r4, #8]
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	441e      	add	r6, r3
 8002e56:	6026      	str	r6, [r4, #0]
 8002e58:	e7dc      	b.n	8002e14 <__ssputs_r+0x58>
 8002e5a:	462a      	mov	r2, r5
 8002e5c:	f000 fb60 	bl	8003520 <_realloc_r>
 8002e60:	4606      	mov	r6, r0
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d1e2      	bne.n	8002e2c <__ssputs_r+0x70>
 8002e66:	6921      	ldr	r1, [r4, #16]
 8002e68:	4650      	mov	r0, sl
 8002e6a:	f000 fab3 	bl	80033d4 <_free_r>
 8002e6e:	e7c8      	b.n	8002e02 <__ssputs_r+0x46>

08002e70 <_svfiprintf_r>:
 8002e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e74:	461d      	mov	r5, r3
 8002e76:	898b      	ldrh	r3, [r1, #12]
 8002e78:	b09d      	sub	sp, #116	; 0x74
 8002e7a:	061f      	lsls	r7, r3, #24
 8002e7c:	4680      	mov	r8, r0
 8002e7e:	460c      	mov	r4, r1
 8002e80:	4616      	mov	r6, r2
 8002e82:	d50f      	bpl.n	8002ea4 <_svfiprintf_r+0x34>
 8002e84:	690b      	ldr	r3, [r1, #16]
 8002e86:	b96b      	cbnz	r3, 8002ea4 <_svfiprintf_r+0x34>
 8002e88:	2140      	movs	r1, #64	; 0x40
 8002e8a:	f000 faef 	bl	800346c <_malloc_r>
 8002e8e:	6020      	str	r0, [r4, #0]
 8002e90:	6120      	str	r0, [r4, #16]
 8002e92:	b928      	cbnz	r0, 8002ea0 <_svfiprintf_r+0x30>
 8002e94:	230c      	movs	r3, #12
 8002e96:	f8c8 3000 	str.w	r3, [r8]
 8002e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e9e:	e0c8      	b.n	8003032 <_svfiprintf_r+0x1c2>
 8002ea0:	2340      	movs	r3, #64	; 0x40
 8002ea2:	6163      	str	r3, [r4, #20]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002eae:	2330      	movs	r3, #48	; 0x30
 8002eb0:	f04f 0b01 	mov.w	fp, #1
 8002eb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002eb8:	9503      	str	r5, [sp, #12]
 8002eba:	4637      	mov	r7, r6
 8002ebc:	463d      	mov	r5, r7
 8002ebe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ec2:	b10b      	cbz	r3, 8002ec8 <_svfiprintf_r+0x58>
 8002ec4:	2b25      	cmp	r3, #37	; 0x25
 8002ec6:	d13e      	bne.n	8002f46 <_svfiprintf_r+0xd6>
 8002ec8:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ecc:	d00b      	beq.n	8002ee6 <_svfiprintf_r+0x76>
 8002ece:	4653      	mov	r3, sl
 8002ed0:	4632      	mov	r2, r6
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	4640      	mov	r0, r8
 8002ed6:	f7ff ff71 	bl	8002dbc <__ssputs_r>
 8002eda:	3001      	adds	r0, #1
 8002edc:	f000 80a4 	beq.w	8003028 <_svfiprintf_r+0x1b8>
 8002ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee2:	4453      	add	r3, sl
 8002ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee6:	783b      	ldrb	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 809d 	beq.w	8003028 <_svfiprintf_r+0x1b8>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ef8:	9304      	str	r3, [sp, #16]
 8002efa:	9307      	str	r3, [sp, #28]
 8002efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f00:	931a      	str	r3, [sp, #104]	; 0x68
 8002f02:	462f      	mov	r7, r5
 8002f04:	2205      	movs	r2, #5
 8002f06:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002f0a:	4850      	ldr	r0, [pc, #320]	; (800304c <_svfiprintf_r+0x1dc>)
 8002f0c:	f000 fa30 	bl	8003370 <memchr>
 8002f10:	9b04      	ldr	r3, [sp, #16]
 8002f12:	b9d0      	cbnz	r0, 8002f4a <_svfiprintf_r+0xda>
 8002f14:	06d9      	lsls	r1, r3, #27
 8002f16:	bf44      	itt	mi
 8002f18:	2220      	movmi	r2, #32
 8002f1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f1e:	071a      	lsls	r2, r3, #28
 8002f20:	bf44      	itt	mi
 8002f22:	222b      	movmi	r2, #43	; 0x2b
 8002f24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f28:	782a      	ldrb	r2, [r5, #0]
 8002f2a:	2a2a      	cmp	r2, #42	; 0x2a
 8002f2c:	d015      	beq.n	8002f5a <_svfiprintf_r+0xea>
 8002f2e:	462f      	mov	r7, r5
 8002f30:	2000      	movs	r0, #0
 8002f32:	250a      	movs	r5, #10
 8002f34:	9a07      	ldr	r2, [sp, #28]
 8002f36:	4639      	mov	r1, r7
 8002f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f3c:	3b30      	subs	r3, #48	; 0x30
 8002f3e:	2b09      	cmp	r3, #9
 8002f40:	d94d      	bls.n	8002fde <_svfiprintf_r+0x16e>
 8002f42:	b1b8      	cbz	r0, 8002f74 <_svfiprintf_r+0x104>
 8002f44:	e00f      	b.n	8002f66 <_svfiprintf_r+0xf6>
 8002f46:	462f      	mov	r7, r5
 8002f48:	e7b8      	b.n	8002ebc <_svfiprintf_r+0x4c>
 8002f4a:	4a40      	ldr	r2, [pc, #256]	; (800304c <_svfiprintf_r+0x1dc>)
 8002f4c:	463d      	mov	r5, r7
 8002f4e:	1a80      	subs	r0, r0, r2
 8002f50:	fa0b f000 	lsl.w	r0, fp, r0
 8002f54:	4318      	orrs	r0, r3
 8002f56:	9004      	str	r0, [sp, #16]
 8002f58:	e7d3      	b.n	8002f02 <_svfiprintf_r+0x92>
 8002f5a:	9a03      	ldr	r2, [sp, #12]
 8002f5c:	1d11      	adds	r1, r2, #4
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	9103      	str	r1, [sp, #12]
 8002f62:	2a00      	cmp	r2, #0
 8002f64:	db01      	blt.n	8002f6a <_svfiprintf_r+0xfa>
 8002f66:	9207      	str	r2, [sp, #28]
 8002f68:	e004      	b.n	8002f74 <_svfiprintf_r+0x104>
 8002f6a:	4252      	negs	r2, r2
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	9207      	str	r2, [sp, #28]
 8002f72:	9304      	str	r3, [sp, #16]
 8002f74:	783b      	ldrb	r3, [r7, #0]
 8002f76:	2b2e      	cmp	r3, #46	; 0x2e
 8002f78:	d10c      	bne.n	8002f94 <_svfiprintf_r+0x124>
 8002f7a:	787b      	ldrb	r3, [r7, #1]
 8002f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f7e:	d133      	bne.n	8002fe8 <_svfiprintf_r+0x178>
 8002f80:	9b03      	ldr	r3, [sp, #12]
 8002f82:	3702      	adds	r7, #2
 8002f84:	1d1a      	adds	r2, r3, #4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	9203      	str	r2, [sp, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bfb8      	it	lt
 8002f8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002f92:	9305      	str	r3, [sp, #20]
 8002f94:	4d2e      	ldr	r5, [pc, #184]	; (8003050 <_svfiprintf_r+0x1e0>)
 8002f96:	2203      	movs	r2, #3
 8002f98:	7839      	ldrb	r1, [r7, #0]
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	f000 f9e8 	bl	8003370 <memchr>
 8002fa0:	b138      	cbz	r0, 8002fb2 <_svfiprintf_r+0x142>
 8002fa2:	2340      	movs	r3, #64	; 0x40
 8002fa4:	1b40      	subs	r0, r0, r5
 8002fa6:	fa03 f000 	lsl.w	r0, r3, r0
 8002faa:	9b04      	ldr	r3, [sp, #16]
 8002fac:	3701      	adds	r7, #1
 8002fae:	4303      	orrs	r3, r0
 8002fb0:	9304      	str	r3, [sp, #16]
 8002fb2:	7839      	ldrb	r1, [r7, #0]
 8002fb4:	2206      	movs	r2, #6
 8002fb6:	4827      	ldr	r0, [pc, #156]	; (8003054 <_svfiprintf_r+0x1e4>)
 8002fb8:	1c7e      	adds	r6, r7, #1
 8002fba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fbe:	f000 f9d7 	bl	8003370 <memchr>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d038      	beq.n	8003038 <_svfiprintf_r+0x1c8>
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <_svfiprintf_r+0x1e8>)
 8002fc8:	bb13      	cbnz	r3, 8003010 <_svfiprintf_r+0x1a0>
 8002fca:	9b03      	ldr	r3, [sp, #12]
 8002fcc:	3307      	adds	r3, #7
 8002fce:	f023 0307 	bic.w	r3, r3, #7
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	9303      	str	r3, [sp, #12]
 8002fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fd8:	444b      	add	r3, r9
 8002fda:	9309      	str	r3, [sp, #36]	; 0x24
 8002fdc:	e76d      	b.n	8002eba <_svfiprintf_r+0x4a>
 8002fde:	fb05 3202 	mla	r2, r5, r2, r3
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	460f      	mov	r7, r1
 8002fe6:	e7a6      	b.n	8002f36 <_svfiprintf_r+0xc6>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	250a      	movs	r5, #10
 8002fec:	4619      	mov	r1, r3
 8002fee:	3701      	adds	r7, #1
 8002ff0:	9305      	str	r3, [sp, #20]
 8002ff2:	4638      	mov	r0, r7
 8002ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ff8:	3a30      	subs	r2, #48	; 0x30
 8002ffa:	2a09      	cmp	r2, #9
 8002ffc:	d903      	bls.n	8003006 <_svfiprintf_r+0x196>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0c8      	beq.n	8002f94 <_svfiprintf_r+0x124>
 8003002:	9105      	str	r1, [sp, #20]
 8003004:	e7c6      	b.n	8002f94 <_svfiprintf_r+0x124>
 8003006:	fb05 2101 	mla	r1, r5, r1, r2
 800300a:	2301      	movs	r3, #1
 800300c:	4607      	mov	r7, r0
 800300e:	e7f0      	b.n	8002ff2 <_svfiprintf_r+0x182>
 8003010:	ab03      	add	r3, sp, #12
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4622      	mov	r2, r4
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <_svfiprintf_r+0x1ec>)
 8003018:	a904      	add	r1, sp, #16
 800301a:	4640      	mov	r0, r8
 800301c:	f3af 8000 	nop.w
 8003020:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003024:	4681      	mov	r9, r0
 8003026:	d1d6      	bne.n	8002fd6 <_svfiprintf_r+0x166>
 8003028:	89a3      	ldrh	r3, [r4, #12]
 800302a:	065b      	lsls	r3, r3, #25
 800302c:	f53f af35 	bmi.w	8002e9a <_svfiprintf_r+0x2a>
 8003030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003032:	b01d      	add	sp, #116	; 0x74
 8003034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003038:	ab03      	add	r3, sp, #12
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	4622      	mov	r2, r4
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <_svfiprintf_r+0x1ec>)
 8003040:	a904      	add	r1, sp, #16
 8003042:	4640      	mov	r0, r8
 8003044:	f000 f882 	bl	800314c <_printf_i>
 8003048:	e7ea      	b.n	8003020 <_svfiprintf_r+0x1b0>
 800304a:	bf00      	nop
 800304c:	08003600 	.word	0x08003600
 8003050:	08003606 	.word	0x08003606
 8003054:	0800360a 	.word	0x0800360a
 8003058:	00000000 	.word	0x00000000
 800305c:	08002dbd 	.word	0x08002dbd

08003060 <_printf_common>:
 8003060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003064:	4691      	mov	r9, r2
 8003066:	461f      	mov	r7, r3
 8003068:	688a      	ldr	r2, [r1, #8]
 800306a:	690b      	ldr	r3, [r1, #16]
 800306c:	4606      	mov	r6, r0
 800306e:	4293      	cmp	r3, r2
 8003070:	bfb8      	it	lt
 8003072:	4613      	movlt	r3, r2
 8003074:	f8c9 3000 	str.w	r3, [r9]
 8003078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800307c:	460c      	mov	r4, r1
 800307e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003082:	b112      	cbz	r2, 800308a <_printf_common+0x2a>
 8003084:	3301      	adds	r3, #1
 8003086:	f8c9 3000 	str.w	r3, [r9]
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	0699      	lsls	r1, r3, #26
 800308e:	bf42      	ittt	mi
 8003090:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003094:	3302      	addmi	r3, #2
 8003096:	f8c9 3000 	strmi.w	r3, [r9]
 800309a:	6825      	ldr	r5, [r4, #0]
 800309c:	f015 0506 	ands.w	r5, r5, #6
 80030a0:	d107      	bne.n	80030b2 <_printf_common+0x52>
 80030a2:	f104 0a19 	add.w	sl, r4, #25
 80030a6:	68e3      	ldr	r3, [r4, #12]
 80030a8:	f8d9 2000 	ldr.w	r2, [r9]
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	42ab      	cmp	r3, r5
 80030b0:	dc29      	bgt.n	8003106 <_printf_common+0xa6>
 80030b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030b6:	6822      	ldr	r2, [r4, #0]
 80030b8:	3300      	adds	r3, #0
 80030ba:	bf18      	it	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	0692      	lsls	r2, r2, #26
 80030c0:	d42e      	bmi.n	8003120 <_printf_common+0xc0>
 80030c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030c6:	4639      	mov	r1, r7
 80030c8:	4630      	mov	r0, r6
 80030ca:	47c0      	blx	r8
 80030cc:	3001      	adds	r0, #1
 80030ce:	d021      	beq.n	8003114 <_printf_common+0xb4>
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	68e5      	ldr	r5, [r4, #12]
 80030d4:	f003 0306 	and.w	r3, r3, #6
 80030d8:	2b04      	cmp	r3, #4
 80030da:	bf18      	it	ne
 80030dc:	2500      	movne	r5, #0
 80030de:	f8d9 2000 	ldr.w	r2, [r9]
 80030e2:	f04f 0900 	mov.w	r9, #0
 80030e6:	bf08      	it	eq
 80030e8:	1aad      	subeq	r5, r5, r2
 80030ea:	68a3      	ldr	r3, [r4, #8]
 80030ec:	6922      	ldr	r2, [r4, #16]
 80030ee:	bf08      	it	eq
 80030f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030f4:	4293      	cmp	r3, r2
 80030f6:	bfc4      	itt	gt
 80030f8:	1a9b      	subgt	r3, r3, r2
 80030fa:	18ed      	addgt	r5, r5, r3
 80030fc:	341a      	adds	r4, #26
 80030fe:	454d      	cmp	r5, r9
 8003100:	d11a      	bne.n	8003138 <_printf_common+0xd8>
 8003102:	2000      	movs	r0, #0
 8003104:	e008      	b.n	8003118 <_printf_common+0xb8>
 8003106:	2301      	movs	r3, #1
 8003108:	4652      	mov	r2, sl
 800310a:	4639      	mov	r1, r7
 800310c:	4630      	mov	r0, r6
 800310e:	47c0      	blx	r8
 8003110:	3001      	adds	r0, #1
 8003112:	d103      	bne.n	800311c <_printf_common+0xbc>
 8003114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800311c:	3501      	adds	r5, #1
 800311e:	e7c2      	b.n	80030a6 <_printf_common+0x46>
 8003120:	2030      	movs	r0, #48	; 0x30
 8003122:	18e1      	adds	r1, r4, r3
 8003124:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800312e:	4422      	add	r2, r4
 8003130:	3302      	adds	r3, #2
 8003132:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003136:	e7c4      	b.n	80030c2 <_printf_common+0x62>
 8003138:	2301      	movs	r3, #1
 800313a:	4622      	mov	r2, r4
 800313c:	4639      	mov	r1, r7
 800313e:	4630      	mov	r0, r6
 8003140:	47c0      	blx	r8
 8003142:	3001      	adds	r0, #1
 8003144:	d0e6      	beq.n	8003114 <_printf_common+0xb4>
 8003146:	f109 0901 	add.w	r9, r9, #1
 800314a:	e7d8      	b.n	80030fe <_printf_common+0x9e>

0800314c <_printf_i>:
 800314c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003150:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003154:	460c      	mov	r4, r1
 8003156:	7e09      	ldrb	r1, [r1, #24]
 8003158:	b085      	sub	sp, #20
 800315a:	296e      	cmp	r1, #110	; 0x6e
 800315c:	4617      	mov	r7, r2
 800315e:	4606      	mov	r6, r0
 8003160:	4698      	mov	r8, r3
 8003162:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003164:	f000 80b3 	beq.w	80032ce <_printf_i+0x182>
 8003168:	d822      	bhi.n	80031b0 <_printf_i+0x64>
 800316a:	2963      	cmp	r1, #99	; 0x63
 800316c:	d036      	beq.n	80031dc <_printf_i+0x90>
 800316e:	d80a      	bhi.n	8003186 <_printf_i+0x3a>
 8003170:	2900      	cmp	r1, #0
 8003172:	f000 80b9 	beq.w	80032e8 <_printf_i+0x19c>
 8003176:	2958      	cmp	r1, #88	; 0x58
 8003178:	f000 8083 	beq.w	8003282 <_printf_i+0x136>
 800317c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003180:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003184:	e032      	b.n	80031ec <_printf_i+0xa0>
 8003186:	2964      	cmp	r1, #100	; 0x64
 8003188:	d001      	beq.n	800318e <_printf_i+0x42>
 800318a:	2969      	cmp	r1, #105	; 0x69
 800318c:	d1f6      	bne.n	800317c <_printf_i+0x30>
 800318e:	6820      	ldr	r0, [r4, #0]
 8003190:	6813      	ldr	r3, [r2, #0]
 8003192:	0605      	lsls	r5, r0, #24
 8003194:	f103 0104 	add.w	r1, r3, #4
 8003198:	d52a      	bpl.n	80031f0 <_printf_i+0xa4>
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6011      	str	r1, [r2, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	da03      	bge.n	80031aa <_printf_i+0x5e>
 80031a2:	222d      	movs	r2, #45	; 0x2d
 80031a4:	425b      	negs	r3, r3
 80031a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031aa:	486f      	ldr	r0, [pc, #444]	; (8003368 <_printf_i+0x21c>)
 80031ac:	220a      	movs	r2, #10
 80031ae:	e039      	b.n	8003224 <_printf_i+0xd8>
 80031b0:	2973      	cmp	r1, #115	; 0x73
 80031b2:	f000 809d 	beq.w	80032f0 <_printf_i+0x1a4>
 80031b6:	d808      	bhi.n	80031ca <_printf_i+0x7e>
 80031b8:	296f      	cmp	r1, #111	; 0x6f
 80031ba:	d020      	beq.n	80031fe <_printf_i+0xb2>
 80031bc:	2970      	cmp	r1, #112	; 0x70
 80031be:	d1dd      	bne.n	800317c <_printf_i+0x30>
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	f043 0320 	orr.w	r3, r3, #32
 80031c6:	6023      	str	r3, [r4, #0]
 80031c8:	e003      	b.n	80031d2 <_printf_i+0x86>
 80031ca:	2975      	cmp	r1, #117	; 0x75
 80031cc:	d017      	beq.n	80031fe <_printf_i+0xb2>
 80031ce:	2978      	cmp	r1, #120	; 0x78
 80031d0:	d1d4      	bne.n	800317c <_printf_i+0x30>
 80031d2:	2378      	movs	r3, #120	; 0x78
 80031d4:	4865      	ldr	r0, [pc, #404]	; (800336c <_printf_i+0x220>)
 80031d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031da:	e055      	b.n	8003288 <_printf_i+0x13c>
 80031dc:	6813      	ldr	r3, [r2, #0]
 80031de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031e2:	1d19      	adds	r1, r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6011      	str	r1, [r2, #0]
 80031e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031ec:	2301      	movs	r3, #1
 80031ee:	e08c      	b.n	800330a <_printf_i+0x1be>
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031f6:	6011      	str	r1, [r2, #0]
 80031f8:	bf18      	it	ne
 80031fa:	b21b      	sxthne	r3, r3
 80031fc:	e7cf      	b.n	800319e <_printf_i+0x52>
 80031fe:	6813      	ldr	r3, [r2, #0]
 8003200:	6825      	ldr	r5, [r4, #0]
 8003202:	1d18      	adds	r0, r3, #4
 8003204:	6010      	str	r0, [r2, #0]
 8003206:	0628      	lsls	r0, r5, #24
 8003208:	d501      	bpl.n	800320e <_printf_i+0xc2>
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	e002      	b.n	8003214 <_printf_i+0xc8>
 800320e:	0668      	lsls	r0, r5, #25
 8003210:	d5fb      	bpl.n	800320a <_printf_i+0xbe>
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	296f      	cmp	r1, #111	; 0x6f
 8003216:	bf14      	ite	ne
 8003218:	220a      	movne	r2, #10
 800321a:	2208      	moveq	r2, #8
 800321c:	4852      	ldr	r0, [pc, #328]	; (8003368 <_printf_i+0x21c>)
 800321e:	2100      	movs	r1, #0
 8003220:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003224:	6865      	ldr	r5, [r4, #4]
 8003226:	2d00      	cmp	r5, #0
 8003228:	60a5      	str	r5, [r4, #8]
 800322a:	f2c0 8095 	blt.w	8003358 <_printf_i+0x20c>
 800322e:	6821      	ldr	r1, [r4, #0]
 8003230:	f021 0104 	bic.w	r1, r1, #4
 8003234:	6021      	str	r1, [r4, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d13d      	bne.n	80032b6 <_printf_i+0x16a>
 800323a:	2d00      	cmp	r5, #0
 800323c:	f040 808e 	bne.w	800335c <_printf_i+0x210>
 8003240:	4665      	mov	r5, ip
 8003242:	2a08      	cmp	r2, #8
 8003244:	d10b      	bne.n	800325e <_printf_i+0x112>
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	07db      	lsls	r3, r3, #31
 800324a:	d508      	bpl.n	800325e <_printf_i+0x112>
 800324c:	6923      	ldr	r3, [r4, #16]
 800324e:	6862      	ldr	r2, [r4, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	bfde      	ittt	le
 8003254:	2330      	movle	r3, #48	; 0x30
 8003256:	f805 3c01 	strble.w	r3, [r5, #-1]
 800325a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800325e:	ebac 0305 	sub.w	r3, ip, r5
 8003262:	6123      	str	r3, [r4, #16]
 8003264:	f8cd 8000 	str.w	r8, [sp]
 8003268:	463b      	mov	r3, r7
 800326a:	aa03      	add	r2, sp, #12
 800326c:	4621      	mov	r1, r4
 800326e:	4630      	mov	r0, r6
 8003270:	f7ff fef6 	bl	8003060 <_printf_common>
 8003274:	3001      	adds	r0, #1
 8003276:	d14d      	bne.n	8003314 <_printf_i+0x1c8>
 8003278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800327c:	b005      	add	sp, #20
 800327e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003282:	4839      	ldr	r0, [pc, #228]	; (8003368 <_printf_i+0x21c>)
 8003284:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003288:	6813      	ldr	r3, [r2, #0]
 800328a:	6821      	ldr	r1, [r4, #0]
 800328c:	1d1d      	adds	r5, r3, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6015      	str	r5, [r2, #0]
 8003292:	060a      	lsls	r2, r1, #24
 8003294:	d50b      	bpl.n	80032ae <_printf_i+0x162>
 8003296:	07ca      	lsls	r2, r1, #31
 8003298:	bf44      	itt	mi
 800329a:	f041 0120 	orrmi.w	r1, r1, #32
 800329e:	6021      	strmi	r1, [r4, #0]
 80032a0:	b91b      	cbnz	r3, 80032aa <_printf_i+0x15e>
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	f022 0220 	bic.w	r2, r2, #32
 80032a8:	6022      	str	r2, [r4, #0]
 80032aa:	2210      	movs	r2, #16
 80032ac:	e7b7      	b.n	800321e <_printf_i+0xd2>
 80032ae:	064d      	lsls	r5, r1, #25
 80032b0:	bf48      	it	mi
 80032b2:	b29b      	uxthmi	r3, r3
 80032b4:	e7ef      	b.n	8003296 <_printf_i+0x14a>
 80032b6:	4665      	mov	r5, ip
 80032b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80032bc:	fb02 3311 	mls	r3, r2, r1, r3
 80032c0:	5cc3      	ldrb	r3, [r0, r3]
 80032c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032c6:	460b      	mov	r3, r1
 80032c8:	2900      	cmp	r1, #0
 80032ca:	d1f5      	bne.n	80032b8 <_printf_i+0x16c>
 80032cc:	e7b9      	b.n	8003242 <_printf_i+0xf6>
 80032ce:	6813      	ldr	r3, [r2, #0]
 80032d0:	6825      	ldr	r5, [r4, #0]
 80032d2:	1d18      	adds	r0, r3, #4
 80032d4:	6961      	ldr	r1, [r4, #20]
 80032d6:	6010      	str	r0, [r2, #0]
 80032d8:	0628      	lsls	r0, r5, #24
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	d501      	bpl.n	80032e2 <_printf_i+0x196>
 80032de:	6019      	str	r1, [r3, #0]
 80032e0:	e002      	b.n	80032e8 <_printf_i+0x19c>
 80032e2:	066a      	lsls	r2, r5, #25
 80032e4:	d5fb      	bpl.n	80032de <_printf_i+0x192>
 80032e6:	8019      	strh	r1, [r3, #0]
 80032e8:	2300      	movs	r3, #0
 80032ea:	4665      	mov	r5, ip
 80032ec:	6123      	str	r3, [r4, #16]
 80032ee:	e7b9      	b.n	8003264 <_printf_i+0x118>
 80032f0:	6813      	ldr	r3, [r2, #0]
 80032f2:	1d19      	adds	r1, r3, #4
 80032f4:	6011      	str	r1, [r2, #0]
 80032f6:	681d      	ldr	r5, [r3, #0]
 80032f8:	6862      	ldr	r2, [r4, #4]
 80032fa:	2100      	movs	r1, #0
 80032fc:	4628      	mov	r0, r5
 80032fe:	f000 f837 	bl	8003370 <memchr>
 8003302:	b108      	cbz	r0, 8003308 <_printf_i+0x1bc>
 8003304:	1b40      	subs	r0, r0, r5
 8003306:	6060      	str	r0, [r4, #4]
 8003308:	6863      	ldr	r3, [r4, #4]
 800330a:	6123      	str	r3, [r4, #16]
 800330c:	2300      	movs	r3, #0
 800330e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003312:	e7a7      	b.n	8003264 <_printf_i+0x118>
 8003314:	6923      	ldr	r3, [r4, #16]
 8003316:	462a      	mov	r2, r5
 8003318:	4639      	mov	r1, r7
 800331a:	4630      	mov	r0, r6
 800331c:	47c0      	blx	r8
 800331e:	3001      	adds	r0, #1
 8003320:	d0aa      	beq.n	8003278 <_printf_i+0x12c>
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	079b      	lsls	r3, r3, #30
 8003326:	d413      	bmi.n	8003350 <_printf_i+0x204>
 8003328:	68e0      	ldr	r0, [r4, #12]
 800332a:	9b03      	ldr	r3, [sp, #12]
 800332c:	4298      	cmp	r0, r3
 800332e:	bfb8      	it	lt
 8003330:	4618      	movlt	r0, r3
 8003332:	e7a3      	b.n	800327c <_printf_i+0x130>
 8003334:	2301      	movs	r3, #1
 8003336:	464a      	mov	r2, r9
 8003338:	4639      	mov	r1, r7
 800333a:	4630      	mov	r0, r6
 800333c:	47c0      	blx	r8
 800333e:	3001      	adds	r0, #1
 8003340:	d09a      	beq.n	8003278 <_printf_i+0x12c>
 8003342:	3501      	adds	r5, #1
 8003344:	68e3      	ldr	r3, [r4, #12]
 8003346:	9a03      	ldr	r2, [sp, #12]
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	42ab      	cmp	r3, r5
 800334c:	dcf2      	bgt.n	8003334 <_printf_i+0x1e8>
 800334e:	e7eb      	b.n	8003328 <_printf_i+0x1dc>
 8003350:	2500      	movs	r5, #0
 8003352:	f104 0919 	add.w	r9, r4, #25
 8003356:	e7f5      	b.n	8003344 <_printf_i+0x1f8>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ac      	bne.n	80032b6 <_printf_i+0x16a>
 800335c:	7803      	ldrb	r3, [r0, #0]
 800335e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003362:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003366:	e76c      	b.n	8003242 <_printf_i+0xf6>
 8003368:	08003611 	.word	0x08003611
 800336c:	08003622 	.word	0x08003622

08003370 <memchr>:
 8003370:	b510      	push	{r4, lr}
 8003372:	b2c9      	uxtb	r1, r1
 8003374:	4402      	add	r2, r0
 8003376:	4290      	cmp	r0, r2
 8003378:	4603      	mov	r3, r0
 800337a:	d101      	bne.n	8003380 <memchr+0x10>
 800337c:	2300      	movs	r3, #0
 800337e:	e003      	b.n	8003388 <memchr+0x18>
 8003380:	781c      	ldrb	r4, [r3, #0]
 8003382:	3001      	adds	r0, #1
 8003384:	428c      	cmp	r4, r1
 8003386:	d1f6      	bne.n	8003376 <memchr+0x6>
 8003388:	4618      	mov	r0, r3
 800338a:	bd10      	pop	{r4, pc}

0800338c <memcpy>:
 800338c:	b510      	push	{r4, lr}
 800338e:	1e43      	subs	r3, r0, #1
 8003390:	440a      	add	r2, r1
 8003392:	4291      	cmp	r1, r2
 8003394:	d100      	bne.n	8003398 <memcpy+0xc>
 8003396:	bd10      	pop	{r4, pc}
 8003398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800339c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033a0:	e7f7      	b.n	8003392 <memcpy+0x6>

080033a2 <memmove>:
 80033a2:	4288      	cmp	r0, r1
 80033a4:	b510      	push	{r4, lr}
 80033a6:	eb01 0302 	add.w	r3, r1, r2
 80033aa:	d807      	bhi.n	80033bc <memmove+0x1a>
 80033ac:	1e42      	subs	r2, r0, #1
 80033ae:	4299      	cmp	r1, r3
 80033b0:	d00a      	beq.n	80033c8 <memmove+0x26>
 80033b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80033ba:	e7f8      	b.n	80033ae <memmove+0xc>
 80033bc:	4283      	cmp	r3, r0
 80033be:	d9f5      	bls.n	80033ac <memmove+0xa>
 80033c0:	1881      	adds	r1, r0, r2
 80033c2:	1ad2      	subs	r2, r2, r3
 80033c4:	42d3      	cmn	r3, r2
 80033c6:	d100      	bne.n	80033ca <memmove+0x28>
 80033c8:	bd10      	pop	{r4, pc}
 80033ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80033d2:	e7f7      	b.n	80033c4 <memmove+0x22>

080033d4 <_free_r>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	4605      	mov	r5, r0
 80033d8:	2900      	cmp	r1, #0
 80033da:	d043      	beq.n	8003464 <_free_r+0x90>
 80033dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033e0:	1f0c      	subs	r4, r1, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bfb8      	it	lt
 80033e6:	18e4      	addlt	r4, r4, r3
 80033e8:	f000 f8d0 	bl	800358c <__malloc_lock>
 80033ec:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <_free_r+0x94>)
 80033ee:	6813      	ldr	r3, [r2, #0]
 80033f0:	4610      	mov	r0, r2
 80033f2:	b933      	cbnz	r3, 8003402 <_free_r+0x2e>
 80033f4:	6063      	str	r3, [r4, #4]
 80033f6:	6014      	str	r4, [r2, #0]
 80033f8:	4628      	mov	r0, r5
 80033fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033fe:	f000 b8c6 	b.w	800358e <__malloc_unlock>
 8003402:	42a3      	cmp	r3, r4
 8003404:	d90b      	bls.n	800341e <_free_r+0x4a>
 8003406:	6821      	ldr	r1, [r4, #0]
 8003408:	1862      	adds	r2, r4, r1
 800340a:	4293      	cmp	r3, r2
 800340c:	bf01      	itttt	eq
 800340e:	681a      	ldreq	r2, [r3, #0]
 8003410:	685b      	ldreq	r3, [r3, #4]
 8003412:	1852      	addeq	r2, r2, r1
 8003414:	6022      	streq	r2, [r4, #0]
 8003416:	6063      	str	r3, [r4, #4]
 8003418:	6004      	str	r4, [r0, #0]
 800341a:	e7ed      	b.n	80033f8 <_free_r+0x24>
 800341c:	4613      	mov	r3, r2
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	b10a      	cbz	r2, 8003426 <_free_r+0x52>
 8003422:	42a2      	cmp	r2, r4
 8003424:	d9fa      	bls.n	800341c <_free_r+0x48>
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	1858      	adds	r0, r3, r1
 800342a:	42a0      	cmp	r0, r4
 800342c:	d10b      	bne.n	8003446 <_free_r+0x72>
 800342e:	6820      	ldr	r0, [r4, #0]
 8003430:	4401      	add	r1, r0
 8003432:	1858      	adds	r0, r3, r1
 8003434:	4282      	cmp	r2, r0
 8003436:	6019      	str	r1, [r3, #0]
 8003438:	d1de      	bne.n	80033f8 <_free_r+0x24>
 800343a:	6810      	ldr	r0, [r2, #0]
 800343c:	6852      	ldr	r2, [r2, #4]
 800343e:	4401      	add	r1, r0
 8003440:	6019      	str	r1, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	e7d8      	b.n	80033f8 <_free_r+0x24>
 8003446:	d902      	bls.n	800344e <_free_r+0x7a>
 8003448:	230c      	movs	r3, #12
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	e7d4      	b.n	80033f8 <_free_r+0x24>
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	1821      	adds	r1, r4, r0
 8003452:	428a      	cmp	r2, r1
 8003454:	bf01      	itttt	eq
 8003456:	6811      	ldreq	r1, [r2, #0]
 8003458:	6852      	ldreq	r2, [r2, #4]
 800345a:	1809      	addeq	r1, r1, r0
 800345c:	6021      	streq	r1, [r4, #0]
 800345e:	6062      	str	r2, [r4, #4]
 8003460:	605c      	str	r4, [r3, #4]
 8003462:	e7c9      	b.n	80033f8 <_free_r+0x24>
 8003464:	bd38      	pop	{r3, r4, r5, pc}
 8003466:	bf00      	nop
 8003468:	20000090 	.word	0x20000090

0800346c <_malloc_r>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	1ccd      	adds	r5, r1, #3
 8003470:	f025 0503 	bic.w	r5, r5, #3
 8003474:	3508      	adds	r5, #8
 8003476:	2d0c      	cmp	r5, #12
 8003478:	bf38      	it	cc
 800347a:	250c      	movcc	r5, #12
 800347c:	2d00      	cmp	r5, #0
 800347e:	4606      	mov	r6, r0
 8003480:	db01      	blt.n	8003486 <_malloc_r+0x1a>
 8003482:	42a9      	cmp	r1, r5
 8003484:	d903      	bls.n	800348e <_malloc_r+0x22>
 8003486:	230c      	movs	r3, #12
 8003488:	6033      	str	r3, [r6, #0]
 800348a:	2000      	movs	r0, #0
 800348c:	bd70      	pop	{r4, r5, r6, pc}
 800348e:	f000 f87d 	bl	800358c <__malloc_lock>
 8003492:	4a21      	ldr	r2, [pc, #132]	; (8003518 <_malloc_r+0xac>)
 8003494:	6814      	ldr	r4, [r2, #0]
 8003496:	4621      	mov	r1, r4
 8003498:	b991      	cbnz	r1, 80034c0 <_malloc_r+0x54>
 800349a:	4c20      	ldr	r4, [pc, #128]	; (800351c <_malloc_r+0xb0>)
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	b91b      	cbnz	r3, 80034a8 <_malloc_r+0x3c>
 80034a0:	4630      	mov	r0, r6
 80034a2:	f000 f863 	bl	800356c <_sbrk_r>
 80034a6:	6020      	str	r0, [r4, #0]
 80034a8:	4629      	mov	r1, r5
 80034aa:	4630      	mov	r0, r6
 80034ac:	f000 f85e 	bl	800356c <_sbrk_r>
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	d124      	bne.n	80034fe <_malloc_r+0x92>
 80034b4:	230c      	movs	r3, #12
 80034b6:	4630      	mov	r0, r6
 80034b8:	6033      	str	r3, [r6, #0]
 80034ba:	f000 f868 	bl	800358e <__malloc_unlock>
 80034be:	e7e4      	b.n	800348a <_malloc_r+0x1e>
 80034c0:	680b      	ldr	r3, [r1, #0]
 80034c2:	1b5b      	subs	r3, r3, r5
 80034c4:	d418      	bmi.n	80034f8 <_malloc_r+0x8c>
 80034c6:	2b0b      	cmp	r3, #11
 80034c8:	d90f      	bls.n	80034ea <_malloc_r+0x7e>
 80034ca:	600b      	str	r3, [r1, #0]
 80034cc:	18cc      	adds	r4, r1, r3
 80034ce:	50cd      	str	r5, [r1, r3]
 80034d0:	4630      	mov	r0, r6
 80034d2:	f000 f85c 	bl	800358e <__malloc_unlock>
 80034d6:	f104 000b 	add.w	r0, r4, #11
 80034da:	1d23      	adds	r3, r4, #4
 80034dc:	f020 0007 	bic.w	r0, r0, #7
 80034e0:	1ac3      	subs	r3, r0, r3
 80034e2:	d0d3      	beq.n	800348c <_malloc_r+0x20>
 80034e4:	425a      	negs	r2, r3
 80034e6:	50e2      	str	r2, [r4, r3]
 80034e8:	e7d0      	b.n	800348c <_malloc_r+0x20>
 80034ea:	684b      	ldr	r3, [r1, #4]
 80034ec:	428c      	cmp	r4, r1
 80034ee:	bf16      	itet	ne
 80034f0:	6063      	strne	r3, [r4, #4]
 80034f2:	6013      	streq	r3, [r2, #0]
 80034f4:	460c      	movne	r4, r1
 80034f6:	e7eb      	b.n	80034d0 <_malloc_r+0x64>
 80034f8:	460c      	mov	r4, r1
 80034fa:	6849      	ldr	r1, [r1, #4]
 80034fc:	e7cc      	b.n	8003498 <_malloc_r+0x2c>
 80034fe:	1cc4      	adds	r4, r0, #3
 8003500:	f024 0403 	bic.w	r4, r4, #3
 8003504:	42a0      	cmp	r0, r4
 8003506:	d005      	beq.n	8003514 <_malloc_r+0xa8>
 8003508:	1a21      	subs	r1, r4, r0
 800350a:	4630      	mov	r0, r6
 800350c:	f000 f82e 	bl	800356c <_sbrk_r>
 8003510:	3001      	adds	r0, #1
 8003512:	d0cf      	beq.n	80034b4 <_malloc_r+0x48>
 8003514:	6025      	str	r5, [r4, #0]
 8003516:	e7db      	b.n	80034d0 <_malloc_r+0x64>
 8003518:	20000090 	.word	0x20000090
 800351c:	20000094 	.word	0x20000094

08003520 <_realloc_r>:
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003522:	4607      	mov	r7, r0
 8003524:	4614      	mov	r4, r2
 8003526:	460e      	mov	r6, r1
 8003528:	b921      	cbnz	r1, 8003534 <_realloc_r+0x14>
 800352a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800352e:	4611      	mov	r1, r2
 8003530:	f7ff bf9c 	b.w	800346c <_malloc_r>
 8003534:	b922      	cbnz	r2, 8003540 <_realloc_r+0x20>
 8003536:	f7ff ff4d 	bl	80033d4 <_free_r>
 800353a:	4625      	mov	r5, r4
 800353c:	4628      	mov	r0, r5
 800353e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003540:	f000 f826 	bl	8003590 <_malloc_usable_size_r>
 8003544:	42a0      	cmp	r0, r4
 8003546:	d20f      	bcs.n	8003568 <_realloc_r+0x48>
 8003548:	4621      	mov	r1, r4
 800354a:	4638      	mov	r0, r7
 800354c:	f7ff ff8e 	bl	800346c <_malloc_r>
 8003550:	4605      	mov	r5, r0
 8003552:	2800      	cmp	r0, #0
 8003554:	d0f2      	beq.n	800353c <_realloc_r+0x1c>
 8003556:	4631      	mov	r1, r6
 8003558:	4622      	mov	r2, r4
 800355a:	f7ff ff17 	bl	800338c <memcpy>
 800355e:	4631      	mov	r1, r6
 8003560:	4638      	mov	r0, r7
 8003562:	f7ff ff37 	bl	80033d4 <_free_r>
 8003566:	e7e9      	b.n	800353c <_realloc_r+0x1c>
 8003568:	4635      	mov	r5, r6
 800356a:	e7e7      	b.n	800353c <_realloc_r+0x1c>

0800356c <_sbrk_r>:
 800356c:	b538      	push	{r3, r4, r5, lr}
 800356e:	2300      	movs	r3, #0
 8003570:	4c05      	ldr	r4, [pc, #20]	; (8003588 <_sbrk_r+0x1c>)
 8003572:	4605      	mov	r5, r0
 8003574:	4608      	mov	r0, r1
 8003576:	6023      	str	r3, [r4, #0]
 8003578:	f7fd f9a2 	bl	80008c0 <_sbrk>
 800357c:	1c43      	adds	r3, r0, #1
 800357e:	d102      	bne.n	8003586 <_sbrk_r+0x1a>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	b103      	cbz	r3, 8003586 <_sbrk_r+0x1a>
 8003584:	602b      	str	r3, [r5, #0]
 8003586:	bd38      	pop	{r3, r4, r5, pc}
 8003588:	200001bc 	.word	0x200001bc

0800358c <__malloc_lock>:
 800358c:	4770      	bx	lr

0800358e <__malloc_unlock>:
 800358e:	4770      	bx	lr

08003590 <_malloc_usable_size_r>:
 8003590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003594:	1f18      	subs	r0, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	bfbc      	itt	lt
 800359a:	580b      	ldrlt	r3, [r1, r0]
 800359c:	18c0      	addlt	r0, r0, r3
 800359e:	4770      	bx	lr

080035a0 <_init>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	bf00      	nop
 80035a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a6:	bc08      	pop	{r3}
 80035a8:	469e      	mov	lr, r3
 80035aa:	4770      	bx	lr

080035ac <_fini>:
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ae:	bf00      	nop
 80035b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b2:	bc08      	pop	{r3}
 80035b4:	469e      	mov	lr, r3
 80035b6:	4770      	bx	lr
