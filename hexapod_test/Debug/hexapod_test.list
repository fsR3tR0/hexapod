
hexapod_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003648  08003648  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003648  08003648  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003648  08003648  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003648  08003648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  080036c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080036c0  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e32c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f7d  00000000  00000000  0002e3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  00030348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  00030d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001830e  00000000  00000000  000316c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009877  00000000  00000000  000499ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088932  00000000  00000000  00053245  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbb77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c18  00000000  00000000  000dbbf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080035b4 	.word	0x080035b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080035b4 	.word	0x080035b4

0800014c <strtoINT>:
 *  Created on: Dec 12, 2020
 *      Author: root
 */
#include "functions.h"

void strtoINT(uint32_t number, int lenght){
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	466b      	mov	r3, sp
 8000158:	461d      	mov	r5, r3
	uch string[lenght];
 800015a:	6838      	ldr	r0, [r7, #0]
 800015c:	1e43      	subs	r3, r0, #1
 800015e:	60fb      	str	r3, [r7, #12]
 8000160:	4603      	mov	r3, r0
 8000162:	4619      	mov	r1, r3
 8000164:	f04f 0200 	mov.w	r2, #0
 8000168:	f04f 0300 	mov.w	r3, #0
 800016c:	f04f 0400 	mov.w	r4, #0
 8000170:	00d4      	lsls	r4, r2, #3
 8000172:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000176:	00cb      	lsls	r3, r1, #3
 8000178:	4603      	mov	r3, r0
 800017a:	4619      	mov	r1, r3
 800017c:	f04f 0200 	mov.w	r2, #0
 8000180:	f04f 0300 	mov.w	r3, #0
 8000184:	f04f 0400 	mov.w	r4, #0
 8000188:	00d4      	lsls	r4, r2, #3
 800018a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800018e:	00cb      	lsls	r3, r1, #3
 8000190:	4603      	mov	r3, r0
 8000192:	3307      	adds	r3, #7
 8000194:	08db      	lsrs	r3, r3, #3
 8000196:	00db      	lsls	r3, r3, #3
 8000198:	ebad 0d03 	sub.w	sp, sp, r3
 800019c:	466b      	mov	r3, sp
 800019e:	3300      	adds	r3, #0
 80001a0:	60bb      	str	r3, [r7, #8]
	sprintf(string,"%d",number);
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	687a      	ldr	r2, [r7, #4]
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <strtoINT+0x74>)
 80001a8:	4618      	mov	r0, r3
 80001aa:	f002 fdf1 	bl	8002d90 <siprintf>

	LCD_string(string);
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 f883 	bl	80002bc <LCD_string>
 80001b6:	46ad      	mov	sp, r5
}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bdb0      	pop	{r4, r5, r7, pc}
 80001c0:	080035cc 	.word	0x080035cc

080001c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b088      	sub	sp, #32
 80001c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ca:	f107 0310 	add.w	r3, r7, #16
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d8:	4b35      	ldr	r3, [pc, #212]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a34      	ldr	r2, [pc, #208]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001de:	f043 0310 	orr.w	r3, r3, #16
 80001e2:	6193      	str	r3, [r2, #24]
 80001e4:	4b32      	ldr	r3, [pc, #200]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	f003 0310 	and.w	r3, r3, #16
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f0:	4b2f      	ldr	r3, [pc, #188]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a2e      	ldr	r2, [pc, #184]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001f6:	f043 0320 	orr.w	r3, r3, #32
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b2c      	ldr	r3, [pc, #176]	; (80002b0 <MX_GPIO_Init+0xec>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0320 	and.w	r3, r3, #32
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000208:	4b29      	ldr	r3, [pc, #164]	; (80002b0 <MX_GPIO_Init+0xec>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a28      	ldr	r2, [pc, #160]	; (80002b0 <MX_GPIO_Init+0xec>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b26      	ldr	r3, [pc, #152]	; (80002b0 <MX_GPIO_Init+0xec>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0304 	and.w	r3, r3, #4
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000220:	4b23      	ldr	r3, [pc, #140]	; (80002b0 <MX_GPIO_Init+0xec>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a22      	ldr	r2, [pc, #136]	; (80002b0 <MX_GPIO_Init+0xec>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6193      	str	r3, [r2, #24]
 800022c:	4b20      	ldr	r3, [pc, #128]	; (80002b0 <MX_GPIO_Init+0xec>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	f003 0308 	and.w	r3, r3, #8
 8000234:	603b      	str	r3, [r7, #0]
 8000236:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_board_GPIO_Port, led_board_Pin, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023e:	481d      	ldr	r0, [pc, #116]	; (80002b4 <MX_GPIO_Init+0xf0>)
 8000240:	f001 f9bd 	bl	80015be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DATA_7_Pin|LCD_DATA_6_Pin|LCD_DATA_5_Pin|LCD_DATA_4_Pin
 8000244:	2200      	movs	r2, #0
 8000246:	f24f 01c0 	movw	r1, #61632	; 0xf0c0
 800024a:	481b      	ldr	r0, [pc, #108]	; (80002b8 <MX_GPIO_Init+0xf4>)
 800024c:	f001 f9b7 	bl	80015be <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_board_Pin;
 8000250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000256:	2301      	movs	r3, #1
 8000258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025a:	2300      	movs	r3, #0
 800025c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800025e:	2302      	movs	r3, #2
 8000260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_board_GPIO_Port, &GPIO_InitStruct);
 8000262:	f107 0310 	add.w	r3, r7, #16
 8000266:	4619      	mov	r1, r3
 8000268:	4812      	ldr	r0, [pc, #72]	; (80002b4 <MX_GPIO_Init+0xf0>)
 800026a:	f001 f837 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = btn1_Pin|btn0_Pin;
 800026e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000274:	2300      	movs	r3, #0
 8000276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000278:	2300      	movs	r3, #0
 800027a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027c:	f107 0310 	add.w	r3, r7, #16
 8000280:	4619      	mov	r1, r3
 8000282:	480d      	ldr	r0, [pc, #52]	; (80002b8 <MX_GPIO_Init+0xf4>)
 8000284:	f001 f82a 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DATA_7_Pin|LCD_DATA_6_Pin|LCD_DATA_5_Pin|LCD_DATA_4_Pin
 8000288:	f24f 03c0 	movw	r3, #61632	; 0xf0c0
 800028c:	613b      	str	r3, [r7, #16]
                          |LCD_E_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2302      	movs	r3, #2
 8000298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_GPIO_Init+0xf4>)
 80002a2:	f001 f81b 	bl	80012dc <HAL_GPIO_Init>

}
 80002a6:	bf00      	nop
 80002a8:	3720      	adds	r7, #32
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40021000 	.word	0x40021000
 80002b4:	40011000 	.word	0x40011000
 80002b8:	40010c00 	.word	0x40010c00

080002bc <LCD_string>:
 */
//I use a LCD display with 2 row and 16 cool, with Hitachi basic
//i use it in 4 data_bit mode
#include "lcd.h"

void LCD_string(char *str){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	while(*str){
 80002c4:	e007      	b.n	80002d6 <LCD_string+0x1a>
		LCD_data(*str);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f8cc 	bl	8000468 <LCD_data>
		str++;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
	while(*str){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1f3      	bne.n	80002c6 <LCD_string+0xa>
	}
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <LCD_goto>:

void LCD_goto(u8 row, u8 col){
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b084      	sub	sp, #16
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	4603      	mov	r3, r0
 80002ee:	460a      	mov	r2, r1
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	4613      	mov	r3, r2
 80002f4:	71bb      	strb	r3, [r7, #6]
	switch(row){
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <LCD_goto+0x1c>
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d010      	beq.n	8000322 <LCD_goto+0x3c>
			for(u8 i = col; i>0; i--){
				LCD_cmd(0x14);
			}
		 break;
	}
}
 8000300:	e01f      	b.n	8000342 <LCD_goto+0x5c>
			LCD_cmd(0x80);
 8000302:	2080      	movs	r0, #128	; 0x80
 8000304:	f000 f840 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e005      	b.n	800031a <LCD_goto+0x34>
				LCD_cmd(0x14);
 800030e:	2014      	movs	r0, #20
 8000310:	f000 f83a 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000314:	7bfb      	ldrb	r3, [r7, #15]
 8000316:	3b01      	subs	r3, #1
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d1f6      	bne.n	800030e <LCD_goto+0x28>
		 break;
 8000320:	e00f      	b.n	8000342 <LCD_goto+0x5c>
			LCD_cmd(0xC0);
 8000322:	20c0      	movs	r0, #192	; 0xc0
 8000324:	f000 f830 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000328:	79bb      	ldrb	r3, [r7, #6]
 800032a:	73bb      	strb	r3, [r7, #14]
 800032c:	e005      	b.n	800033a <LCD_goto+0x54>
				LCD_cmd(0x14);
 800032e:	2014      	movs	r0, #20
 8000330:	f000 f82a 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000334:	7bbb      	ldrb	r3, [r7, #14]
 8000336:	3b01      	subs	r3, #1
 8000338:	73bb      	strb	r3, [r7, #14]
 800033a:	7bbb      	ldrb	r3, [r7, #14]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1f6      	bne.n	800032e <LCD_goto+0x48>
		 break;
 8000340:	bf00      	nop
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <LCD_enable>:

void LCD_enable(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	//need a square  signal _| |_ for LCD enable Port
	//we need a 0-1-0 signalflow, transition
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, RESET);	//make _
 8000350:	2200      	movs	r2, #0
 8000352:	2140      	movs	r1, #64	; 0x40
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <LCD_enable+0x38>)
 8000356:	f001 f932 	bl	80015be <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 800035a:	2005      	movs	r0, #5
 800035c:	f000 fe8e 	bl	800107c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, SET);	//_|
 8000360:	2201      	movs	r2, #1
 8000362:	2140      	movs	r1, #64	; 0x40
 8000364:	4807      	ldr	r0, [pc, #28]	; (8000384 <LCD_enable+0x38>)
 8000366:	f001 f92a 	bl	80015be <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 800036a:	2005      	movs	r0, #5
 800036c:	f000 fe86 	bl	800107c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, RESET);	//	|_
 8000370:	2200      	movs	r2, #0
 8000372:	2140      	movs	r1, #64	; 0x40
 8000374:	4803      	ldr	r0, [pc, #12]	; (8000384 <LCD_enable+0x38>)
 8000376:	f001 f922 	bl	80015be <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800037a:	2005      	movs	r0, #5
 800037c:	f000 fe7e 	bl	800107c <HAL_Delay>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40010c00 	.word	0x40010c00

08000388 <LCD_cmd>:

void LCD_cmd(u8 cmd){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	//we need reset RS port, why we send commands for the LCD display
		//the R/W pin is already on GNDm because we only write the display
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	4833      	ldr	r0, [pc, #204]	; (8000464 <LCD_cmd+0xdc>)
 8000398:	f001 f911 	bl	80015be <HAL_GPIO_WritePin>
	//we write the data with 2 cycle, first the upper Bits
		//we use PORT MASK just in case
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>7) & 0x01);
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	09db      	lsrs	r3, r3, #7
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a8:	482e      	ldr	r0, [pc, #184]	; (8000464 <LCD_cmd+0xdc>)
 80003aa:	f001 f908 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>6) & 0x01);
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	099b      	lsrs	r3, r3, #6
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	461a      	mov	r2, r3
 80003bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c0:	4828      	ldr	r0, [pc, #160]	; (8000464 <LCD_cmd+0xdc>)
 80003c2:	f001 f8fc 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>5) & 0x01);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	095b      	lsrs	r3, r3, #5
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	f003 0301 	and.w	r3, r3, #1
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	461a      	mov	r2, r3
 80003d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003d8:	4822      	ldr	r0, [pc, #136]	; (8000464 <LCD_cmd+0xdc>)
 80003da:	f001 f8f0 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>4) & 0x01);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	091b      	lsrs	r3, r3, #4
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	461a      	mov	r2, r3
 80003ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f0:	481c      	ldr	r0, [pc, #112]	; (8000464 <LCD_cmd+0xdc>)
 80003f2:	f001 f8e4 	bl	80015be <HAL_GPIO_WritePin>

	//we write this for LCD with LCD_enable, we send the datas
	LCD_enable();
 80003f6:	f7ff ffa9 	bl	800034c <LCD_enable>

	//now we write the four lower Bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>3) & 0x01);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	08db      	lsrs	r3, r3, #3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	f003 0301 	and.w	r3, r3, #1
 8000404:	b2db      	uxtb	r3, r3
 8000406:	461a      	mov	r2, r3
 8000408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <LCD_cmd+0xdc>)
 800040e:	f001 f8d6 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>2) & 0x01);
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	089b      	lsrs	r3, r3, #2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	b2db      	uxtb	r3, r3
 800041e:	461a      	mov	r2, r3
 8000420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000424:	480f      	ldr	r0, [pc, #60]	; (8000464 <LCD_cmd+0xdc>)
 8000426:	f001 f8ca 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>1) & 0x01);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	085b      	lsrs	r3, r3, #1
 800042e:	b2db      	uxtb	r3, r3
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	b2db      	uxtb	r3, r3
 8000436:	461a      	mov	r2, r3
 8000438:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800043c:	4809      	ldr	r0, [pc, #36]	; (8000464 <LCD_cmd+0xdc>)
 800043e:	f001 f8be 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>0) & 0x01);		//here truly we don`t need the MASK,just in case
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	b2db      	uxtb	r3, r3
 800044a:	461a      	mov	r2, r3
 800044c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <LCD_cmd+0xdc>)
 8000452:	f001 f8b4 	bl	80015be <HAL_GPIO_WritePin>

	//again write for LCD
	LCD_enable();
 8000456:	f7ff ff79 	bl	800034c <LCD_enable>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40010c00 	.word	0x40010c00

08000468 <LCD_data>:

void LCD_data(u8 data){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
	//we set the RS Pin, because we send now data
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,SET);
 8000472:	2201      	movs	r2, #1
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	4833      	ldr	r0, [pc, #204]	; (8000544 <LCD_data+0xdc>)
 8000478:	f001 f8a1 	bl	80015be <HAL_GPIO_WritePin>
	//send data again with 2 cycles
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>7) & 0x01);
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	09db      	lsrs	r3, r3, #7
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000488:	482e      	ldr	r0, [pc, #184]	; (8000544 <LCD_data+0xdc>)
 800048a:	f001 f898 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>6) & 0x01);
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	099b      	lsrs	r3, r3, #6
 8000492:	b2db      	uxtb	r3, r3
 8000494:	f003 0301 	and.w	r3, r3, #1
 8000498:	b2db      	uxtb	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a0:	4828      	ldr	r0, [pc, #160]	; (8000544 <LCD_data+0xdc>)
 80004a2:	f001 f88c 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>5) & 0x01);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	095b      	lsrs	r3, r3, #5
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	461a      	mov	r2, r3
 80004b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004b8:	4822      	ldr	r0, [pc, #136]	; (8000544 <LCD_data+0xdc>)
 80004ba:	f001 f880 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>4) & 0x01);
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	f003 0301 	and.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	461a      	mov	r2, r3
 80004cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d0:	481c      	ldr	r0, [pc, #112]	; (8000544 <LCD_data+0xdc>)
 80004d2:	f001 f874 	bl	80015be <HAL_GPIO_WritePin>
	//we send the data for display
	LCD_enable();
 80004d6:	f7ff ff39 	bl	800034c <LCD_enable>

	//now we send the low 4 bits
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>3) & 0x01);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	08db      	lsrs	r3, r3, #3
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	461a      	mov	r2, r3
 80004e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ec:	4815      	ldr	r0, [pc, #84]	; (8000544 <LCD_data+0xdc>)
 80004ee:	f001 f866 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>2) & 0x01);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	089b      	lsrs	r3, r3, #2
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000504:	480f      	ldr	r0, [pc, #60]	; (8000544 <LCD_data+0xdc>)
 8000506:	f001 f85a 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>1) & 0x01);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	085b      	lsrs	r3, r3, #1
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	461a      	mov	r2, r3
 8000518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <LCD_data+0xdc>)
 800051e:	f001 f84e 	bl	80015be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>0) & 0x01);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	461a      	mov	r2, r3
 800052c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <LCD_data+0xdc>)
 8000532:	f001 f844 	bl	80015be <HAL_GPIO_WritePin>

	LCD_enable();
 8000536:	f7ff ff09 	bl	800034c <LCD_enable>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40010c00 	.word	0x40010c00

08000548 <LCD_init>:

void LCD_init(bool curzor, bool blink){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	460a      	mov	r2, r1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	4613      	mov	r3, r2
 8000556:	71bb      	strb	r3, [r7, #6]
	//we before init
	HAL_Delay(15);
 8000558:	200f      	movs	r0, #15
 800055a:	f000 fd8f 	bl	800107c <HAL_Delay>
	//we use it in 4bit mode with 2 row - 5*8 pixel
	LCD_cmd(0x20);
 800055e:	2020      	movs	r0, #32
 8000560:	f7ff ff12 	bl	8000388 <LCD_cmd>

	//just in case we send for Enable PORT 3 cycle
	LCD_enable();
 8000564:	f7ff fef2 	bl	800034c <LCD_enable>
	LCD_enable();
 8000568:	f7ff fef0 	bl	800034c <LCD_enable>
	LCD_enable();
 800056c:	f7ff feee 	bl	800034c <LCD_enable>

	//this hexacodes is from datasheet (LCD 1602, with hitachi base)
	LCD_cmd(0x28);		//set the mode 3 time
 8000570:	2028      	movs	r0, #40	; 0x28
 8000572:	f7ff ff09 	bl	8000388 <LCD_cmd>
	LCD_cmd(0x28);		//we don`t know before the init function wich one mode is the display
 8000576:	2028      	movs	r0, #40	; 0x28
 8000578:	f7ff ff06 	bl	8000388 <LCD_cmd>
	LCD_cmd(0x28);		//when we set the mode only 2 times, the display cant work well
 800057c:	2028      	movs	r0, #40	; 0x28
 800057e:	f7ff ff03 	bl	8000388 <LCD_cmd>

	LCD_cmd(0x01);			//lcd clear
 8000582:	2001      	movs	r0, #1
 8000584:	f7ff ff00 	bl	8000388 <LCD_cmd>
	LCD_cmd(0x02);			//send the curzor to 0.row 0.cool
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff fefd 	bl	8000388 <LCD_cmd>
	//set the curzor blink and the curzor visibility
	LCD_cmd(0x08 | (1<<LCD_E) | (curzor<<LCD_curzor) | (blink<<LCD_blink));
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	b25b      	sxtb	r3, r3
 8000594:	f043 030c 	orr.w	r3, r3, #12
 8000598:	b25a      	sxtb	r2, r3
 800059a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800059e:	4313      	orrs	r3, r2
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff feef 	bl	8000388 <LCD_cmd>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <LCD_test>:

void LCD_test(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	LCD_goto(0,0);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff fe93 	bl	80002e6 <LCD_goto>
	LCD_string("TEST++++++++TEST");
 80005c0:	4809      	ldr	r0, [pc, #36]	; (80005e8 <LCD_test+0x34>)
 80005c2:	f7ff fe7b 	bl	80002bc <LCD_string>
	LCD_goto(1,0);
 80005c6:	2100      	movs	r1, #0
 80005c8:	2001      	movs	r0, #1
 80005ca:	f7ff fe8c 	bl	80002e6 <LCD_goto>
	LCD_string("TEST++++++++TEST");
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <LCD_test+0x34>)
 80005d0:	f7ff fe74 	bl	80002bc <LCD_string>
	HAL_Delay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f000 fd50 	bl	800107c <HAL_Delay>
	LCD_cmd(CLEAR);
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff fed3 	bl	8000388 <LCD_cmd>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	080035d0 	.word	0x080035d0

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uch buffer[] = "";
 80005f2:	2300      	movs	r3, #0
 80005f4:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fcdf 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f887 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f7ff fde1 	bl	80001c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000602:	f000 fa4b 	bl	8000a9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000606:	f000 fad5 	bl	8000bb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800060a:	f000 fb6b 	bl	8000ce4 <MX_TIM4_Init>
  MX_TIM1_Init();
 800060e:	f000 f99d 	bl	800094c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000612:	4837      	ldr	r0, [pc, #220]	; (80006f0 <main+0x104>)
 8000614:	f001 fc3e 	bl	8001e94 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000618:	2104      	movs	r1, #4
 800061a:	4836      	ldr	r0, [pc, #216]	; (80006f4 <main+0x108>)
 800061c:	f001 fcdc 	bl	8001fd8 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000620:	2104      	movs	r1, #4
 8000622:	4835      	ldr	r0, [pc, #212]	; (80006f8 <main+0x10c>)
 8000624:	f001 fcd8 	bl	8001fd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000628:	2108      	movs	r1, #8
 800062a:	4833      	ldr	r0, [pc, #204]	; (80006f8 <main+0x10c>)
 800062c:	f001 fcd4 	bl	8001fd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000630:	210c      	movs	r1, #12
 8000632:	4831      	ldr	r0, [pc, #196]	; (80006f8 <main+0x10c>)
 8000634:	f001 fcd0 	bl	8001fd8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000638:	2100      	movs	r1, #0
 800063a:	4830      	ldr	r0, [pc, #192]	; (80006fc <main+0x110>)
 800063c:	f001 fccc 	bl	8001fd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000640:	2104      	movs	r1, #4
 8000642:	482e      	ldr	r0, [pc, #184]	; (80006fc <main+0x110>)
 8000644:	f001 fcc8 	bl	8001fd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000648:	2108      	movs	r1, #8
 800064a:	482c      	ldr	r0, [pc, #176]	; (80006fc <main+0x110>)
 800064c:	f001 fcc4 	bl	8001fd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000650:	210c      	movs	r1, #12
 8000652:	482a      	ldr	r0, [pc, #168]	; (80006fc <main+0x110>)
 8000654:	f001 fcc0 	bl	8001fd8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LCD_init(1,1);
 8000658:	2101      	movs	r1, #1
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff ff74 	bl	8000548 <LCD_init>
  LCD_test();
 8000660:	f7ff ffa8 	bl	80005b4 <LCD_test>
  HAL_Delay(1000);
  htim3.Instance -> CCR2 = 75;
  HAL_Delay(1000);
  htim3.Instance -> CCR2 = 125;
*/
  htim3.Instance -> CCR3 = 25;
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <main+0x110>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2219      	movs	r2, #25
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c

  while (1)
  {
	LCD_goto(0,0);
 800066c:	2100      	movs	r1, #0
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff fe39 	bl	80002e6 <LCD_goto>
	LCD_string("Pozi: ");
 8000674:	4822      	ldr	r0, [pc, #136]	; (8000700 <main+0x114>)
 8000676:	f7ff fe21 	bl	80002bc <LCD_string>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(led_board_GPIO_Port, led_board_Pin);
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4821      	ldr	r0, [pc, #132]	; (8000704 <main+0x118>)
 8000680:	f000 ffb5 	bl	80015ee <HAL_GPIO_TogglePin>
	  for(u8 i = 25; i <= 125; i+= 25){
 8000684:	2319      	movs	r3, #25
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	e02e      	b.n	80006e8 <main+0xfc>
		  LCD_goto(1,1);
 800068a:	2101      	movs	r1, #1
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff fe2a 	bl	80002e6 <LCD_goto>
		  strtoINT(i, sizeof(i));
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2101      	movs	r1, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fd58 	bl	800014c <strtoINT>
		  LCD_string("   ");
 800069c:	481a      	ldr	r0, [pc, #104]	; (8000708 <main+0x11c>)
 800069e:	f7ff fe0d 	bl	80002bc <LCD_string>
		  //htim1.Instance -> CCR1 = i;
		  htim1.Instance -> CCR2 = i;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <main+0x108>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	79fa      	ldrb	r2, [r7, #7]
 80006a8:	639a      	str	r2, [r3, #56]	; 0x38
		  htim2.Instance -> CCR2 = i;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <main+0x10c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	639a      	str	r2, [r3, #56]	; 0x38
		  htim2.Instance -> CCR3 = i;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <main+0x10c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	79fa      	ldrb	r2, [r7, #7]
 80006b8:	63da      	str	r2, [r3, #60]	; 0x3c
		  htim2.Instance -> CCR4 = i;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <main+0x10c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	641a      	str	r2, [r3, #64]	; 0x40
		  htim3.Instance -> CCR1 = i;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <main+0x110>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
		  htim3.Instance -> CCR2 = i;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <main+0x110>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	639a      	str	r2, [r3, #56]	; 0x38
		  //htim3.Instance -> CCR3 = i;
		  htim3.Instance -> CCR4 = i;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <main+0x110>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(2000);
 80006da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006de:	f000 fccd 	bl	800107c <HAL_Delay>
	  for(u8 i = 25; i <= 125; i+= 25){
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	3319      	adds	r3, #25
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b7d      	cmp	r3, #125	; 0x7d
 80006ec:	d9cd      	bls.n	800068a <main+0x9e>
	LCD_goto(0,0);
 80006ee:	e7bd      	b.n	800066c <main+0x80>
 80006f0:	20000098 	.word	0x20000098
 80006f4:	20000128 	.word	0x20000128
 80006f8:	20000170 	.word	0x20000170
 80006fc:	200000e0 	.word	0x200000e0
 8000700:	080035e4 	.word	0x080035e4
 8000704:	40011000 	.word	0x40011000
 8000708:	080035ec 	.word	0x080035ec

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b090      	sub	sp, #64	; 0x40
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	2228      	movs	r2, #40	; 0x28
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fb30 	bl	8002d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072e:	2302      	movs	r3, #2
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000732:	2301      	movs	r3, #1
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000736:	2310      	movs	r3, #16
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800073e:	2300      	movs	r3, #0
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000742:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0318 	add.w	r3, r7, #24
 800074c:	4618      	mov	r0, r3
 800074e:	f000 ff67 	bl	8001620 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000758:	f000 f854 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f001 f9d3 	bl	8001b20 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000780:	f000 f840 	bl	8000804 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3740      	adds	r7, #64	; 0x40
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM4){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d128      	bne.n	80007f0 <HAL_TIM_PeriodElapsedCallback+0x64>
		if(HAL_GPIO_ReadPin(btn0_GPIO_Port, btn0_Pin) == 1 && htim3.Instance -> CCR3 < 125){
 800079e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a2:	4816      	ldr	r0, [pc, #88]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80007a4:	f000 fef4 	bl	8001590 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d10c      	bne.n	80007c8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007b4:	2b7c      	cmp	r3, #124	; 0x7c
 80007b6:	d807      	bhi.n	80007c8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			htim3.Instance -> CCR3 += 5;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3205      	adds	r2, #5
 80007c4:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance -> CCR3 -= 5;
		}/*else{
			htim3.Instance -> CCR3 = 25;
		}*/
	}
}
 80007c6:	e013      	b.n	80007f0 <HAL_TIM_PeriodElapsedCallback+0x64>
		}else if(HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == 1 && htim3.Instance -> CCR3 > 25){
 80007c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80007ce:	f000 fedf 	bl	8001590 <HAL_GPIO_ReadPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d10b      	bne.n	80007f0 <HAL_TIM_PeriodElapsedCallback+0x64>
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007de:	2b19      	cmp	r3, #25
 80007e0:	d906      	bls.n	80007f0 <HAL_TIM_PeriodElapsedCallback+0x64>
			htim3.Instance -> CCR3 -= 5;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3a05      	subs	r2, #5
 80007ee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40000800 	.word	0x40000800
 80007fc:	40010c00 	.word	0x40010c00
 8000800:	200000e0 	.word	0x200000e0

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080a:	e7fe      	b.n	800080a <Error_Handler+0x6>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_MspInit+0x5c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <HAL_MspInit+0x5c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_MspInit+0x5c>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x5c>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x5c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x5c>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_MspInit+0x60>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_MspInit+0x60>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000
 800086c:	40010000 	.word	0x40010000

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b6:	f000 fbc5 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM4_IRQHandler+0x10>)
 80008c6:	f001 fc29 	bl	800211c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000098 	.word	0x20000098

080008d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <_sbrk+0x5c>)
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <_sbrk+0x60>)
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <_sbrk+0x64>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <_sbrk+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	429a      	cmp	r2, r3
 8000902:	d207      	bcs.n	8000914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000904:	f002 fa12 	bl	8002d2c <__errno>
 8000908:	4602      	mov	r2, r0
 800090a:	230c      	movs	r3, #12
 800090c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000912:	e009      	b.n	8000928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <_sbrk+0x64>)
 8000924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20005000 	.word	0x20005000
 8000934:	00000400 	.word	0x00000400
 8000938:	2000008c 	.word	0x2000008c
 800093c:	200001c0 	.word	0x200001c0

08000940 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b092      	sub	sp, #72	; 0x48
 8000950:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2220      	movs	r2, #32
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fa02 	bl	8002d80 <memset>

  htim1.Instance = TIM1;
 800097c:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <MX_TIM1_Init+0x148>)
 800097e:	4a46      	ldr	r2, [pc, #280]	; (8000a98 <MX_TIM1_Init+0x14c>)
 8000980:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 319;
 8000982:	4b44      	ldr	r3, [pc, #272]	; (8000a94 <MX_TIM1_Init+0x148>)
 8000984:	f240 123f 	movw	r2, #319	; 0x13f
 8000988:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <MX_TIM1_Init+0x148>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000990:	4b40      	ldr	r3, [pc, #256]	; (8000a94 <MX_TIM1_Init+0x148>)
 8000992:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000996:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <MX_TIM1_Init+0x148>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800099e:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <MX_TIM1_Init+0x148>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <MX_TIM1_Init+0x148>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009aa:	483a      	ldr	r0, [pc, #232]	; (8000a94 <MX_TIM1_Init+0x148>)
 80009ac:	f001 fac4 	bl	8001f38 <HAL_TIM_PWM_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f7ff ff25 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009c6:	4619      	mov	r1, r3
 80009c8:	4832      	ldr	r0, [pc, #200]	; (8000a94 <MX_TIM1_Init+0x148>)
 80009ca:	f002 f8ed 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f7ff ff16 	bl	8000804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d8:	2360      	movs	r3, #96	; 0x60
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4825      	ldr	r0, [pc, #148]	; (8000a94 <MX_TIM1_Init+0x148>)
 80009fe:	f001 fc95 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000a08:	f7ff fefc 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	2204      	movs	r2, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	481f      	ldr	r0, [pc, #124]	; (8000a94 <MX_TIM1_Init+0x148>)
 8000a16:	f001 fc89 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000a20:	f7ff fef0 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	2208      	movs	r2, #8
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4819      	ldr	r0, [pc, #100]	; (8000a94 <MX_TIM1_Init+0x148>)
 8000a2e:	f001 fc7d 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000a38:	f7ff fee4 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	220c      	movs	r2, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	4813      	ldr	r0, [pc, #76]	; (8000a94 <MX_TIM1_Init+0x148>)
 8000a46:	f001 fc71 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000a50:	f7ff fed8 	bl	8000804 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4619      	mov	r1, r3
 8000a76:	4807      	ldr	r0, [pc, #28]	; (8000a94 <MX_TIM1_Init+0x148>)
 8000a78:	f002 f8f4 	bl	8002c64 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000a82:	f7ff febf 	bl	8000804 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000a86:	4803      	ldr	r0, [pc, #12]	; (8000a94 <MX_TIM1_Init+0x148>)
 8000a88:	f000 f9e4 	bl	8000e54 <HAL_TIM_MspPostInit>

}
 8000a8c:	bf00      	nop
 8000a8e:	3748      	adds	r7, #72	; 0x48
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000128 	.word	0x20000128
 8000a98:	40012c00 	.word	0x40012c00

08000a9c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
 8000aa0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]
 8000aca:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000acc:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 8000ad4:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000ad6:	f240 123f 	movw	r2, #319	; 0x13f
 8000ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ae2:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000ae4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000af6:	482e      	ldr	r0, [pc, #184]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000af8:	f001 f97c 	bl	8001df4 <HAL_TIM_Base_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b02:	f7ff fe7f 	bl	8000804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4827      	ldr	r0, [pc, #156]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000b14:	f001 fcc8 	bl	80024a8 <HAL_TIM_ConfigClockSource>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b1e:	f7ff fe71 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b22:	4823      	ldr	r0, [pc, #140]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000b24:	f001 fa08 	bl	8001f38 <HAL_TIM_PWM_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b2e:	f7ff fe69 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	4619      	mov	r1, r3
 8000b40:	481b      	ldr	r0, [pc, #108]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000b42:	f002 f831 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b4c:	f7ff fe5a 	bl	8000804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b50:	2360      	movs	r3, #96	; 0x60
 8000b52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2204      	movs	r2, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000b68:	f001 fbe0 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b72:	f7ff fe47 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2208      	movs	r2, #8
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000b7e:	f001 fbd5 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b88:	f7ff fe3c 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	220c      	movs	r2, #12
 8000b90:	4619      	mov	r1, r3
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000b94:	f001 fbca 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000b9e:	f7ff fe31 	bl	8000804 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000ba2:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <MX_TIM2_Init+0x114>)
 8000ba4:	f000 f956 	bl	8000e54 <HAL_TIM_MspPostInit>

}
 8000ba8:	bf00      	nop
 8000baa:	3738      	adds	r7, #56	; 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000170 	.word	0x20000170

08000bb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
 8000be0:	615a      	str	r2, [r3, #20]
 8000be2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000be4:	4b3d      	ldr	r3, [pc, #244]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000be6:	4a3e      	ldr	r2, [pc, #248]	; (8000ce0 <MX_TIM3_Init+0x12c>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000bea:	4b3c      	ldr	r3, [pc, #240]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000bec:	f240 123f 	movw	r2, #319	; 0x13f
 8000bf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b3a      	ldr	r3, [pc, #232]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bf8:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000bfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c0c:	4833      	ldr	r0, [pc, #204]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000c0e:	f001 f8f1 	bl	8001df4 <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c18:	f7ff fdf4 	bl	8000804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c26:	4619      	mov	r1, r3
 8000c28:	482c      	ldr	r0, [pc, #176]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000c2a:	f001 fc3d 	bl	80024a8 <HAL_TIM_ConfigClockSource>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c34:	f7ff fde6 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c38:	4828      	ldr	r0, [pc, #160]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000c3a:	f001 f97d 	bl	8001f38 <HAL_TIM_PWM_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c44:	f7ff fdde 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c50:	f107 0320 	add.w	r3, r7, #32
 8000c54:	4619      	mov	r1, r3
 8000c56:	4821      	ldr	r0, [pc, #132]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000c58:	f001 ffa6 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c62:	f7ff fdcf 	bl	8000804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c66:	2360      	movs	r3, #96	; 0x60
 8000c68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4817      	ldr	r0, [pc, #92]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000c7e:	f001 fb55 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c88:	f7ff fdbc 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2204      	movs	r2, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	4812      	ldr	r0, [pc, #72]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000c94:	f001 fb4a 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c9e:	f7ff fdb1 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2208      	movs	r2, #8
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000caa:	f001 fb3f 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000cb4:	f7ff fda6 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	220c      	movs	r2, #12
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000cc0:	f001 fb34 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000cca:	f7ff fd9b 	bl	8000804 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000cce:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM3_Init+0x128>)
 8000cd0:	f000 f8c0 	bl	8000e54 <HAL_TIM_MspPostInit>

}
 8000cd4:	bf00      	nop
 8000cd6:	3738      	adds	r7, #56	; 0x38
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000e0 	.word	0x200000e0
 8000ce0:	40000400 	.word	0x40000400

08000ce4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_TIM4_Init+0x94>)
 8000d02:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <MX_TIM4_Init+0x98>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39999;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_TIM4_Init+0x94>)
 8000d08:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000d0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_TIM4_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_TIM4_Init+0x94>)
 8000d16:	f240 128f 	movw	r2, #399	; 0x18f
 8000d1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_TIM4_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM4_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_TIM4_Init+0x94>)
 8000d2a:	f001 f863 	bl	8001df4 <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d34:	f7ff fd66 	bl	8000804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <MX_TIM4_Init+0x94>)
 8000d46:	f001 fbaf 	bl	80024a8 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000d50:	f7ff fd58 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_TIM4_Init+0x94>)
 8000d62:	f001 ff21 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f7ff fd4a 	bl	8000804 <Error_Handler>
  }

}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000098 	.word	0x20000098
 8000d7c:	40000800 	.word	0x40000800

08000d80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <HAL_TIM_PWM_MspInit+0x34>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d10b      	bne.n	8000daa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_TIM_PWM_MspInit+0x38>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_TIM_PWM_MspInit+0x38>)
 8000d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d9c:	6193      	str	r3, [r2, #24]
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_TIM_PWM_MspInit+0x38>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	40012c00 	.word	0x40012c00
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d10c      	bne.n	8000de8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <HAL_TIM_Base_MspInit+0x8c>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a1d      	ldr	r2, [pc, #116]	; (8000e48 <HAL_TIM_Base_MspInit+0x8c>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <HAL_TIM_Base_MspInit+0x8c>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000de6:	e02a      	b.n	8000e3e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_TIM_Base_MspInit+0x90>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10c      	bne.n	8000e0c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_TIM_Base_MspInit+0x8c>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <HAL_TIM_Base_MspInit+0x8c>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_TIM_Base_MspInit+0x8c>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
}
 8000e0a:	e018      	b.n	8000e3e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_TIM_Base_MspInit+0x94>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d113      	bne.n	8000e3e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_TIM_Base_MspInit+0x8c>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <HAL_TIM_Base_MspInit+0x8c>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	61d3      	str	r3, [r2, #28]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_TIM_Base_MspInit+0x8c>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	201e      	movs	r0, #30
 8000e34:	f000 fa1b 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e38:	201e      	movs	r0, #30
 8000e3a:	f000 fa34 	bl	80012a6 <HAL_NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40000400 	.word	0x40000400
 8000e50:	40000800 	.word	0x40000800

08000e54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a3a      	ldr	r2, [pc, #232]	; (8000f58 <HAL_TIM_MspPostInit+0x104>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d119      	bne.n	8000ea8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a38      	ldr	r2, [pc, #224]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000e8c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2302      	movs	r3, #2
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	482f      	ldr	r0, [pc, #188]	; (8000f60 <HAL_TIM_MspPostInit+0x10c>)
 8000ea2:	f000 fa1b 	bl	80012dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ea6:	e052      	b.n	8000f4e <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb0:	d118      	bne.n	8000ee4 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000eca:	230e      	movs	r3, #14
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	4619      	mov	r1, r3
 8000edc:	4820      	ldr	r0, [pc, #128]	; (8000f60 <HAL_TIM_MspPostInit+0x10c>)
 8000ede:	f000 f9fd 	bl	80012dc <HAL_GPIO_Init>
}
 8000ee2:	e034      	b.n	8000f4e <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM3)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_TIM_MspPostInit+0x110>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d12f      	bne.n	8000f4e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a1a      	ldr	r2, [pc, #104]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6193      	str	r3, [r2, #24]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	6193      	str	r3, [r2, #24]
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_TIM_MspPostInit+0x108>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f1e:	23c0      	movs	r3, #192	; 0xc0
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2302      	movs	r3, #2
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480b      	ldr	r0, [pc, #44]	; (8000f60 <HAL_TIM_MspPostInit+0x10c>)
 8000f32:	f000 f9d3 	bl	80012dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f36:	2303      	movs	r3, #3
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	4619      	mov	r1, r3
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <HAL_TIM_MspPostInit+0x114>)
 8000f4a:	f000 f9c7 	bl	80012dc <HAL_GPIO_Init>
}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40012c00 	.word	0x40012c00
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010800 	.word	0x40010800
 8000f64:	40000400 	.word	0x40000400
 8000f68:	40010c00 	.word	0x40010c00

08000f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f6e:	e003      	b.n	8000f78 <LoopCopyDataInit>

08000f70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f76:	3104      	adds	r1, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f80:	d3f6      	bcc.n	8000f70 <CopyDataInit>
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f84:	e002      	b.n	8000f8c <LoopFillZerobss>

08000f86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f88:	f842 3b04 	str.w	r3, [r2], #4

08000f8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f90:	d3f9      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f92:	f7ff fcd5 	bl	8000940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f001 fecf 	bl	8002d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9a:	f7ff fb27 	bl	80005ec <main>
  bx lr
 8000f9e:	4770      	bx	lr
  ldr r3, =_sidata
 8000fa0:	08003650 	.word	0x08003650
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fa8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000fac:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000fb0:	200001c0 	.word	0x200001c0

08000fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_2_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x28>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x28>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f945 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fc1a 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f95d 	bl	80012c2 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001020:	f000 f925 	bl	800126e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x1c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x20>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_IncTick+0x20>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	20000008 	.word	0x20000008
 8001064:	200001b8 	.word	0x200001b8

08001068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b02      	ldr	r3, [pc, #8]	; (8001078 <HAL_GetTick+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	200001b8 	.word	0x200001b8

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff fff0 	bl	8001068 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffe0 	bl	8001068 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000008 	.word	0x20000008

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4906      	ldr	r1, [pc, #24]	; (8001158 <__NVIC_EnableIRQ+0x34>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001238:	f7ff ff90 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff2d 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff42 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff90 	bl	80011b0 <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5f 	bl	800115c <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff35 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa2 	bl	8001214 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b08b      	sub	sp, #44	; 0x2c
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e127      	b.n	8001540 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012f0:	2201      	movs	r2, #1
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 8116 	bne.w	800153a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b12      	cmp	r3, #18
 8001314:	d034      	beq.n	8001380 <HAL_GPIO_Init+0xa4>
 8001316:	2b12      	cmp	r3, #18
 8001318:	d80d      	bhi.n	8001336 <HAL_GPIO_Init+0x5a>
 800131a:	2b02      	cmp	r3, #2
 800131c:	d02b      	beq.n	8001376 <HAL_GPIO_Init+0x9a>
 800131e:	2b02      	cmp	r3, #2
 8001320:	d804      	bhi.n	800132c <HAL_GPIO_Init+0x50>
 8001322:	2b00      	cmp	r3, #0
 8001324:	d031      	beq.n	800138a <HAL_GPIO_Init+0xae>
 8001326:	2b01      	cmp	r3, #1
 8001328:	d01c      	beq.n	8001364 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800132a:	e048      	b.n	80013be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800132c:	2b03      	cmp	r3, #3
 800132e:	d043      	beq.n	80013b8 <HAL_GPIO_Init+0xdc>
 8001330:	2b11      	cmp	r3, #17
 8001332:	d01b      	beq.n	800136c <HAL_GPIO_Init+0x90>
          break;
 8001334:	e043      	b.n	80013be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001336:	4a89      	ldr	r2, [pc, #548]	; (800155c <HAL_GPIO_Init+0x280>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d026      	beq.n	800138a <HAL_GPIO_Init+0xae>
 800133c:	4a87      	ldr	r2, [pc, #540]	; (800155c <HAL_GPIO_Init+0x280>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d806      	bhi.n	8001350 <HAL_GPIO_Init+0x74>
 8001342:	4a87      	ldr	r2, [pc, #540]	; (8001560 <HAL_GPIO_Init+0x284>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d020      	beq.n	800138a <HAL_GPIO_Init+0xae>
 8001348:	4a86      	ldr	r2, [pc, #536]	; (8001564 <HAL_GPIO_Init+0x288>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01d      	beq.n	800138a <HAL_GPIO_Init+0xae>
          break;
 800134e:	e036      	b.n	80013be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001350:	4a85      	ldr	r2, [pc, #532]	; (8001568 <HAL_GPIO_Init+0x28c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0xae>
 8001356:	4a85      	ldr	r2, [pc, #532]	; (800156c <HAL_GPIO_Init+0x290>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d016      	beq.n	800138a <HAL_GPIO_Init+0xae>
 800135c:	4a84      	ldr	r2, [pc, #528]	; (8001570 <HAL_GPIO_Init+0x294>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0xae>
          break;
 8001362:	e02c      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e028      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	3304      	adds	r3, #4
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e023      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	3308      	adds	r3, #8
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e01e      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	330c      	adds	r3, #12
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	e019      	b.n	80013be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001392:	2304      	movs	r3, #4
 8001394:	623b      	str	r3, [r7, #32]
          break;
 8001396:	e012      	b.n	80013be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d105      	bne.n	80013ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a0:	2308      	movs	r3, #8
 80013a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	611a      	str	r2, [r3, #16]
          break;
 80013aa:	e008      	b.n	80013be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ac:	2308      	movs	r3, #8
 80013ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	615a      	str	r2, [r3, #20]
          break;
 80013b6:	e002      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
          break;
 80013bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2bff      	cmp	r3, #255	; 0xff
 80013c2:	d801      	bhi.n	80013c8 <HAL_GPIO_Init+0xec>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	e001      	b.n	80013cc <HAL_GPIO_Init+0xf0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3304      	adds	r3, #4
 80013cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2bff      	cmp	r3, #255	; 0xff
 80013d2:	d802      	bhi.n	80013da <HAL_GPIO_Init+0xfe>
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x104>
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	3b08      	subs	r3, #8
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	210f      	movs	r1, #15
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	401a      	ands	r2, r3
 80013f2:	6a39      	ldr	r1, [r7, #32]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	431a      	orrs	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 8096 	beq.w	800153a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800140e:	4b59      	ldr	r3, [pc, #356]	; (8001574 <HAL_GPIO_Init+0x298>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a58      	ldr	r2, [pc, #352]	; (8001574 <HAL_GPIO_Init+0x298>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b56      	ldr	r3, [pc, #344]	; (8001574 <HAL_GPIO_Init+0x298>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001426:	4a54      	ldr	r2, [pc, #336]	; (8001578 <HAL_GPIO_Init+0x29c>)
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_GPIO_Init+0x2a0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0x19e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x2a4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00d      	beq.n	8001476 <HAL_GPIO_Init+0x19a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a49      	ldr	r2, [pc, #292]	; (8001584 <HAL_GPIO_Init+0x2a8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x196>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a48      	ldr	r2, [pc, #288]	; (8001588 <HAL_GPIO_Init+0x2ac>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_GPIO_Init+0x192>
 800146a:	2303      	movs	r3, #3
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x1a0>
 800146e:	2304      	movs	r3, #4
 8001470:	e004      	b.n	800147c <HAL_GPIO_Init+0x1a0>
 8001472:	2302      	movs	r3, #2
 8001474:	e002      	b.n	800147c <HAL_GPIO_Init+0x1a0>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x1a0>
 800147a:	2300      	movs	r3, #0
 800147c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4093      	lsls	r3, r2
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800148c:	493a      	ldr	r1, [pc, #232]	; (8001578 <HAL_GPIO_Init+0x29c>)
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4938      	ldr	r1, [pc, #224]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
 80014b2:	e006      	b.n	80014c2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	4933      	ldr	r1, [pc, #204]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014be:	4013      	ands	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ce:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	492e      	ldr	r1, [pc, #184]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
 80014da:	e006      	b.n	80014ea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	4929      	ldr	r1, [pc, #164]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	4924      	ldr	r1, [pc, #144]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
 8001502:	e006      	b.n	8001512 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_GPIO_Init+0x2b0>)
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	43db      	mvns	r3, r3
 800150c:	491f      	ldr	r1, [pc, #124]	; (800158c <HAL_GPIO_Init+0x2b0>)
 800150e:	4013      	ands	r3, r2
 8001510:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_GPIO_Init+0x2b0>)
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	491a      	ldr	r1, [pc, #104]	; (800158c <HAL_GPIO_Init+0x2b0>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	60cb      	str	r3, [r1, #12]
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_GPIO_Init+0x2b0>)
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	43db      	mvns	r3, r3
 8001534:	4915      	ldr	r1, [pc, #84]	; (800158c <HAL_GPIO_Init+0x2b0>)
 8001536:	4013      	ands	r3, r2
 8001538:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	3301      	adds	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	fa22 f303 	lsr.w	r3, r2, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	f47f aed0 	bne.w	80012f0 <HAL_GPIO_Init+0x14>
  }
}
 8001550:	bf00      	nop
 8001552:	372c      	adds	r7, #44	; 0x2c
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	10210000 	.word	0x10210000
 8001560:	10110000 	.word	0x10110000
 8001564:	10120000 	.word	0x10120000
 8001568:	10310000 	.word	0x10310000
 800156c:	10320000 	.word	0x10320000
 8001570:	10220000 	.word	0x10220000
 8001574:	40021000 	.word	0x40021000
 8001578:	40010000 	.word	0x40010000
 800157c:	40010800 	.word	0x40010800
 8001580:	40010c00 	.word	0x40010c00
 8001584:	40011000 	.word	0x40011000
 8001588:	40011400 	.word	0x40011400
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e001      	b.n	80015b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	807b      	strh	r3, [r7, #2]
 80015ca:	4613      	mov	r3, r2
 80015cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ce:	787b      	ldrb	r3, [r7, #1]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015da:	e003      	b.n	80015e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	041a      	lsls	r2, r3, #16
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	611a      	str	r2, [r3, #16]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001600:	887a      	ldrh	r2, [r7, #2]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	041a      	lsls	r2, r3, #16
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43d9      	mvns	r1, r3
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	400b      	ands	r3, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	611a      	str	r2, [r3, #16]
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e26c      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8087 	beq.w	800174e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001640:	4b92      	ldr	r3, [pc, #584]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b04      	cmp	r3, #4
 800164a:	d00c      	beq.n	8001666 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800164c:	4b8f      	ldr	r3, [pc, #572]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b08      	cmp	r3, #8
 8001656:	d112      	bne.n	800167e <HAL_RCC_OscConfig+0x5e>
 8001658:	4b8c      	ldr	r3, [pc, #560]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d10b      	bne.n	800167e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001666:	4b89      	ldr	r3, [pc, #548]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d06c      	beq.n	800174c <HAL_RCC_OscConfig+0x12c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d168      	bne.n	800174c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e246      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x76>
 8001688:	4b80      	ldr	r3, [pc, #512]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a7f      	ldr	r2, [pc, #508]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 800168e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	e02e      	b.n	80016f4 <HAL_RCC_OscConfig+0xd4>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x98>
 800169e:	4b7b      	ldr	r3, [pc, #492]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a7a      	ldr	r2, [pc, #488]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b78      	ldr	r3, [pc, #480]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a77      	ldr	r2, [pc, #476]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e01d      	b.n	80016f4 <HAL_RCC_OscConfig+0xd4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0xbc>
 80016c2:	4b72      	ldr	r3, [pc, #456]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a71      	ldr	r2, [pc, #452]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b6f      	ldr	r3, [pc, #444]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a6e      	ldr	r2, [pc, #440]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0xd4>
 80016dc:	4b6b      	ldr	r3, [pc, #428]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a6a      	ldr	r2, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b68      	ldr	r3, [pc, #416]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a67      	ldr	r2, [pc, #412]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fcb4 	bl	8001068 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fcb0 	bl	8001068 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1fa      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b5d      	ldr	r3, [pc, #372]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0xe4>
 8001722:	e014      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fca0 	bl	8001068 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fc9c 	bl	8001068 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e1e6      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	4b53      	ldr	r3, [pc, #332]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x10c>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d063      	beq.n	8001822 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175a:	4b4c      	ldr	r3, [pc, #304]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b08      	cmp	r3, #8
 8001770:	d11c      	bne.n	80017ac <HAL_RCC_OscConfig+0x18c>
 8001772:	4b46      	ldr	r3, [pc, #280]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d116      	bne.n	80017ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	4b43      	ldr	r3, [pc, #268]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x176>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e1ba      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4939      	ldr	r1, [pc, #228]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	e03a      	b.n	8001822 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b4:	4b36      	ldr	r3, [pc, #216]	; (8001890 <HAL_RCC_OscConfig+0x270>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fc55 	bl	8001068 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fc51 	bl	8001068 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e19b      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4927      	ldr	r1, [pc, #156]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <HAL_RCC_OscConfig+0x270>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fc34 	bl	8001068 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001804:	f7ff fc30 	bl	8001068 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e17a      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d03a      	beq.n	80018a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d019      	beq.n	800186a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183c:	f7ff fc14 	bl	8001068 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff fc10 	bl	8001068 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e15a      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f000 faa8 	bl	8001db8 <RCC_Delay>
 8001868:	e01c      	b.n	80018a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001870:	f7ff fbfa 	bl	8001068 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001876:	e00f      	b.n	8001898 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff fbf6 	bl	8001068 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d908      	bls.n	8001898 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e140      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	42420000 	.word	0x42420000
 8001894:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001898:	4b9e      	ldr	r3, [pc, #632]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1e9      	bne.n	8001878 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80a6 	beq.w	80019fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b6:	4b97      	ldr	r3, [pc, #604]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10d      	bne.n	80018de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b94      	ldr	r3, [pc, #592]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a93      	ldr	r2, [pc, #588]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b91      	ldr	r3, [pc, #580]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018da:	2301      	movs	r3, #1
 80018dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d118      	bne.n	800191c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ea:	4b8b      	ldr	r3, [pc, #556]	; (8001b18 <HAL_RCC_OscConfig+0x4f8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a8a      	ldr	r2, [pc, #552]	; (8001b18 <HAL_RCC_OscConfig+0x4f8>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f6:	f7ff fbb7 	bl	8001068 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fe:	f7ff fbb3 	bl	8001068 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b64      	cmp	r3, #100	; 0x64
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0fd      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	4b81      	ldr	r3, [pc, #516]	; (8001b18 <HAL_RCC_OscConfig+0x4f8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0x312>
 8001924:	4b7b      	ldr	r3, [pc, #492]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a7a      	ldr	r2, [pc, #488]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	e02d      	b.n	800198e <HAL_RCC_OscConfig+0x36e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x334>
 800193a:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a75      	ldr	r2, [pc, #468]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a72      	ldr	r2, [pc, #456]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6213      	str	r3, [r2, #32]
 8001952:	e01c      	b.n	800198e <HAL_RCC_OscConfig+0x36e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b05      	cmp	r3, #5
 800195a:	d10c      	bne.n	8001976 <HAL_RCC_OscConfig+0x356>
 800195c:	4b6d      	ldr	r3, [pc, #436]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4a6c      	ldr	r2, [pc, #432]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6213      	str	r3, [r2, #32]
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4a69      	ldr	r2, [pc, #420]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	e00b      	b.n	800198e <HAL_RCC_OscConfig+0x36e>
 8001976:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a66      	ldr	r2, [pc, #408]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	4b64      	ldr	r3, [pc, #400]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a63      	ldr	r2, [pc, #396]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001988:	f023 0304 	bic.w	r3, r3, #4
 800198c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d015      	beq.n	80019c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff fb67 	bl	8001068 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff fb63 	bl	8001068 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e0ab      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0ee      	beq.n	800199e <HAL_RCC_OscConfig+0x37e>
 80019c0:	e014      	b.n	80019ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c2:	f7ff fb51 	bl	8001068 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff fb4d 	bl	8001068 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e095      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e0:	4b4c      	ldr	r3, [pc, #304]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1ee      	bne.n	80019ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d105      	bne.n	80019fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f2:	4b48      	ldr	r3, [pc, #288]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a47      	ldr	r2, [pc, #284]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8081 	beq.w	8001b0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a08:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d061      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d146      	bne.n	8001aaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1c:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <HAL_RCC_OscConfig+0x4fc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff fb21 	bl	8001068 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff fb1d 	bl	8001068 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e067      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3c:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a50:	d108      	bne.n	8001a64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a52:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	492d      	ldr	r1, [pc, #180]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a64:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a19      	ldr	r1, [r3, #32]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	430b      	orrs	r3, r1
 8001a76:	4927      	ldr	r1, [pc, #156]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_RCC_OscConfig+0x4fc>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff faf1 	bl	8001068 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff faed 	bl	8001068 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e037      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x46a>
 8001aa8:	e02f      	b.n	8001b0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_RCC_OscConfig+0x4fc>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fada 	bl	8001068 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff fad6 	bl	8001068 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e020      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x498>
 8001ad6:	e018      	b.n	8001b0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e013      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	42420060 	.word	0x42420060

08001b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0d0      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d910      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 0207 	bic.w	r2, r3, #7
 8001b4a:	4965      	ldr	r1, [pc, #404]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0b8      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d020      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b7c:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba0:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	494d      	ldr	r1, [pc, #308]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d040      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d115      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e07f      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e073      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e06b      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfe:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f023 0203 	bic.w	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4936      	ldr	r1, [pc, #216]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c10:	f7ff fa2a 	bl	8001068 <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7ff fa26 	bl	8001068 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e053      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 020c 	and.w	r2, r3, #12
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1eb      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d210      	bcs.n	8001c70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 0207 	bic.w	r2, r3, #7
 8001c56:	4922      	ldr	r1, [pc, #136]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e032      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4916      	ldr	r1, [pc, #88]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	490e      	ldr	r1, [pc, #56]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cae:	f000 f821 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc0:	5cd3      	ldrb	r3, [r2, r3]
 8001cc2:	fa21 f303 	lsr.w	r3, r1, r3
 8001cc6:	4a09      	ldr	r2, [pc, #36]	; (8001cec <HAL_RCC_ClockConfig+0x1cc>)
 8001cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_ClockConfig+0x1d0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f988 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40022000 	.word	0x40022000
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08003604 	.word	0x08003604
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b490      	push	{r4, r7}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cfc:	1d3c      	adds	r4, r7, #4
 8001cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d1e:	4b23      	ldr	r3, [pc, #140]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d002      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x40>
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d003      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x46>
 8001d32:	e02d      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d36:	623b      	str	r3, [r7, #32]
      break;
 8001d38:	e02d      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	0c9b      	lsrs	r3, r3, #18
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d46:	4413      	add	r3, r2
 8001d48:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d4c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	0c5b      	lsrs	r3, r3, #17
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d66:	4413      	add	r3, r2
 8001d68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d72:	fb02 f203 	mul.w	r2, r2, r3
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7e:	e004      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d84:	fb02 f303 	mul.w	r3, r2, r3
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	623b      	str	r3, [r7, #32]
      break;
 8001d8e:	e002      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d92:	623b      	str	r3, [r7, #32]
      break;
 8001d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d96:	6a3b      	ldr	r3, [r7, #32]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc90      	pop	{r4, r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	080035f0 	.word	0x080035f0
 8001da8:	08003600 	.word	0x08003600
 8001dac:	40021000 	.word	0x40021000
 8001db0:	007a1200 	.word	0x007a1200
 8001db4:	003d0900 	.word	0x003d0900

08001db8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <RCC_Delay+0x34>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <RCC_Delay+0x38>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0a5b      	lsrs	r3, r3, #9
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dd4:	bf00      	nop
  }
  while (Delay --);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1e5a      	subs	r2, r3, #1
 8001dda:	60fa      	str	r2, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f9      	bne.n	8001dd4 <RCC_Delay+0x1c>
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000
 8001df0:	10624dd3 	.word	0x10624dd3

08001df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e041      	b.n	8001e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe ffce 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f000 fc14 	bl	8002660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d001      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e03a      	b.n	8001f22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_TIM_Base_Start_IT+0x98>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00e      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x58>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed6:	d009      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x58>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d004      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x58>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a13      	ldr	r2, [pc, #76]	; (8001f34 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d111      	bne.n	8001f10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d010      	beq.n	8001f20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0e:	e007      	b.n	8001f20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	40012c00 	.word	0x40012c00
 8001f30:	40000400 	.word	0x40000400
 8001f34:	40000800 	.word	0x40000800

08001f38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e041      	b.n	8001fce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe ff0e 	bl	8000d80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f000 fb72 	bl	8002660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_TIM_PWM_Start+0x24>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	e022      	b.n	8002042 <HAL_TIM_PWM_Start+0x6a>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d109      	bne.n	8002016 <HAL_TIM_PWM_Start+0x3e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b01      	cmp	r3, #1
 800200c:	bf14      	ite	ne
 800200e:	2301      	movne	r3, #1
 8002010:	2300      	moveq	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	e015      	b.n	8002042 <HAL_TIM_PWM_Start+0x6a>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d109      	bne.n	8002030 <HAL_TIM_PWM_Start+0x58>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	e008      	b.n	8002042 <HAL_TIM_PWM_Start+0x6a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e05e      	b.n	8002108 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d104      	bne.n	800205a <HAL_TIM_PWM_Start+0x82>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002058:	e013      	b.n	8002082 <HAL_TIM_PWM_Start+0xaa>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d104      	bne.n	800206a <HAL_TIM_PWM_Start+0x92>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002068:	e00b      	b.n	8002082 <HAL_TIM_PWM_Start+0xaa>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d104      	bne.n	800207a <HAL_TIM_PWM_Start+0xa2>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002078:	e003      	b.n	8002082 <HAL_TIM_PWM_Start+0xaa>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	6839      	ldr	r1, [r7, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fd68 	bl	8002b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1e      	ldr	r2, [pc, #120]	; (8002110 <HAL_TIM_PWM_Start+0x138>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d107      	bne.n	80020aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_TIM_PWM_Start+0x138>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00e      	beq.n	80020d2 <HAL_TIM_PWM_Start+0xfa>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020bc:	d009      	beq.n	80020d2 <HAL_TIM_PWM_Start+0xfa>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_TIM_PWM_Start+0x13c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d004      	beq.n	80020d2 <HAL_TIM_PWM_Start+0xfa>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a12      	ldr	r2, [pc, #72]	; (8002118 <HAL_TIM_PWM_Start+0x140>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d111      	bne.n	80020f6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	d010      	beq.n	8002106 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f4:	e007      	b.n	8002106 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0201 	orr.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40012c00 	.word	0x40012c00
 8002114:	40000400 	.word	0x40000400
 8002118:	40000800 	.word	0x40000800

0800211c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b02      	cmp	r3, #2
 8002130:	d122      	bne.n	8002178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d11b      	bne.n	8002178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0202 	mvn.w	r2, #2
 8002148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fa62 	bl	8002628 <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fa55 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fa64 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b04      	cmp	r3, #4
 8002184:	d122      	bne.n	80021cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b04      	cmp	r3, #4
 8002192:	d11b      	bne.n	80021cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0204 	mvn.w	r2, #4
 800219c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2202      	movs	r2, #2
 80021a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fa38 	bl	8002628 <HAL_TIM_IC_CaptureCallback>
 80021b8:	e005      	b.n	80021c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fa2b 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fa3a 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d122      	bne.n	8002220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d11b      	bne.n	8002220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0208 	mvn.w	r2, #8
 80021f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2204      	movs	r2, #4
 80021f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fa0e 	bl	8002628 <HAL_TIM_IC_CaptureCallback>
 800220c:	e005      	b.n	800221a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fa01 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fa10 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b10      	cmp	r3, #16
 800222c:	d122      	bne.n	8002274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b10      	cmp	r3, #16
 800223a:	d11b      	bne.n	8002274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0210 	mvn.w	r2, #16
 8002244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2208      	movs	r2, #8
 800224a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f9e4 	bl	8002628 <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f9d7 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f9e6 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d10e      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b01      	cmp	r3, #1
 800228e:	d107      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0201 	mvn.w	r2, #1
 8002298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe fa76 	bl	800078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022aa:	2b80      	cmp	r3, #128	; 0x80
 80022ac:	d10e      	bne.n	80022cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b8:	2b80      	cmp	r3, #128	; 0x80
 80022ba:	d107      	bne.n	80022cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fd26 	bl	8002d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d6:	2b40      	cmp	r3, #64	; 0x40
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d107      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f9aa 	bl	800264c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b20      	cmp	r3, #32
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b20      	cmp	r3, #32
 8002312:	d107      	bne.n	8002324 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0220 	mvn.w	r2, #32
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fcf1 	bl	8002d06 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002342:	2302      	movs	r3, #2
 8002344:	e0ac      	b.n	80024a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	f200 809f 	bhi.w	8002494 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002356:	a201      	add	r2, pc, #4	; (adr r2, 800235c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235c:	08002391 	.word	0x08002391
 8002360:	08002495 	.word	0x08002495
 8002364:	08002495 	.word	0x08002495
 8002368:	08002495 	.word	0x08002495
 800236c:	080023d1 	.word	0x080023d1
 8002370:	08002495 	.word	0x08002495
 8002374:	08002495 	.word	0x08002495
 8002378:	08002495 	.word	0x08002495
 800237c:	08002413 	.word	0x08002413
 8002380:	08002495 	.word	0x08002495
 8002384:	08002495 	.word	0x08002495
 8002388:	08002495 	.word	0x08002495
 800238c:	08002453 	.word	0x08002453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f9c4 	bl	8002724 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0208 	orr.w	r2, r2, #8
 80023aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0204 	bic.w	r2, r2, #4
 80023ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6999      	ldr	r1, [r3, #24]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	619a      	str	r2, [r3, #24]
      break;
 80023ce:	e062      	b.n	8002496 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fa0a 	bl	80027f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6999      	ldr	r1, [r3, #24]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	021a      	lsls	r2, r3, #8
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	619a      	str	r2, [r3, #24]
      break;
 8002410:	e041      	b.n	8002496 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fa53 	bl	80028c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0208 	orr.w	r2, r2, #8
 800242c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69da      	ldr	r2, [r3, #28]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0204 	bic.w	r2, r2, #4
 800243c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69d9      	ldr	r1, [r3, #28]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	61da      	str	r2, [r3, #28]
      break;
 8002450:	e021      	b.n	8002496 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fa9d 	bl	8002998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800246c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69d9      	ldr	r1, [r3, #28]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	021a      	lsls	r2, r3, #8
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	61da      	str	r2, [r3, #28]
      break;
 8002492:	e000      	b.n	8002496 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002494:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_TIM_ConfigClockSource+0x18>
 80024bc:	2302      	movs	r3, #2
 80024be:	e0a6      	b.n	800260e <HAL_TIM_ConfigClockSource+0x166>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d067      	beq.n	80025c8 <HAL_TIM_ConfigClockSource+0x120>
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d80b      	bhi.n	8002514 <HAL_TIM_ConfigClockSource+0x6c>
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d073      	beq.n	80025e8 <HAL_TIM_ConfigClockSource+0x140>
 8002500:	2b10      	cmp	r3, #16
 8002502:	d802      	bhi.n	800250a <HAL_TIM_ConfigClockSource+0x62>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d06f      	beq.n	80025e8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002508:	e078      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800250a:	2b20      	cmp	r3, #32
 800250c:	d06c      	beq.n	80025e8 <HAL_TIM_ConfigClockSource+0x140>
 800250e:	2b30      	cmp	r3, #48	; 0x30
 8002510:	d06a      	beq.n	80025e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002512:	e073      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002514:	2b70      	cmp	r3, #112	; 0x70
 8002516:	d00d      	beq.n	8002534 <HAL_TIM_ConfigClockSource+0x8c>
 8002518:	2b70      	cmp	r3, #112	; 0x70
 800251a:	d804      	bhi.n	8002526 <HAL_TIM_ConfigClockSource+0x7e>
 800251c:	2b50      	cmp	r3, #80	; 0x50
 800251e:	d033      	beq.n	8002588 <HAL_TIM_ConfigClockSource+0xe0>
 8002520:	2b60      	cmp	r3, #96	; 0x60
 8002522:	d041      	beq.n	80025a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002524:	e06a      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252a:	d066      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x152>
 800252c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002530:	d017      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002532:	e063      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6899      	ldr	r1, [r3, #8]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f000 faed 	bl	8002b22 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002556:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	609a      	str	r2, [r3, #8]
      break;
 8002560:	e04c      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6899      	ldr	r1, [r3, #8]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f000 fad6 	bl	8002b22 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002584:	609a      	str	r2, [r3, #8]
      break;
 8002586:	e039      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	461a      	mov	r2, r3
 8002596:	f000 fa4d 	bl	8002a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2150      	movs	r1, #80	; 0x50
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 faa4 	bl	8002aee <TIM_ITRx_SetConfig>
      break;
 80025a6:	e029      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	461a      	mov	r2, r3
 80025b6:	f000 fa6b 	bl	8002a90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2160      	movs	r1, #96	; 0x60
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fa94 	bl	8002aee <TIM_ITRx_SetConfig>
      break;
 80025c6:	e019      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f000 fa2d 	bl	8002a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2140      	movs	r1, #64	; 0x40
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fa84 	bl	8002aee <TIM_ITRx_SetConfig>
      break;
 80025e6:	e009      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f000 fa7b 	bl	8002aee <TIM_ITRx_SetConfig>
        break;
 80025f8:	e000      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
	...

08002660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a29      	ldr	r2, [pc, #164]	; (8002718 <TIM_Base_SetConfig+0xb8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00b      	beq.n	8002690 <TIM_Base_SetConfig+0x30>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d007      	beq.n	8002690 <TIM_Base_SetConfig+0x30>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a26      	ldr	r2, [pc, #152]	; (800271c <TIM_Base_SetConfig+0xbc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <TIM_Base_SetConfig+0x30>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a25      	ldr	r2, [pc, #148]	; (8002720 <TIM_Base_SetConfig+0xc0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d108      	bne.n	80026a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <TIM_Base_SetConfig+0xb8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00b      	beq.n	80026c2 <TIM_Base_SetConfig+0x62>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d007      	beq.n	80026c2 <TIM_Base_SetConfig+0x62>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a19      	ldr	r2, [pc, #100]	; (800271c <TIM_Base_SetConfig+0xbc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d003      	beq.n	80026c2 <TIM_Base_SetConfig+0x62>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a18      	ldr	r2, [pc, #96]	; (8002720 <TIM_Base_SetConfig+0xc0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d108      	bne.n	80026d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <TIM_Base_SetConfig+0xb8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d103      	bne.n	8002708 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	615a      	str	r2, [r3, #20]
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	40012c00 	.word	0x40012c00
 800271c:	40000400 	.word	0x40000400
 8002720:	40000800 	.word	0x40000800

08002724 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f023 0201 	bic.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0303 	bic.w	r3, r3, #3
 800275a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f023 0302 	bic.w	r3, r3, #2
 800276c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <TIM_OC1_SetConfig+0xc8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d10c      	bne.n	800279a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f023 0308 	bic.w	r3, r3, #8
 8002786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a13      	ldr	r2, [pc, #76]	; (80027ec <TIM_OC1_SetConfig+0xc8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d111      	bne.n	80027c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	621a      	str	r2, [r3, #32]
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40012c00 	.word	0x40012c00

080027f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f023 0210 	bic.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800281e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f023 0320 	bic.w	r3, r3, #32
 800283a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <TIM_OC2_SetConfig+0xd0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d10d      	bne.n	800286c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <TIM_OC2_SetConfig+0xd0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d113      	bne.n	800289c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800287a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40012c00 	.word	0x40012c00

080028c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800290c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <TIM_OC3_SetConfig+0xd0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10d      	bne.n	800293e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800293c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <TIM_OC3_SetConfig+0xd0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d113      	bne.n	800296e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800294c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	621a      	str	r2, [r3, #32]
}
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40012c00 	.word	0x40012c00

08002998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	031b      	lsls	r3, r3, #12
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <TIM_OC4_SetConfig+0x98>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d109      	bne.n	8002a0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	621a      	str	r2, [r3, #32]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	40012c00 	.word	0x40012c00

08002a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f023 0201 	bic.w	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f023 030a 	bic.w	r3, r3, #10
 8002a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	621a      	str	r2, [r3, #32]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f023 0210 	bic.w	r2, r3, #16
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	031b      	lsls	r3, r3, #12
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002acc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	621a      	str	r2, [r3, #32]
}
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b085      	sub	sp, #20
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f043 0307 	orr.w	r3, r3, #7
 8002b10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	609a      	str	r2, [r3, #8]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b087      	sub	sp, #28
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	021a      	lsls	r2, r3, #8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	609a      	str	r2, [r3, #8]
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2201      	movs	r2, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a1a      	ldr	r2, [r3, #32]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	401a      	ands	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a1a      	ldr	r2, [r3, #32]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e046      	b.n	8002c4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0c:	d009      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d004      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10c      	bne.n	8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800

08002c64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e03d      	b.n	8002cfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
	...

08002d2c <__errno>:
 8002d2c:	4b01      	ldr	r3, [pc, #4]	; (8002d34 <__errno+0x8>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	2000000c 	.word	0x2000000c

08002d38 <__libc_init_array>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	2500      	movs	r5, #0
 8002d3c:	4e0c      	ldr	r6, [pc, #48]	; (8002d70 <__libc_init_array+0x38>)
 8002d3e:	4c0d      	ldr	r4, [pc, #52]	; (8002d74 <__libc_init_array+0x3c>)
 8002d40:	1ba4      	subs	r4, r4, r6
 8002d42:	10a4      	asrs	r4, r4, #2
 8002d44:	42a5      	cmp	r5, r4
 8002d46:	d109      	bne.n	8002d5c <__libc_init_array+0x24>
 8002d48:	f000 fc34 	bl	80035b4 <_init>
 8002d4c:	2500      	movs	r5, #0
 8002d4e:	4e0a      	ldr	r6, [pc, #40]	; (8002d78 <__libc_init_array+0x40>)
 8002d50:	4c0a      	ldr	r4, [pc, #40]	; (8002d7c <__libc_init_array+0x44>)
 8002d52:	1ba4      	subs	r4, r4, r6
 8002d54:	10a4      	asrs	r4, r4, #2
 8002d56:	42a5      	cmp	r5, r4
 8002d58:	d105      	bne.n	8002d66 <__libc_init_array+0x2e>
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d60:	4798      	blx	r3
 8002d62:	3501      	adds	r5, #1
 8002d64:	e7ee      	b.n	8002d44 <__libc_init_array+0xc>
 8002d66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d6a:	4798      	blx	r3
 8002d6c:	3501      	adds	r5, #1
 8002d6e:	e7f2      	b.n	8002d56 <__libc_init_array+0x1e>
 8002d70:	08003648 	.word	0x08003648
 8002d74:	08003648 	.word	0x08003648
 8002d78:	08003648 	.word	0x08003648
 8002d7c:	0800364c 	.word	0x0800364c

08002d80 <memset>:
 8002d80:	4603      	mov	r3, r0
 8002d82:	4402      	add	r2, r0
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d100      	bne.n	8002d8a <memset+0xa>
 8002d88:	4770      	bx	lr
 8002d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d8e:	e7f9      	b.n	8002d84 <memset+0x4>

08002d90 <siprintf>:
 8002d90:	b40e      	push	{r1, r2, r3}
 8002d92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d96:	b500      	push	{lr}
 8002d98:	b09c      	sub	sp, #112	; 0x70
 8002d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8002d9c:	9002      	str	r0, [sp, #8]
 8002d9e:	9006      	str	r0, [sp, #24]
 8002da0:	9107      	str	r1, [sp, #28]
 8002da2:	9104      	str	r1, [sp, #16]
 8002da4:	4808      	ldr	r0, [pc, #32]	; (8002dc8 <siprintf+0x38>)
 8002da6:	4909      	ldr	r1, [pc, #36]	; (8002dcc <siprintf+0x3c>)
 8002da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dac:	9105      	str	r1, [sp, #20]
 8002dae:	6800      	ldr	r0, [r0, #0]
 8002db0:	a902      	add	r1, sp, #8
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	f000 f866 	bl	8002e84 <_svfiprintf_r>
 8002db8:	2200      	movs	r2, #0
 8002dba:	9b02      	ldr	r3, [sp, #8]
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	b01c      	add	sp, #112	; 0x70
 8002dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dc4:	b003      	add	sp, #12
 8002dc6:	4770      	bx	lr
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	ffff0208 	.word	0xffff0208

08002dd0 <__ssputs_r>:
 8002dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd4:	688e      	ldr	r6, [r1, #8]
 8002dd6:	4682      	mov	sl, r0
 8002dd8:	429e      	cmp	r6, r3
 8002dda:	460c      	mov	r4, r1
 8002ddc:	4690      	mov	r8, r2
 8002dde:	4699      	mov	r9, r3
 8002de0:	d837      	bhi.n	8002e52 <__ssputs_r+0x82>
 8002de2:	898a      	ldrh	r2, [r1, #12]
 8002de4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002de8:	d031      	beq.n	8002e4e <__ssputs_r+0x7e>
 8002dea:	2302      	movs	r3, #2
 8002dec:	6825      	ldr	r5, [r4, #0]
 8002dee:	6909      	ldr	r1, [r1, #16]
 8002df0:	1a6f      	subs	r7, r5, r1
 8002df2:	6965      	ldr	r5, [r4, #20]
 8002df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002df8:	fb95 f5f3 	sdiv	r5, r5, r3
 8002dfc:	f109 0301 	add.w	r3, r9, #1
 8002e00:	443b      	add	r3, r7
 8002e02:	429d      	cmp	r5, r3
 8002e04:	bf38      	it	cc
 8002e06:	461d      	movcc	r5, r3
 8002e08:	0553      	lsls	r3, r2, #21
 8002e0a:	d530      	bpl.n	8002e6e <__ssputs_r+0x9e>
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	f000 fb37 	bl	8003480 <_malloc_r>
 8002e12:	4606      	mov	r6, r0
 8002e14:	b950      	cbnz	r0, 8002e2c <__ssputs_r+0x5c>
 8002e16:	230c      	movs	r3, #12
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e1c:	f8ca 3000 	str.w	r3, [sl]
 8002e20:	89a3      	ldrh	r3, [r4, #12]
 8002e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e26:	81a3      	strh	r3, [r4, #12]
 8002e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e2c:	463a      	mov	r2, r7
 8002e2e:	6921      	ldr	r1, [r4, #16]
 8002e30:	f000 fab6 	bl	80033a0 <memcpy>
 8002e34:	89a3      	ldrh	r3, [r4, #12]
 8002e36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3e:	81a3      	strh	r3, [r4, #12]
 8002e40:	6126      	str	r6, [r4, #16]
 8002e42:	443e      	add	r6, r7
 8002e44:	6026      	str	r6, [r4, #0]
 8002e46:	464e      	mov	r6, r9
 8002e48:	6165      	str	r5, [r4, #20]
 8002e4a:	1bed      	subs	r5, r5, r7
 8002e4c:	60a5      	str	r5, [r4, #8]
 8002e4e:	454e      	cmp	r6, r9
 8002e50:	d900      	bls.n	8002e54 <__ssputs_r+0x84>
 8002e52:	464e      	mov	r6, r9
 8002e54:	4632      	mov	r2, r6
 8002e56:	4641      	mov	r1, r8
 8002e58:	6820      	ldr	r0, [r4, #0]
 8002e5a:	f000 faac 	bl	80033b6 <memmove>
 8002e5e:	68a3      	ldr	r3, [r4, #8]
 8002e60:	2000      	movs	r0, #0
 8002e62:	1b9b      	subs	r3, r3, r6
 8002e64:	60a3      	str	r3, [r4, #8]
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	441e      	add	r6, r3
 8002e6a:	6026      	str	r6, [r4, #0]
 8002e6c:	e7dc      	b.n	8002e28 <__ssputs_r+0x58>
 8002e6e:	462a      	mov	r2, r5
 8002e70:	f000 fb60 	bl	8003534 <_realloc_r>
 8002e74:	4606      	mov	r6, r0
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d1e2      	bne.n	8002e40 <__ssputs_r+0x70>
 8002e7a:	6921      	ldr	r1, [r4, #16]
 8002e7c:	4650      	mov	r0, sl
 8002e7e:	f000 fab3 	bl	80033e8 <_free_r>
 8002e82:	e7c8      	b.n	8002e16 <__ssputs_r+0x46>

08002e84 <_svfiprintf_r>:
 8002e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e88:	461d      	mov	r5, r3
 8002e8a:	898b      	ldrh	r3, [r1, #12]
 8002e8c:	b09d      	sub	sp, #116	; 0x74
 8002e8e:	061f      	lsls	r7, r3, #24
 8002e90:	4680      	mov	r8, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	4616      	mov	r6, r2
 8002e96:	d50f      	bpl.n	8002eb8 <_svfiprintf_r+0x34>
 8002e98:	690b      	ldr	r3, [r1, #16]
 8002e9a:	b96b      	cbnz	r3, 8002eb8 <_svfiprintf_r+0x34>
 8002e9c:	2140      	movs	r1, #64	; 0x40
 8002e9e:	f000 faef 	bl	8003480 <_malloc_r>
 8002ea2:	6020      	str	r0, [r4, #0]
 8002ea4:	6120      	str	r0, [r4, #16]
 8002ea6:	b928      	cbnz	r0, 8002eb4 <_svfiprintf_r+0x30>
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	f8c8 3000 	str.w	r3, [r8]
 8002eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eb2:	e0c8      	b.n	8003046 <_svfiprintf_r+0x1c2>
 8002eb4:	2340      	movs	r3, #64	; 0x40
 8002eb6:	6163      	str	r3, [r4, #20]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	9309      	str	r3, [sp, #36]	; 0x24
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ec2:	2330      	movs	r3, #48	; 0x30
 8002ec4:	f04f 0b01 	mov.w	fp, #1
 8002ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ecc:	9503      	str	r5, [sp, #12]
 8002ece:	4637      	mov	r7, r6
 8002ed0:	463d      	mov	r5, r7
 8002ed2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ed6:	b10b      	cbz	r3, 8002edc <_svfiprintf_r+0x58>
 8002ed8:	2b25      	cmp	r3, #37	; 0x25
 8002eda:	d13e      	bne.n	8002f5a <_svfiprintf_r+0xd6>
 8002edc:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ee0:	d00b      	beq.n	8002efa <_svfiprintf_r+0x76>
 8002ee2:	4653      	mov	r3, sl
 8002ee4:	4632      	mov	r2, r6
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	4640      	mov	r0, r8
 8002eea:	f7ff ff71 	bl	8002dd0 <__ssputs_r>
 8002eee:	3001      	adds	r0, #1
 8002ef0:	f000 80a4 	beq.w	800303c <_svfiprintf_r+0x1b8>
 8002ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ef6:	4453      	add	r3, sl
 8002ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8002efa:	783b      	ldrb	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 809d 	beq.w	800303c <_svfiprintf_r+0x1b8>
 8002f02:	2300      	movs	r3, #0
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f0c:	9304      	str	r3, [sp, #16]
 8002f0e:	9307      	str	r3, [sp, #28]
 8002f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f14:	931a      	str	r3, [sp, #104]	; 0x68
 8002f16:	462f      	mov	r7, r5
 8002f18:	2205      	movs	r2, #5
 8002f1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002f1e:	4850      	ldr	r0, [pc, #320]	; (8003060 <_svfiprintf_r+0x1dc>)
 8002f20:	f000 fa30 	bl	8003384 <memchr>
 8002f24:	9b04      	ldr	r3, [sp, #16]
 8002f26:	b9d0      	cbnz	r0, 8002f5e <_svfiprintf_r+0xda>
 8002f28:	06d9      	lsls	r1, r3, #27
 8002f2a:	bf44      	itt	mi
 8002f2c:	2220      	movmi	r2, #32
 8002f2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f32:	071a      	lsls	r2, r3, #28
 8002f34:	bf44      	itt	mi
 8002f36:	222b      	movmi	r2, #43	; 0x2b
 8002f38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f3c:	782a      	ldrb	r2, [r5, #0]
 8002f3e:	2a2a      	cmp	r2, #42	; 0x2a
 8002f40:	d015      	beq.n	8002f6e <_svfiprintf_r+0xea>
 8002f42:	462f      	mov	r7, r5
 8002f44:	2000      	movs	r0, #0
 8002f46:	250a      	movs	r5, #10
 8002f48:	9a07      	ldr	r2, [sp, #28]
 8002f4a:	4639      	mov	r1, r7
 8002f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f50:	3b30      	subs	r3, #48	; 0x30
 8002f52:	2b09      	cmp	r3, #9
 8002f54:	d94d      	bls.n	8002ff2 <_svfiprintf_r+0x16e>
 8002f56:	b1b8      	cbz	r0, 8002f88 <_svfiprintf_r+0x104>
 8002f58:	e00f      	b.n	8002f7a <_svfiprintf_r+0xf6>
 8002f5a:	462f      	mov	r7, r5
 8002f5c:	e7b8      	b.n	8002ed0 <_svfiprintf_r+0x4c>
 8002f5e:	4a40      	ldr	r2, [pc, #256]	; (8003060 <_svfiprintf_r+0x1dc>)
 8002f60:	463d      	mov	r5, r7
 8002f62:	1a80      	subs	r0, r0, r2
 8002f64:	fa0b f000 	lsl.w	r0, fp, r0
 8002f68:	4318      	orrs	r0, r3
 8002f6a:	9004      	str	r0, [sp, #16]
 8002f6c:	e7d3      	b.n	8002f16 <_svfiprintf_r+0x92>
 8002f6e:	9a03      	ldr	r2, [sp, #12]
 8002f70:	1d11      	adds	r1, r2, #4
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	9103      	str	r1, [sp, #12]
 8002f76:	2a00      	cmp	r2, #0
 8002f78:	db01      	blt.n	8002f7e <_svfiprintf_r+0xfa>
 8002f7a:	9207      	str	r2, [sp, #28]
 8002f7c:	e004      	b.n	8002f88 <_svfiprintf_r+0x104>
 8002f7e:	4252      	negs	r2, r2
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	9207      	str	r2, [sp, #28]
 8002f86:	9304      	str	r3, [sp, #16]
 8002f88:	783b      	ldrb	r3, [r7, #0]
 8002f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f8c:	d10c      	bne.n	8002fa8 <_svfiprintf_r+0x124>
 8002f8e:	787b      	ldrb	r3, [r7, #1]
 8002f90:	2b2a      	cmp	r3, #42	; 0x2a
 8002f92:	d133      	bne.n	8002ffc <_svfiprintf_r+0x178>
 8002f94:	9b03      	ldr	r3, [sp, #12]
 8002f96:	3702      	adds	r7, #2
 8002f98:	1d1a      	adds	r2, r3, #4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	9203      	str	r2, [sp, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bfb8      	it	lt
 8002fa2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002fa6:	9305      	str	r3, [sp, #20]
 8002fa8:	4d2e      	ldr	r5, [pc, #184]	; (8003064 <_svfiprintf_r+0x1e0>)
 8002faa:	2203      	movs	r2, #3
 8002fac:	7839      	ldrb	r1, [r7, #0]
 8002fae:	4628      	mov	r0, r5
 8002fb0:	f000 f9e8 	bl	8003384 <memchr>
 8002fb4:	b138      	cbz	r0, 8002fc6 <_svfiprintf_r+0x142>
 8002fb6:	2340      	movs	r3, #64	; 0x40
 8002fb8:	1b40      	subs	r0, r0, r5
 8002fba:	fa03 f000 	lsl.w	r0, r3, r0
 8002fbe:	9b04      	ldr	r3, [sp, #16]
 8002fc0:	3701      	adds	r7, #1
 8002fc2:	4303      	orrs	r3, r0
 8002fc4:	9304      	str	r3, [sp, #16]
 8002fc6:	7839      	ldrb	r1, [r7, #0]
 8002fc8:	2206      	movs	r2, #6
 8002fca:	4827      	ldr	r0, [pc, #156]	; (8003068 <_svfiprintf_r+0x1e4>)
 8002fcc:	1c7e      	adds	r6, r7, #1
 8002fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fd2:	f000 f9d7 	bl	8003384 <memchr>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d038      	beq.n	800304c <_svfiprintf_r+0x1c8>
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <_svfiprintf_r+0x1e8>)
 8002fdc:	bb13      	cbnz	r3, 8003024 <_svfiprintf_r+0x1a0>
 8002fde:	9b03      	ldr	r3, [sp, #12]
 8002fe0:	3307      	adds	r3, #7
 8002fe2:	f023 0307 	bic.w	r3, r3, #7
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	9303      	str	r3, [sp, #12]
 8002fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fec:	444b      	add	r3, r9
 8002fee:	9309      	str	r3, [sp, #36]	; 0x24
 8002ff0:	e76d      	b.n	8002ece <_svfiprintf_r+0x4a>
 8002ff2:	fb05 3202 	mla	r2, r5, r2, r3
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	460f      	mov	r7, r1
 8002ffa:	e7a6      	b.n	8002f4a <_svfiprintf_r+0xc6>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	250a      	movs	r5, #10
 8003000:	4619      	mov	r1, r3
 8003002:	3701      	adds	r7, #1
 8003004:	9305      	str	r3, [sp, #20]
 8003006:	4638      	mov	r0, r7
 8003008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800300c:	3a30      	subs	r2, #48	; 0x30
 800300e:	2a09      	cmp	r2, #9
 8003010:	d903      	bls.n	800301a <_svfiprintf_r+0x196>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0c8      	beq.n	8002fa8 <_svfiprintf_r+0x124>
 8003016:	9105      	str	r1, [sp, #20]
 8003018:	e7c6      	b.n	8002fa8 <_svfiprintf_r+0x124>
 800301a:	fb05 2101 	mla	r1, r5, r1, r2
 800301e:	2301      	movs	r3, #1
 8003020:	4607      	mov	r7, r0
 8003022:	e7f0      	b.n	8003006 <_svfiprintf_r+0x182>
 8003024:	ab03      	add	r3, sp, #12
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	4622      	mov	r2, r4
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <_svfiprintf_r+0x1ec>)
 800302c:	a904      	add	r1, sp, #16
 800302e:	4640      	mov	r0, r8
 8003030:	f3af 8000 	nop.w
 8003034:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003038:	4681      	mov	r9, r0
 800303a:	d1d6      	bne.n	8002fea <_svfiprintf_r+0x166>
 800303c:	89a3      	ldrh	r3, [r4, #12]
 800303e:	065b      	lsls	r3, r3, #25
 8003040:	f53f af35 	bmi.w	8002eae <_svfiprintf_r+0x2a>
 8003044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003046:	b01d      	add	sp, #116	; 0x74
 8003048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304c:	ab03      	add	r3, sp, #12
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	4622      	mov	r2, r4
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <_svfiprintf_r+0x1ec>)
 8003054:	a904      	add	r1, sp, #16
 8003056:	4640      	mov	r0, r8
 8003058:	f000 f882 	bl	8003160 <_printf_i>
 800305c:	e7ea      	b.n	8003034 <_svfiprintf_r+0x1b0>
 800305e:	bf00      	nop
 8003060:	08003614 	.word	0x08003614
 8003064:	0800361a 	.word	0x0800361a
 8003068:	0800361e 	.word	0x0800361e
 800306c:	00000000 	.word	0x00000000
 8003070:	08002dd1 	.word	0x08002dd1

08003074 <_printf_common>:
 8003074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003078:	4691      	mov	r9, r2
 800307a:	461f      	mov	r7, r3
 800307c:	688a      	ldr	r2, [r1, #8]
 800307e:	690b      	ldr	r3, [r1, #16]
 8003080:	4606      	mov	r6, r0
 8003082:	4293      	cmp	r3, r2
 8003084:	bfb8      	it	lt
 8003086:	4613      	movlt	r3, r2
 8003088:	f8c9 3000 	str.w	r3, [r9]
 800308c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003090:	460c      	mov	r4, r1
 8003092:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003096:	b112      	cbz	r2, 800309e <_printf_common+0x2a>
 8003098:	3301      	adds	r3, #1
 800309a:	f8c9 3000 	str.w	r3, [r9]
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	0699      	lsls	r1, r3, #26
 80030a2:	bf42      	ittt	mi
 80030a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030a8:	3302      	addmi	r3, #2
 80030aa:	f8c9 3000 	strmi.w	r3, [r9]
 80030ae:	6825      	ldr	r5, [r4, #0]
 80030b0:	f015 0506 	ands.w	r5, r5, #6
 80030b4:	d107      	bne.n	80030c6 <_printf_common+0x52>
 80030b6:	f104 0a19 	add.w	sl, r4, #25
 80030ba:	68e3      	ldr	r3, [r4, #12]
 80030bc:	f8d9 2000 	ldr.w	r2, [r9]
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	42ab      	cmp	r3, r5
 80030c4:	dc29      	bgt.n	800311a <_printf_common+0xa6>
 80030c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030ca:	6822      	ldr	r2, [r4, #0]
 80030cc:	3300      	adds	r3, #0
 80030ce:	bf18      	it	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	0692      	lsls	r2, r2, #26
 80030d4:	d42e      	bmi.n	8003134 <_printf_common+0xc0>
 80030d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030da:	4639      	mov	r1, r7
 80030dc:	4630      	mov	r0, r6
 80030de:	47c0      	blx	r8
 80030e0:	3001      	adds	r0, #1
 80030e2:	d021      	beq.n	8003128 <_printf_common+0xb4>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	68e5      	ldr	r5, [r4, #12]
 80030e8:	f003 0306 	and.w	r3, r3, #6
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	bf18      	it	ne
 80030f0:	2500      	movne	r5, #0
 80030f2:	f8d9 2000 	ldr.w	r2, [r9]
 80030f6:	f04f 0900 	mov.w	r9, #0
 80030fa:	bf08      	it	eq
 80030fc:	1aad      	subeq	r5, r5, r2
 80030fe:	68a3      	ldr	r3, [r4, #8]
 8003100:	6922      	ldr	r2, [r4, #16]
 8003102:	bf08      	it	eq
 8003104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003108:	4293      	cmp	r3, r2
 800310a:	bfc4      	itt	gt
 800310c:	1a9b      	subgt	r3, r3, r2
 800310e:	18ed      	addgt	r5, r5, r3
 8003110:	341a      	adds	r4, #26
 8003112:	454d      	cmp	r5, r9
 8003114:	d11a      	bne.n	800314c <_printf_common+0xd8>
 8003116:	2000      	movs	r0, #0
 8003118:	e008      	b.n	800312c <_printf_common+0xb8>
 800311a:	2301      	movs	r3, #1
 800311c:	4652      	mov	r2, sl
 800311e:	4639      	mov	r1, r7
 8003120:	4630      	mov	r0, r6
 8003122:	47c0      	blx	r8
 8003124:	3001      	adds	r0, #1
 8003126:	d103      	bne.n	8003130 <_printf_common+0xbc>
 8003128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800312c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003130:	3501      	adds	r5, #1
 8003132:	e7c2      	b.n	80030ba <_printf_common+0x46>
 8003134:	2030      	movs	r0, #48	; 0x30
 8003136:	18e1      	adds	r1, r4, r3
 8003138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003142:	4422      	add	r2, r4
 8003144:	3302      	adds	r3, #2
 8003146:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800314a:	e7c4      	b.n	80030d6 <_printf_common+0x62>
 800314c:	2301      	movs	r3, #1
 800314e:	4622      	mov	r2, r4
 8003150:	4639      	mov	r1, r7
 8003152:	4630      	mov	r0, r6
 8003154:	47c0      	blx	r8
 8003156:	3001      	adds	r0, #1
 8003158:	d0e6      	beq.n	8003128 <_printf_common+0xb4>
 800315a:	f109 0901 	add.w	r9, r9, #1
 800315e:	e7d8      	b.n	8003112 <_printf_common+0x9e>

08003160 <_printf_i>:
 8003160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003164:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003168:	460c      	mov	r4, r1
 800316a:	7e09      	ldrb	r1, [r1, #24]
 800316c:	b085      	sub	sp, #20
 800316e:	296e      	cmp	r1, #110	; 0x6e
 8003170:	4617      	mov	r7, r2
 8003172:	4606      	mov	r6, r0
 8003174:	4698      	mov	r8, r3
 8003176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003178:	f000 80b3 	beq.w	80032e2 <_printf_i+0x182>
 800317c:	d822      	bhi.n	80031c4 <_printf_i+0x64>
 800317e:	2963      	cmp	r1, #99	; 0x63
 8003180:	d036      	beq.n	80031f0 <_printf_i+0x90>
 8003182:	d80a      	bhi.n	800319a <_printf_i+0x3a>
 8003184:	2900      	cmp	r1, #0
 8003186:	f000 80b9 	beq.w	80032fc <_printf_i+0x19c>
 800318a:	2958      	cmp	r1, #88	; 0x58
 800318c:	f000 8083 	beq.w	8003296 <_printf_i+0x136>
 8003190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003194:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003198:	e032      	b.n	8003200 <_printf_i+0xa0>
 800319a:	2964      	cmp	r1, #100	; 0x64
 800319c:	d001      	beq.n	80031a2 <_printf_i+0x42>
 800319e:	2969      	cmp	r1, #105	; 0x69
 80031a0:	d1f6      	bne.n	8003190 <_printf_i+0x30>
 80031a2:	6820      	ldr	r0, [r4, #0]
 80031a4:	6813      	ldr	r3, [r2, #0]
 80031a6:	0605      	lsls	r5, r0, #24
 80031a8:	f103 0104 	add.w	r1, r3, #4
 80031ac:	d52a      	bpl.n	8003204 <_printf_i+0xa4>
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6011      	str	r1, [r2, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da03      	bge.n	80031be <_printf_i+0x5e>
 80031b6:	222d      	movs	r2, #45	; 0x2d
 80031b8:	425b      	negs	r3, r3
 80031ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031be:	486f      	ldr	r0, [pc, #444]	; (800337c <_printf_i+0x21c>)
 80031c0:	220a      	movs	r2, #10
 80031c2:	e039      	b.n	8003238 <_printf_i+0xd8>
 80031c4:	2973      	cmp	r1, #115	; 0x73
 80031c6:	f000 809d 	beq.w	8003304 <_printf_i+0x1a4>
 80031ca:	d808      	bhi.n	80031de <_printf_i+0x7e>
 80031cc:	296f      	cmp	r1, #111	; 0x6f
 80031ce:	d020      	beq.n	8003212 <_printf_i+0xb2>
 80031d0:	2970      	cmp	r1, #112	; 0x70
 80031d2:	d1dd      	bne.n	8003190 <_printf_i+0x30>
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	f043 0320 	orr.w	r3, r3, #32
 80031da:	6023      	str	r3, [r4, #0]
 80031dc:	e003      	b.n	80031e6 <_printf_i+0x86>
 80031de:	2975      	cmp	r1, #117	; 0x75
 80031e0:	d017      	beq.n	8003212 <_printf_i+0xb2>
 80031e2:	2978      	cmp	r1, #120	; 0x78
 80031e4:	d1d4      	bne.n	8003190 <_printf_i+0x30>
 80031e6:	2378      	movs	r3, #120	; 0x78
 80031e8:	4865      	ldr	r0, [pc, #404]	; (8003380 <_printf_i+0x220>)
 80031ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031ee:	e055      	b.n	800329c <_printf_i+0x13c>
 80031f0:	6813      	ldr	r3, [r2, #0]
 80031f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031f6:	1d19      	adds	r1, r3, #4
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6011      	str	r1, [r2, #0]
 80031fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003200:	2301      	movs	r3, #1
 8003202:	e08c      	b.n	800331e <_printf_i+0x1be>
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f010 0f40 	tst.w	r0, #64	; 0x40
 800320a:	6011      	str	r1, [r2, #0]
 800320c:	bf18      	it	ne
 800320e:	b21b      	sxthne	r3, r3
 8003210:	e7cf      	b.n	80031b2 <_printf_i+0x52>
 8003212:	6813      	ldr	r3, [r2, #0]
 8003214:	6825      	ldr	r5, [r4, #0]
 8003216:	1d18      	adds	r0, r3, #4
 8003218:	6010      	str	r0, [r2, #0]
 800321a:	0628      	lsls	r0, r5, #24
 800321c:	d501      	bpl.n	8003222 <_printf_i+0xc2>
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	e002      	b.n	8003228 <_printf_i+0xc8>
 8003222:	0668      	lsls	r0, r5, #25
 8003224:	d5fb      	bpl.n	800321e <_printf_i+0xbe>
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	296f      	cmp	r1, #111	; 0x6f
 800322a:	bf14      	ite	ne
 800322c:	220a      	movne	r2, #10
 800322e:	2208      	moveq	r2, #8
 8003230:	4852      	ldr	r0, [pc, #328]	; (800337c <_printf_i+0x21c>)
 8003232:	2100      	movs	r1, #0
 8003234:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003238:	6865      	ldr	r5, [r4, #4]
 800323a:	2d00      	cmp	r5, #0
 800323c:	60a5      	str	r5, [r4, #8]
 800323e:	f2c0 8095 	blt.w	800336c <_printf_i+0x20c>
 8003242:	6821      	ldr	r1, [r4, #0]
 8003244:	f021 0104 	bic.w	r1, r1, #4
 8003248:	6021      	str	r1, [r4, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d13d      	bne.n	80032ca <_printf_i+0x16a>
 800324e:	2d00      	cmp	r5, #0
 8003250:	f040 808e 	bne.w	8003370 <_printf_i+0x210>
 8003254:	4665      	mov	r5, ip
 8003256:	2a08      	cmp	r2, #8
 8003258:	d10b      	bne.n	8003272 <_printf_i+0x112>
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	07db      	lsls	r3, r3, #31
 800325e:	d508      	bpl.n	8003272 <_printf_i+0x112>
 8003260:	6923      	ldr	r3, [r4, #16]
 8003262:	6862      	ldr	r2, [r4, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	bfde      	ittt	le
 8003268:	2330      	movle	r3, #48	; 0x30
 800326a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800326e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003272:	ebac 0305 	sub.w	r3, ip, r5
 8003276:	6123      	str	r3, [r4, #16]
 8003278:	f8cd 8000 	str.w	r8, [sp]
 800327c:	463b      	mov	r3, r7
 800327e:	aa03      	add	r2, sp, #12
 8003280:	4621      	mov	r1, r4
 8003282:	4630      	mov	r0, r6
 8003284:	f7ff fef6 	bl	8003074 <_printf_common>
 8003288:	3001      	adds	r0, #1
 800328a:	d14d      	bne.n	8003328 <_printf_i+0x1c8>
 800328c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003290:	b005      	add	sp, #20
 8003292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003296:	4839      	ldr	r0, [pc, #228]	; (800337c <_printf_i+0x21c>)
 8003298:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800329c:	6813      	ldr	r3, [r2, #0]
 800329e:	6821      	ldr	r1, [r4, #0]
 80032a0:	1d1d      	adds	r5, r3, #4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6015      	str	r5, [r2, #0]
 80032a6:	060a      	lsls	r2, r1, #24
 80032a8:	d50b      	bpl.n	80032c2 <_printf_i+0x162>
 80032aa:	07ca      	lsls	r2, r1, #31
 80032ac:	bf44      	itt	mi
 80032ae:	f041 0120 	orrmi.w	r1, r1, #32
 80032b2:	6021      	strmi	r1, [r4, #0]
 80032b4:	b91b      	cbnz	r3, 80032be <_printf_i+0x15e>
 80032b6:	6822      	ldr	r2, [r4, #0]
 80032b8:	f022 0220 	bic.w	r2, r2, #32
 80032bc:	6022      	str	r2, [r4, #0]
 80032be:	2210      	movs	r2, #16
 80032c0:	e7b7      	b.n	8003232 <_printf_i+0xd2>
 80032c2:	064d      	lsls	r5, r1, #25
 80032c4:	bf48      	it	mi
 80032c6:	b29b      	uxthmi	r3, r3
 80032c8:	e7ef      	b.n	80032aa <_printf_i+0x14a>
 80032ca:	4665      	mov	r5, ip
 80032cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80032d0:	fb02 3311 	mls	r3, r2, r1, r3
 80032d4:	5cc3      	ldrb	r3, [r0, r3]
 80032d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032da:	460b      	mov	r3, r1
 80032dc:	2900      	cmp	r1, #0
 80032de:	d1f5      	bne.n	80032cc <_printf_i+0x16c>
 80032e0:	e7b9      	b.n	8003256 <_printf_i+0xf6>
 80032e2:	6813      	ldr	r3, [r2, #0]
 80032e4:	6825      	ldr	r5, [r4, #0]
 80032e6:	1d18      	adds	r0, r3, #4
 80032e8:	6961      	ldr	r1, [r4, #20]
 80032ea:	6010      	str	r0, [r2, #0]
 80032ec:	0628      	lsls	r0, r5, #24
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	d501      	bpl.n	80032f6 <_printf_i+0x196>
 80032f2:	6019      	str	r1, [r3, #0]
 80032f4:	e002      	b.n	80032fc <_printf_i+0x19c>
 80032f6:	066a      	lsls	r2, r5, #25
 80032f8:	d5fb      	bpl.n	80032f2 <_printf_i+0x192>
 80032fa:	8019      	strh	r1, [r3, #0]
 80032fc:	2300      	movs	r3, #0
 80032fe:	4665      	mov	r5, ip
 8003300:	6123      	str	r3, [r4, #16]
 8003302:	e7b9      	b.n	8003278 <_printf_i+0x118>
 8003304:	6813      	ldr	r3, [r2, #0]
 8003306:	1d19      	adds	r1, r3, #4
 8003308:	6011      	str	r1, [r2, #0]
 800330a:	681d      	ldr	r5, [r3, #0]
 800330c:	6862      	ldr	r2, [r4, #4]
 800330e:	2100      	movs	r1, #0
 8003310:	4628      	mov	r0, r5
 8003312:	f000 f837 	bl	8003384 <memchr>
 8003316:	b108      	cbz	r0, 800331c <_printf_i+0x1bc>
 8003318:	1b40      	subs	r0, r0, r5
 800331a:	6060      	str	r0, [r4, #4]
 800331c:	6863      	ldr	r3, [r4, #4]
 800331e:	6123      	str	r3, [r4, #16]
 8003320:	2300      	movs	r3, #0
 8003322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003326:	e7a7      	b.n	8003278 <_printf_i+0x118>
 8003328:	6923      	ldr	r3, [r4, #16]
 800332a:	462a      	mov	r2, r5
 800332c:	4639      	mov	r1, r7
 800332e:	4630      	mov	r0, r6
 8003330:	47c0      	blx	r8
 8003332:	3001      	adds	r0, #1
 8003334:	d0aa      	beq.n	800328c <_printf_i+0x12c>
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	079b      	lsls	r3, r3, #30
 800333a:	d413      	bmi.n	8003364 <_printf_i+0x204>
 800333c:	68e0      	ldr	r0, [r4, #12]
 800333e:	9b03      	ldr	r3, [sp, #12]
 8003340:	4298      	cmp	r0, r3
 8003342:	bfb8      	it	lt
 8003344:	4618      	movlt	r0, r3
 8003346:	e7a3      	b.n	8003290 <_printf_i+0x130>
 8003348:	2301      	movs	r3, #1
 800334a:	464a      	mov	r2, r9
 800334c:	4639      	mov	r1, r7
 800334e:	4630      	mov	r0, r6
 8003350:	47c0      	blx	r8
 8003352:	3001      	adds	r0, #1
 8003354:	d09a      	beq.n	800328c <_printf_i+0x12c>
 8003356:	3501      	adds	r5, #1
 8003358:	68e3      	ldr	r3, [r4, #12]
 800335a:	9a03      	ldr	r2, [sp, #12]
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	42ab      	cmp	r3, r5
 8003360:	dcf2      	bgt.n	8003348 <_printf_i+0x1e8>
 8003362:	e7eb      	b.n	800333c <_printf_i+0x1dc>
 8003364:	2500      	movs	r5, #0
 8003366:	f104 0919 	add.w	r9, r4, #25
 800336a:	e7f5      	b.n	8003358 <_printf_i+0x1f8>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1ac      	bne.n	80032ca <_printf_i+0x16a>
 8003370:	7803      	ldrb	r3, [r0, #0]
 8003372:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003376:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800337a:	e76c      	b.n	8003256 <_printf_i+0xf6>
 800337c:	08003625 	.word	0x08003625
 8003380:	08003636 	.word	0x08003636

08003384 <memchr>:
 8003384:	b510      	push	{r4, lr}
 8003386:	b2c9      	uxtb	r1, r1
 8003388:	4402      	add	r2, r0
 800338a:	4290      	cmp	r0, r2
 800338c:	4603      	mov	r3, r0
 800338e:	d101      	bne.n	8003394 <memchr+0x10>
 8003390:	2300      	movs	r3, #0
 8003392:	e003      	b.n	800339c <memchr+0x18>
 8003394:	781c      	ldrb	r4, [r3, #0]
 8003396:	3001      	adds	r0, #1
 8003398:	428c      	cmp	r4, r1
 800339a:	d1f6      	bne.n	800338a <memchr+0x6>
 800339c:	4618      	mov	r0, r3
 800339e:	bd10      	pop	{r4, pc}

080033a0 <memcpy>:
 80033a0:	b510      	push	{r4, lr}
 80033a2:	1e43      	subs	r3, r0, #1
 80033a4:	440a      	add	r2, r1
 80033a6:	4291      	cmp	r1, r2
 80033a8:	d100      	bne.n	80033ac <memcpy+0xc>
 80033aa:	bd10      	pop	{r4, pc}
 80033ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033b4:	e7f7      	b.n	80033a6 <memcpy+0x6>

080033b6 <memmove>:
 80033b6:	4288      	cmp	r0, r1
 80033b8:	b510      	push	{r4, lr}
 80033ba:	eb01 0302 	add.w	r3, r1, r2
 80033be:	d807      	bhi.n	80033d0 <memmove+0x1a>
 80033c0:	1e42      	subs	r2, r0, #1
 80033c2:	4299      	cmp	r1, r3
 80033c4:	d00a      	beq.n	80033dc <memmove+0x26>
 80033c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80033ce:	e7f8      	b.n	80033c2 <memmove+0xc>
 80033d0:	4283      	cmp	r3, r0
 80033d2:	d9f5      	bls.n	80033c0 <memmove+0xa>
 80033d4:	1881      	adds	r1, r0, r2
 80033d6:	1ad2      	subs	r2, r2, r3
 80033d8:	42d3      	cmn	r3, r2
 80033da:	d100      	bne.n	80033de <memmove+0x28>
 80033dc:	bd10      	pop	{r4, pc}
 80033de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80033e6:	e7f7      	b.n	80033d8 <memmove+0x22>

080033e8 <_free_r>:
 80033e8:	b538      	push	{r3, r4, r5, lr}
 80033ea:	4605      	mov	r5, r0
 80033ec:	2900      	cmp	r1, #0
 80033ee:	d043      	beq.n	8003478 <_free_r+0x90>
 80033f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033f4:	1f0c      	subs	r4, r1, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bfb8      	it	lt
 80033fa:	18e4      	addlt	r4, r4, r3
 80033fc:	f000 f8d0 	bl	80035a0 <__malloc_lock>
 8003400:	4a1e      	ldr	r2, [pc, #120]	; (800347c <_free_r+0x94>)
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	4610      	mov	r0, r2
 8003406:	b933      	cbnz	r3, 8003416 <_free_r+0x2e>
 8003408:	6063      	str	r3, [r4, #4]
 800340a:	6014      	str	r4, [r2, #0]
 800340c:	4628      	mov	r0, r5
 800340e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003412:	f000 b8c6 	b.w	80035a2 <__malloc_unlock>
 8003416:	42a3      	cmp	r3, r4
 8003418:	d90b      	bls.n	8003432 <_free_r+0x4a>
 800341a:	6821      	ldr	r1, [r4, #0]
 800341c:	1862      	adds	r2, r4, r1
 800341e:	4293      	cmp	r3, r2
 8003420:	bf01      	itttt	eq
 8003422:	681a      	ldreq	r2, [r3, #0]
 8003424:	685b      	ldreq	r3, [r3, #4]
 8003426:	1852      	addeq	r2, r2, r1
 8003428:	6022      	streq	r2, [r4, #0]
 800342a:	6063      	str	r3, [r4, #4]
 800342c:	6004      	str	r4, [r0, #0]
 800342e:	e7ed      	b.n	800340c <_free_r+0x24>
 8003430:	4613      	mov	r3, r2
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	b10a      	cbz	r2, 800343a <_free_r+0x52>
 8003436:	42a2      	cmp	r2, r4
 8003438:	d9fa      	bls.n	8003430 <_free_r+0x48>
 800343a:	6819      	ldr	r1, [r3, #0]
 800343c:	1858      	adds	r0, r3, r1
 800343e:	42a0      	cmp	r0, r4
 8003440:	d10b      	bne.n	800345a <_free_r+0x72>
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	4401      	add	r1, r0
 8003446:	1858      	adds	r0, r3, r1
 8003448:	4282      	cmp	r2, r0
 800344a:	6019      	str	r1, [r3, #0]
 800344c:	d1de      	bne.n	800340c <_free_r+0x24>
 800344e:	6810      	ldr	r0, [r2, #0]
 8003450:	6852      	ldr	r2, [r2, #4]
 8003452:	4401      	add	r1, r0
 8003454:	6019      	str	r1, [r3, #0]
 8003456:	605a      	str	r2, [r3, #4]
 8003458:	e7d8      	b.n	800340c <_free_r+0x24>
 800345a:	d902      	bls.n	8003462 <_free_r+0x7a>
 800345c:	230c      	movs	r3, #12
 800345e:	602b      	str	r3, [r5, #0]
 8003460:	e7d4      	b.n	800340c <_free_r+0x24>
 8003462:	6820      	ldr	r0, [r4, #0]
 8003464:	1821      	adds	r1, r4, r0
 8003466:	428a      	cmp	r2, r1
 8003468:	bf01      	itttt	eq
 800346a:	6811      	ldreq	r1, [r2, #0]
 800346c:	6852      	ldreq	r2, [r2, #4]
 800346e:	1809      	addeq	r1, r1, r0
 8003470:	6021      	streq	r1, [r4, #0]
 8003472:	6062      	str	r2, [r4, #4]
 8003474:	605c      	str	r4, [r3, #4]
 8003476:	e7c9      	b.n	800340c <_free_r+0x24>
 8003478:	bd38      	pop	{r3, r4, r5, pc}
 800347a:	bf00      	nop
 800347c:	20000090 	.word	0x20000090

08003480 <_malloc_r>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	1ccd      	adds	r5, r1, #3
 8003484:	f025 0503 	bic.w	r5, r5, #3
 8003488:	3508      	adds	r5, #8
 800348a:	2d0c      	cmp	r5, #12
 800348c:	bf38      	it	cc
 800348e:	250c      	movcc	r5, #12
 8003490:	2d00      	cmp	r5, #0
 8003492:	4606      	mov	r6, r0
 8003494:	db01      	blt.n	800349a <_malloc_r+0x1a>
 8003496:	42a9      	cmp	r1, r5
 8003498:	d903      	bls.n	80034a2 <_malloc_r+0x22>
 800349a:	230c      	movs	r3, #12
 800349c:	6033      	str	r3, [r6, #0]
 800349e:	2000      	movs	r0, #0
 80034a0:	bd70      	pop	{r4, r5, r6, pc}
 80034a2:	f000 f87d 	bl	80035a0 <__malloc_lock>
 80034a6:	4a21      	ldr	r2, [pc, #132]	; (800352c <_malloc_r+0xac>)
 80034a8:	6814      	ldr	r4, [r2, #0]
 80034aa:	4621      	mov	r1, r4
 80034ac:	b991      	cbnz	r1, 80034d4 <_malloc_r+0x54>
 80034ae:	4c20      	ldr	r4, [pc, #128]	; (8003530 <_malloc_r+0xb0>)
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	b91b      	cbnz	r3, 80034bc <_malloc_r+0x3c>
 80034b4:	4630      	mov	r0, r6
 80034b6:	f000 f863 	bl	8003580 <_sbrk_r>
 80034ba:	6020      	str	r0, [r4, #0]
 80034bc:	4629      	mov	r1, r5
 80034be:	4630      	mov	r0, r6
 80034c0:	f000 f85e 	bl	8003580 <_sbrk_r>
 80034c4:	1c43      	adds	r3, r0, #1
 80034c6:	d124      	bne.n	8003512 <_malloc_r+0x92>
 80034c8:	230c      	movs	r3, #12
 80034ca:	4630      	mov	r0, r6
 80034cc:	6033      	str	r3, [r6, #0]
 80034ce:	f000 f868 	bl	80035a2 <__malloc_unlock>
 80034d2:	e7e4      	b.n	800349e <_malloc_r+0x1e>
 80034d4:	680b      	ldr	r3, [r1, #0]
 80034d6:	1b5b      	subs	r3, r3, r5
 80034d8:	d418      	bmi.n	800350c <_malloc_r+0x8c>
 80034da:	2b0b      	cmp	r3, #11
 80034dc:	d90f      	bls.n	80034fe <_malloc_r+0x7e>
 80034de:	600b      	str	r3, [r1, #0]
 80034e0:	18cc      	adds	r4, r1, r3
 80034e2:	50cd      	str	r5, [r1, r3]
 80034e4:	4630      	mov	r0, r6
 80034e6:	f000 f85c 	bl	80035a2 <__malloc_unlock>
 80034ea:	f104 000b 	add.w	r0, r4, #11
 80034ee:	1d23      	adds	r3, r4, #4
 80034f0:	f020 0007 	bic.w	r0, r0, #7
 80034f4:	1ac3      	subs	r3, r0, r3
 80034f6:	d0d3      	beq.n	80034a0 <_malloc_r+0x20>
 80034f8:	425a      	negs	r2, r3
 80034fa:	50e2      	str	r2, [r4, r3]
 80034fc:	e7d0      	b.n	80034a0 <_malloc_r+0x20>
 80034fe:	684b      	ldr	r3, [r1, #4]
 8003500:	428c      	cmp	r4, r1
 8003502:	bf16      	itet	ne
 8003504:	6063      	strne	r3, [r4, #4]
 8003506:	6013      	streq	r3, [r2, #0]
 8003508:	460c      	movne	r4, r1
 800350a:	e7eb      	b.n	80034e4 <_malloc_r+0x64>
 800350c:	460c      	mov	r4, r1
 800350e:	6849      	ldr	r1, [r1, #4]
 8003510:	e7cc      	b.n	80034ac <_malloc_r+0x2c>
 8003512:	1cc4      	adds	r4, r0, #3
 8003514:	f024 0403 	bic.w	r4, r4, #3
 8003518:	42a0      	cmp	r0, r4
 800351a:	d005      	beq.n	8003528 <_malloc_r+0xa8>
 800351c:	1a21      	subs	r1, r4, r0
 800351e:	4630      	mov	r0, r6
 8003520:	f000 f82e 	bl	8003580 <_sbrk_r>
 8003524:	3001      	adds	r0, #1
 8003526:	d0cf      	beq.n	80034c8 <_malloc_r+0x48>
 8003528:	6025      	str	r5, [r4, #0]
 800352a:	e7db      	b.n	80034e4 <_malloc_r+0x64>
 800352c:	20000090 	.word	0x20000090
 8003530:	20000094 	.word	0x20000094

08003534 <_realloc_r>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	4607      	mov	r7, r0
 8003538:	4614      	mov	r4, r2
 800353a:	460e      	mov	r6, r1
 800353c:	b921      	cbnz	r1, 8003548 <_realloc_r+0x14>
 800353e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003542:	4611      	mov	r1, r2
 8003544:	f7ff bf9c 	b.w	8003480 <_malloc_r>
 8003548:	b922      	cbnz	r2, 8003554 <_realloc_r+0x20>
 800354a:	f7ff ff4d 	bl	80033e8 <_free_r>
 800354e:	4625      	mov	r5, r4
 8003550:	4628      	mov	r0, r5
 8003552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003554:	f000 f826 	bl	80035a4 <_malloc_usable_size_r>
 8003558:	42a0      	cmp	r0, r4
 800355a:	d20f      	bcs.n	800357c <_realloc_r+0x48>
 800355c:	4621      	mov	r1, r4
 800355e:	4638      	mov	r0, r7
 8003560:	f7ff ff8e 	bl	8003480 <_malloc_r>
 8003564:	4605      	mov	r5, r0
 8003566:	2800      	cmp	r0, #0
 8003568:	d0f2      	beq.n	8003550 <_realloc_r+0x1c>
 800356a:	4631      	mov	r1, r6
 800356c:	4622      	mov	r2, r4
 800356e:	f7ff ff17 	bl	80033a0 <memcpy>
 8003572:	4631      	mov	r1, r6
 8003574:	4638      	mov	r0, r7
 8003576:	f7ff ff37 	bl	80033e8 <_free_r>
 800357a:	e7e9      	b.n	8003550 <_realloc_r+0x1c>
 800357c:	4635      	mov	r5, r6
 800357e:	e7e7      	b.n	8003550 <_realloc_r+0x1c>

08003580 <_sbrk_r>:
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	2300      	movs	r3, #0
 8003584:	4c05      	ldr	r4, [pc, #20]	; (800359c <_sbrk_r+0x1c>)
 8003586:	4605      	mov	r5, r0
 8003588:	4608      	mov	r0, r1
 800358a:	6023      	str	r3, [r4, #0]
 800358c:	f7fd f9a2 	bl	80008d4 <_sbrk>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	d102      	bne.n	800359a <_sbrk_r+0x1a>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	b103      	cbz	r3, 800359a <_sbrk_r+0x1a>
 8003598:	602b      	str	r3, [r5, #0]
 800359a:	bd38      	pop	{r3, r4, r5, pc}
 800359c:	200001bc 	.word	0x200001bc

080035a0 <__malloc_lock>:
 80035a0:	4770      	bx	lr

080035a2 <__malloc_unlock>:
 80035a2:	4770      	bx	lr

080035a4 <_malloc_usable_size_r>:
 80035a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035a8:	1f18      	subs	r0, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bfbc      	itt	lt
 80035ae:	580b      	ldrlt	r3, [r1, r0]
 80035b0:	18c0      	addlt	r0, r0, r3
 80035b2:	4770      	bx	lr

080035b4 <_init>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	bf00      	nop
 80035b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ba:	bc08      	pop	{r3}
 80035bc:	469e      	mov	lr, r3
 80035be:	4770      	bx	lr

080035c0 <_fini>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	bf00      	nop
 80035c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c6:	bc08      	pop	{r3}
 80035c8:	469e      	mov	lr, r3
 80035ca:	4770      	bx	lr
