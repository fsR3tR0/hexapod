
servo_motortest_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b94  08002b94  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002b94  08002b94  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b94  08002b94  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b98  08002b98  00012b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000010  08002bac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08002bac  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8c8  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018e0  00000000  00000000  0002b901  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  0002d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002db68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000179fe  00000000  00000000  0002e420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000083e2  00000000  00000000  00045e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000881b3  00000000  00000000  0004e200  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d63b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002680  00000000  00000000  000d6430  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b58 	.word	0x08002b58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002b58 	.word	0x08002b58

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b34      	ldr	r3, [pc, #208]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a33      	ldr	r2, [pc, #204]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b31      	ldr	r3, [pc, #196]	; (8000234 <MX_GPIO_Init+0xe8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b2e      	ldr	r3, [pc, #184]	; (8000234 <MX_GPIO_Init+0xe8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a2d      	ldr	r2, [pc, #180]	; (8000234 <MX_GPIO_Init+0xe8>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b2b      	ldr	r3, [pc, #172]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b28      	ldr	r3, [pc, #160]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a27      	ldr	r2, [pc, #156]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b25      	ldr	r3, [pc, #148]	; (8000234 <MX_GPIO_Init+0xe8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b22      	ldr	r3, [pc, #136]	; (8000234 <MX_GPIO_Init+0xe8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a21      	ldr	r2, [pc, #132]	; (8000234 <MX_GPIO_Init+0xe8>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b1f      	ldr	r3, [pc, #124]	; (8000234 <MX_GPIO_Init+0xe8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_panel_GPIO_Port, led_panel_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	481c      	ldr	r0, [pc, #112]	; (8000238 <MX_GPIO_Init+0xec>)
 80001c8:	f001 f8da 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80001d2:	481a      	ldr	r0, [pc, #104]	; (800023c <MX_GPIO_Init+0xf0>)
 80001d4:	f001 f8d4 	bl	8001380 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_panel_Pin;
 80001d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2301      	movs	r3, #1
 80001e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_panel_GPIO_Port, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	4811      	ldr	r0, [pc, #68]	; (8000238 <MX_GPIO_Init+0xec>)
 80001f2:	f000 ff6b 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80001f6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80001fa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fc:	2301      	movs	r3, #1
 80001fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000200:	2300      	movs	r3, #0
 8000202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000204:	2302      	movs	r3, #2
 8000206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	480b      	ldr	r0, [pc, #44]	; (800023c <MX_GPIO_Init+0xf0>)
 8000210:	f000 ff5c 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000214:	2330      	movs	r3, #48	; 0x30
 8000216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021c:	2300      	movs	r3, #0
 800021e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <MX_GPIO_Init+0xf0>)
 8000228:	f000 ff50 	bl	80010cc <HAL_GPIO_Init>

}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40021000 	.word	0x40021000
 8000238:	40011000 	.word	0x40011000
 800023c:	40010c00 	.word	0x40010c00

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f000 fdaf 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f8eb 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f7ff ff7d 	bl	800014c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000252:	f000 f9bb 	bl	80005cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000256:	f000 fa7f 	bl	8000758 <MX_TIM2_Init>
  MX_TIM3_Init();
 800025a:	f000 fb15 	bl	8000888 <MX_TIM3_Init>
  MX_TIM4_Init();
 800025e:	f000 fbab 	bl	80009b8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000262:	2100      	movs	r1, #0
 8000264:	486a      	ldr	r0, [pc, #424]	; (8000410 <main+0x1d0>)
 8000266:	f001 fda1 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800026a:	2104      	movs	r1, #4
 800026c:	4868      	ldr	r0, [pc, #416]	; (8000410 <main+0x1d0>)
 800026e:	f001 fd9d 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000272:	2108      	movs	r1, #8
 8000274:	4866      	ldr	r0, [pc, #408]	; (8000410 <main+0x1d0>)
 8000276:	f001 fd99 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800027a:	210c      	movs	r1, #12
 800027c:	4864      	ldr	r0, [pc, #400]	; (8000410 <main+0x1d0>)
 800027e:	f001 fd95 	bl	8001dac <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000282:	2100      	movs	r1, #0
 8000284:	4863      	ldr	r0, [pc, #396]	; (8000414 <main+0x1d4>)
 8000286:	f001 fd91 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800028a:	2104      	movs	r1, #4
 800028c:	4861      	ldr	r0, [pc, #388]	; (8000414 <main+0x1d4>)
 800028e:	f001 fd8d 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000292:	2108      	movs	r1, #8
 8000294:	485f      	ldr	r0, [pc, #380]	; (8000414 <main+0x1d4>)
 8000296:	f001 fd89 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800029a:	210c      	movs	r1, #12
 800029c:	485d      	ldr	r0, [pc, #372]	; (8000414 <main+0x1d4>)
 800029e:	f001 fd85 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80002a2:	485c      	ldr	r0, [pc, #368]	; (8000414 <main+0x1d4>)
 80002a4:	f001 fcd8 	bl	8001c58 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002a8:	2100      	movs	r1, #0
 80002aa:	485b      	ldr	r0, [pc, #364]	; (8000418 <main+0x1d8>)
 80002ac:	f001 fd7e 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002b0:	2104      	movs	r1, #4
 80002b2:	4859      	ldr	r0, [pc, #356]	; (8000418 <main+0x1d8>)
 80002b4:	f001 fd7a 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80002b8:	2108      	movs	r1, #8
 80002ba:	4857      	ldr	r0, [pc, #348]	; (8000418 <main+0x1d8>)
 80002bc:	f001 fd76 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80002c0:	210c      	movs	r1, #12
 80002c2:	4855      	ldr	r0, [pc, #340]	; (8000418 <main+0x1d8>)
 80002c4:	f001 fd72 	bl	8001dac <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80002c8:	2100      	movs	r1, #0
 80002ca:	4854      	ldr	r0, [pc, #336]	; (800041c <main+0x1dc>)
 80002cc:	f001 fd6e 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80002d0:	2104      	movs	r1, #4
 80002d2:	4852      	ldr	r0, [pc, #328]	; (800041c <main+0x1dc>)
 80002d4:	f001 fd6a 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80002d8:	2108      	movs	r1, #8
 80002da:	4850      	ldr	r0, [pc, #320]	; (800041c <main+0x1dc>)
 80002dc:	f001 fd66 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80002e0:	210c      	movs	r1, #12
 80002e2:	484e      	ldr	r0, [pc, #312]	; (800041c <main+0x1dc>)
 80002e4:	f001 fd62 	bl	8001dac <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(u8 i = 25; i <= 125; i += 25){
 80002e8:	2319      	movs	r3, #25
 80002ea:	71fb      	strb	r3, [r7, #7]
 80002ec:	e082      	b.n	80003f4 <main+0x1b4>
		  htim1.Instance -> CCR1 = i;
 80002ee:	4b48      	ldr	r3, [pc, #288]	; (8000410 <main+0x1d0>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	79fa      	ldrb	r2, [r7, #7]
 80002f4:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(500);
 80002f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fa:	f000 fdb7 	bl	8000e6c <HAL_Delay>
		  htim1.Instance -> CCR2 = i;
 80002fe:	4b44      	ldr	r3, [pc, #272]	; (8000410 <main+0x1d0>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	79fa      	ldrb	r2, [r7, #7]
 8000304:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_Delay(500);
 8000306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800030a:	f000 fdaf 	bl	8000e6c <HAL_Delay>
		  htim1.Instance -> CCR3 = i;
 800030e:	4b40      	ldr	r3, [pc, #256]	; (8000410 <main+0x1d0>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	79fa      	ldrb	r2, [r7, #7]
 8000314:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(500);
 8000316:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800031a:	f000 fda7 	bl	8000e6c <HAL_Delay>
		  htim1.Instance -> CCR4 = i;
 800031e:	4b3c      	ldr	r3, [pc, #240]	; (8000410 <main+0x1d0>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	79fa      	ldrb	r2, [r7, #7]
 8000324:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(500);
 8000326:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032a:	f000 fd9f 	bl	8000e6c <HAL_Delay>
		  htim2.Instance -> CCR1 = i;
 800032e:	4b39      	ldr	r3, [pc, #228]	; (8000414 <main+0x1d4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	79fa      	ldrb	r2, [r7, #7]
 8000334:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(500);
 8000336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800033a:	f000 fd97 	bl	8000e6c <HAL_Delay>
		  htim2.Instance -> CCR2 = i;
 800033e:	4b35      	ldr	r3, [pc, #212]	; (8000414 <main+0x1d4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	79fa      	ldrb	r2, [r7, #7]
 8000344:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_Delay(500);
 8000346:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800034a:	f000 fd8f 	bl	8000e6c <HAL_Delay>
		  htim2.Instance -> CCR3 = i;
 800034e:	4b31      	ldr	r3, [pc, #196]	; (8000414 <main+0x1d4>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	79fa      	ldrb	r2, [r7, #7]
 8000354:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(500);
 8000356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800035a:	f000 fd87 	bl	8000e6c <HAL_Delay>
		  htim2.Instance -> CCR4 = i;
 800035e:	4b2d      	ldr	r3, [pc, #180]	; (8000414 <main+0x1d4>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	79fa      	ldrb	r2, [r7, #7]
 8000364:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(500);
 8000366:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800036a:	f000 fd7f 	bl	8000e6c <HAL_Delay>
		  htim3.Instance -> CCR1 = i;
 800036e:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <main+0x1d8>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	79fa      	ldrb	r2, [r7, #7]
 8000374:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(500);
 8000376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800037a:	f000 fd77 	bl	8000e6c <HAL_Delay>
		  htim3.Instance -> CCR2 = i;
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <main+0x1d8>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	79fa      	ldrb	r2, [r7, #7]
 8000384:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_Delay(500);
 8000386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800038a:	f000 fd6f 	bl	8000e6c <HAL_Delay>
		  htim3.Instance -> CCR3 = i;
 800038e:	4b22      	ldr	r3, [pc, #136]	; (8000418 <main+0x1d8>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	79fa      	ldrb	r2, [r7, #7]
 8000394:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(500);
 8000396:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800039a:	f000 fd67 	bl	8000e6c <HAL_Delay>
		  htim3.Instance -> CCR4 = i;
 800039e:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <main+0x1d8>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	79fa      	ldrb	r2, [r7, #7]
 80003a4:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(500);
 80003a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003aa:	f000 fd5f 	bl	8000e6c <HAL_Delay>
		  htim4.Instance -> CCR1 = i;
 80003ae:	4b1b      	ldr	r3, [pc, #108]	; (800041c <main+0x1dc>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	79fa      	ldrb	r2, [r7, #7]
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(500);
 80003b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ba:	f000 fd57 	bl	8000e6c <HAL_Delay>
		  htim4.Instance -> CCR2 = i;
 80003be:	4b17      	ldr	r3, [pc, #92]	; (800041c <main+0x1dc>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	79fa      	ldrb	r2, [r7, #7]
 80003c4:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_Delay(500);
 80003c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ca:	f000 fd4f 	bl	8000e6c <HAL_Delay>
		  htim4.Instance -> CCR3 = i;
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <main+0x1dc>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	79fa      	ldrb	r2, [r7, #7]
 80003d4:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(500);
 80003d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003da:	f000 fd47 	bl	8000e6c <HAL_Delay>
		  htim4.Instance -> CCR4 = i;
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <main+0x1dc>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	79fa      	ldrb	r2, [r7, #7]
 80003e4:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(500);
 80003e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ea:	f000 fd3f 	bl	8000e6c <HAL_Delay>
	  for(u8 i = 25; i <= 125; i += 25){
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	3319      	adds	r3, #25
 80003f2:	71fb      	strb	r3, [r7, #7]
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	2b7d      	cmp	r3, #125	; 0x7d
 80003f8:	f67f af79 	bls.w	80002ee <main+0xae>

	  }

	  HAL_GPIO_TogglePin(led_panel_GPIO_Port, led_panel_Pin);
 80003fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000400:	4807      	ldr	r0, [pc, #28]	; (8000420 <main+0x1e0>)
 8000402:	f000 ffd5 	bl	80013b0 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000406:	20c8      	movs	r0, #200	; 0xc8
 8000408:	f000 fd30 	bl	8000e6c <HAL_Delay>
	  for(u8 i = 25; i <= 125; i += 25){
 800040c:	e76c      	b.n	80002e8 <main+0xa8>
 800040e:	bf00      	nop
 8000410:	200000bc 	.word	0x200000bc
 8000414:	20000104 	.word	0x20000104
 8000418:	20000074 	.word	0x20000074
 800041c:	2000002c 	.word	0x2000002c
 8000420:	40011000 	.word	0x40011000

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b090      	sub	sp, #64	; 0x40
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0318 	add.w	r3, r7, #24
 800042e:	2228      	movs	r2, #40	; 0x28
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f002 fb88 	bl	8002b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000446:	2302      	movs	r3, #2
 8000448:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044a:	2301      	movs	r3, #1
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044e:	2310      	movs	r3, #16
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000452:	2302      	movs	r3, #2
 8000454:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000456:	2300      	movs	r3, #0
 8000458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800045a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800045e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	4618      	mov	r0, r3
 8000466:	f000 ffbd 	bl	80013e4 <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000470:	f000 f83e 	bl	80004f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2302      	movs	r3, #2
 800047a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f001 fa29 	bl	80018e4 <HAL_RCC_ClockConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000498:	f000 f82a 	bl	80004f0 <Error_Handler>
  }
}
 800049c:	bf00      	nop
 800049e:	3740      	adds	r7, #64	; 0x40
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004b4:	d114      	bne.n	80004e0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if(i == 0){
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d108      	bne.n	80004d2 <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_GPIO_TogglePin(led_panel_GPIO_Port, led_panel_Pin);
 80004c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c4:	4809      	ldr	r0, [pc, #36]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80004c6:	f000 ff73 	bl	80013b0 <HAL_GPIO_TogglePin>
			i = 50;
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004cc:	2232      	movs	r2, #50	; 0x32
 80004ce:	701a      	strb	r2, [r3, #0]
		}else{
			i--;
		}
	}
}
 80004d0:	e006      	b.n	80004e0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			i--;
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	3b01      	subs	r3, #1
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004de:	701a      	strb	r2, [r3, #0]
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000000 	.word	0x20000000
 80004ec:	40011000 	.word	0x40011000

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <Error_Handler+0x6>

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a14      	ldr	r2, [pc, #80]	; (8000554 <HAL_MspInit+0x5c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_MspInit+0x5c>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_MspInit+0x5c>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x5c>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_MspInit+0x60>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_MspInit+0x60>)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000
 8000558:	40010000 	.word	0x40010000

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <NMI_Handler+0x4>

08000562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <MemManage_Handler+0x4>

0800056e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <UsageFault_Handler+0x4>

0800057a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a2:	f000 fc47 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <TIM2_IRQHandler+0x10>)
 80005b2:	f001 fc9d 	bl	8001ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000104 	.word	0x20000104

080005c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	; 0x58
 80005d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fa9f 	bl	8002b48 <memset>

  htim1.Instance = TIM1;
 800060a:	4b51      	ldr	r3, [pc, #324]	; (8000750 <MX_TIM1_Init+0x184>)
 800060c:	4a51      	ldr	r2, [pc, #324]	; (8000754 <MX_TIM1_Init+0x188>)
 800060e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 319;
 8000610:	4b4f      	ldr	r3, [pc, #316]	; (8000750 <MX_TIM1_Init+0x184>)
 8000612:	f240 123f 	movw	r2, #319	; 0x13f
 8000616:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000618:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <MX_TIM1_Init+0x184>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <MX_TIM1_Init+0x184>)
 8000620:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000624:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b4a      	ldr	r3, [pc, #296]	; (8000750 <MX_TIM1_Init+0x184>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800062c:	4b48      	ldr	r3, [pc, #288]	; (8000750 <MX_TIM1_Init+0x184>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000632:	4b47      	ldr	r3, [pc, #284]	; (8000750 <MX_TIM1_Init+0x184>)
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000638:	4845      	ldr	r0, [pc, #276]	; (8000750 <MX_TIM1_Init+0x184>)
 800063a:	f001 fabd 	bl	8001bb8 <HAL_TIM_Base_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000644:	f7ff ff54 	bl	80004f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800064e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000652:	4619      	mov	r1, r3
 8000654:	483e      	ldr	r0, [pc, #248]	; (8000750 <MX_TIM1_Init+0x184>)
 8000656:	f001 fe11 	bl	800227c <HAL_TIM_ConfigClockSource>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000660:	f7ff ff46 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000664:	483a      	ldr	r0, [pc, #232]	; (8000750 <MX_TIM1_Init+0x184>)
 8000666:	f001 fb49 	bl	8001cfc <HAL_TIM_PWM_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000670:	f7ff ff3e 	bl	80004f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000674:	2300      	movs	r3, #0
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800067c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000680:	4619      	mov	r1, r3
 8000682:	4833      	ldr	r0, [pc, #204]	; (8000750 <MX_TIM1_Init+0x184>)
 8000684:	f002 f97a 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800068e:	f7ff ff2f 	bl	80004f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000692:	2360      	movs	r3, #96	; 0x60
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800069a:	2300      	movs	r3, #0
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800069e:	2300      	movs	r3, #0
 80006a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006aa:	2300      	movs	r3, #0
 80006ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	4826      	ldr	r0, [pc, #152]	; (8000750 <MX_TIM1_Init+0x184>)
 80006b8:	f001 fd22 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80006c2:	f7ff ff15 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	2204      	movs	r2, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4820      	ldr	r0, [pc, #128]	; (8000750 <MX_TIM1_Init+0x184>)
 80006d0:	f001 fd16 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80006da:	f7ff ff09 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	2208      	movs	r2, #8
 80006e4:	4619      	mov	r1, r3
 80006e6:	481a      	ldr	r0, [pc, #104]	; (8000750 <MX_TIM1_Init+0x184>)
 80006e8:	f001 fd0a 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80006f2:	f7ff fefd 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	220c      	movs	r2, #12
 80006fc:	4619      	mov	r1, r3
 80006fe:	4814      	ldr	r0, [pc, #80]	; (8000750 <MX_TIM1_Init+0x184>)
 8000700:	f001 fcfe 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800070a:	f7ff fef1 	bl	80004f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	4619      	mov	r1, r3
 8000730:	4807      	ldr	r0, [pc, #28]	; (8000750 <MX_TIM1_Init+0x184>)
 8000732:	f002 f981 	bl	8002a38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 800073c:	f7ff fed8 	bl	80004f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <MX_TIM1_Init+0x184>)
 8000742:	f000 fa31 	bl	8000ba8 <HAL_TIM_MspPostInit>

}
 8000746:	bf00      	nop
 8000748:	3758      	adds	r7, #88	; 0x58
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000bc 	.word	0x200000bc
 8000754:	40012c00 	.word	0x40012c00

08000758 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08e      	sub	sp, #56	; 0x38
 800075c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]
 8000786:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000788:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <MX_TIM2_Init+0x12c>)
 800078a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 8000790:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <MX_TIM2_Init+0x12c>)
 8000792:	f240 123f 	movw	r2, #319	; 0x13f
 8000796:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000798:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <MX_TIM2_Init+0x12c>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800079e:	4b39      	ldr	r3, [pc, #228]	; (8000884 <MX_TIM2_Init+0x12c>)
 80007a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <MX_TIM2_Init+0x12c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ac:	4b35      	ldr	r3, [pc, #212]	; (8000884 <MX_TIM2_Init+0x12c>)
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b2:	4834      	ldr	r0, [pc, #208]	; (8000884 <MX_TIM2_Init+0x12c>)
 80007b4:	f001 fa00 	bl	8001bb8 <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007be:	f7ff fe97 	bl	80004f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007cc:	4619      	mov	r1, r3
 80007ce:	482d      	ldr	r0, [pc, #180]	; (8000884 <MX_TIM2_Init+0x12c>)
 80007d0:	f001 fd54 	bl	800227c <HAL_TIM_ConfigClockSource>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80007da:	f7ff fe89 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007de:	4829      	ldr	r0, [pc, #164]	; (8000884 <MX_TIM2_Init+0x12c>)
 80007e0:	f001 fa8c 	bl	8001cfc <HAL_TIM_PWM_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80007ea:	f7ff fe81 	bl	80004f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	4619      	mov	r1, r3
 80007fc:	4821      	ldr	r0, [pc, #132]	; (8000884 <MX_TIM2_Init+0x12c>)
 80007fe:	f002 f8bd 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000808:	f7ff fe72 	bl	80004f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080c:	2360      	movs	r3, #96	; 0x60
 800080e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_TIM2_Init+0x12c>)
 8000824:	f001 fc6c 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800082e:	f7ff fe5f 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2204      	movs	r2, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4812      	ldr	r0, [pc, #72]	; (8000884 <MX_TIM2_Init+0x12c>)
 800083a:	f001 fc61 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000844:	f7ff fe54 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2208      	movs	r2, #8
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_TIM2_Init+0x12c>)
 8000850:	f001 fc56 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800085a:	f7ff fe49 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	220c      	movs	r2, #12
 8000862:	4619      	mov	r1, r3
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <MX_TIM2_Init+0x12c>)
 8000866:	f001 fc4b 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000870:	f7ff fe3e 	bl	80004f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <MX_TIM2_Init+0x12c>)
 8000876:	f000 f997 	bl	8000ba8 <HAL_TIM_MspPostInit>

}
 800087a:	bf00      	nop
 800087c:	3738      	adds	r7, #56	; 0x38
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000104 	.word	0x20000104

08000888 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	; 0x38
 800088c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80008b8:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <MX_TIM3_Init+0x128>)
 80008ba:	4a3e      	ldr	r2, [pc, #248]	; (80009b4 <MX_TIM3_Init+0x12c>)
 80008bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 80008be:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <MX_TIM3_Init+0x128>)
 80008c0:	f240 123f 	movw	r2, #319	; 0x13f
 80008c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <MX_TIM3_Init+0x128>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80008cc:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <MX_TIM3_Init+0x128>)
 80008ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <MX_TIM3_Init+0x128>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <MX_TIM3_Init+0x128>)
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e0:	4833      	ldr	r0, [pc, #204]	; (80009b0 <MX_TIM3_Init+0x128>)
 80008e2:	f001 f969 	bl	8001bb8 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80008ec:	f7ff fe00 	bl	80004f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fa:	4619      	mov	r1, r3
 80008fc:	482c      	ldr	r0, [pc, #176]	; (80009b0 <MX_TIM3_Init+0x128>)
 80008fe:	f001 fcbd 	bl	800227c <HAL_TIM_ConfigClockSource>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000908:	f7ff fdf2 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800090c:	4828      	ldr	r0, [pc, #160]	; (80009b0 <MX_TIM3_Init+0x128>)
 800090e:	f001 f9f5 	bl	8001cfc <HAL_TIM_PWM_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000918:	f7ff fdea 	bl	80004f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000924:	f107 0320 	add.w	r3, r7, #32
 8000928:	4619      	mov	r1, r3
 800092a:	4821      	ldr	r0, [pc, #132]	; (80009b0 <MX_TIM3_Init+0x128>)
 800092c:	f002 f826 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000936:	f7ff fddb 	bl	80004f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093a:	2360      	movs	r3, #96	; 0x60
 800093c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	4817      	ldr	r0, [pc, #92]	; (80009b0 <MX_TIM3_Init+0x128>)
 8000952:	f001 fbd5 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800095c:	f7ff fdc8 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2204      	movs	r2, #4
 8000964:	4619      	mov	r1, r3
 8000966:	4812      	ldr	r0, [pc, #72]	; (80009b0 <MX_TIM3_Init+0x128>)
 8000968:	f001 fbca 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000972:	f7ff fdbd 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2208      	movs	r2, #8
 800097a:	4619      	mov	r1, r3
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_TIM3_Init+0x128>)
 800097e:	f001 fbbf 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000988:	f7ff fdb2 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	220c      	movs	r2, #12
 8000990:	4619      	mov	r1, r3
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <MX_TIM3_Init+0x128>)
 8000994:	f001 fbb4 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800099e:	f7ff fda7 	bl	80004f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <MX_TIM3_Init+0x128>)
 80009a4:	f000 f900 	bl	8000ba8 <HAL_TIM_MspPostInit>

}
 80009a8:	bf00      	nop
 80009aa:	3738      	adds	r7, #56	; 0x38
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000074 	.word	0x20000074
 80009b4:	40000400 	.word	0x40000400

080009b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	; 0x38
 80009bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80009e8:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <MX_TIM4_Init+0x128>)
 80009ea:	4a3e      	ldr	r2, [pc, #248]	; (8000ae4 <MX_TIM4_Init+0x12c>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 319;
 80009ee:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <MX_TIM4_Init+0x128>)
 80009f0:	f240 123f 	movw	r2, #319	; 0x13f
 80009f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <MX_TIM4_Init+0x128>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80009fc:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <MX_TIM4_Init+0x128>)
 80009fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <MX_TIM4_Init+0x128>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <MX_TIM4_Init+0x128>)
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a10:	4833      	ldr	r0, [pc, #204]	; (8000ae0 <MX_TIM4_Init+0x128>)
 8000a12:	f001 f8d1 	bl	8001bb8 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a1c:	f7ff fd68 	bl	80004f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	482c      	ldr	r0, [pc, #176]	; (8000ae0 <MX_TIM4_Init+0x128>)
 8000a2e:	f001 fc25 	bl	800227c <HAL_TIM_ConfigClockSource>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a38:	f7ff fd5a 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a3c:	4828      	ldr	r0, [pc, #160]	; (8000ae0 <MX_TIM4_Init+0x128>)
 8000a3e:	f001 f95d 	bl	8001cfc <HAL_TIM_PWM_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a48:	f7ff fd52 	bl	80004f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4821      	ldr	r0, [pc, #132]	; (8000ae0 <MX_TIM4_Init+0x128>)
 8000a5c:	f001 ff8e 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a66:	f7ff fd43 	bl	80004f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6a:	2360      	movs	r3, #96	; 0x60
 8000a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4817      	ldr	r0, [pc, #92]	; (8000ae0 <MX_TIM4_Init+0x128>)
 8000a82:	f001 fb3d 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000a8c:	f7ff fd30 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2204      	movs	r2, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <MX_TIM4_Init+0x128>)
 8000a98:	f001 fb32 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000aa2:	f7ff fd25 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2208      	movs	r2, #8
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_TIM4_Init+0x128>)
 8000aae:	f001 fb27 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000ab8:	f7ff fd1a 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	220c      	movs	r2, #12
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_TIM4_Init+0x128>)
 8000ac4:	f001 fb1c 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000ace:	f7ff fd0f 	bl	80004f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <MX_TIM4_Init+0x128>)
 8000ad4:	f000 f868 	bl	8000ba8 <HAL_TIM_MspPostInit>

}
 8000ad8:	bf00      	nop
 8000ada:	3738      	adds	r7, #56	; 0x38
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000002c 	.word	0x2000002c
 8000ae4:	40000800 	.word	0x40000800

08000ae8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <HAL_TIM_Base_MspInit+0xb0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d10c      	bne.n	8000b14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b04:	6193      	str	r3, [r2, #24]
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000b12:	e03c      	b.n	8000b8e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1c:	d114      	bne.n	8000b48 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	61d3      	str	r3, [r2, #28]
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	201c      	movs	r0, #28
 8000b3c:	f000 fa8f 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b40:	201c      	movs	r0, #28
 8000b42:	f000 faa8 	bl	8001096 <HAL_NVIC_EnableIRQ>
}
 8000b46:	e022      	b.n	8000b8e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <HAL_TIM_Base_MspInit+0xb8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d10c      	bne.n	8000b6c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	61d3      	str	r3, [r2, #28]
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
}
 8000b6a:	e010      	b.n	8000b8e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <HAL_TIM_Base_MspInit+0xbc>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d10b      	bne.n	8000b8e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40012c00 	.word	0x40012c00
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40000400 	.word	0x40000400
 8000ba4:	40000800 	.word	0x40000800

08000ba8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a5f      	ldr	r2, [pc, #380]	; (8000d40 <HAL_TIM_MspPostInit+0x198>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d119      	bne.n	8000bfc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b5e      	ldr	r3, [pc, #376]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a5d      	ldr	r2, [pc, #372]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b5b      	ldr	r3, [pc, #364]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	623b      	str	r3, [r7, #32]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000be0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2302      	movs	r3, #2
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4854      	ldr	r0, [pc, #336]	; (8000d48 <HAL_TIM_MspPostInit+0x1a0>)
 8000bf6:	f000 fa69 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bfa:	e09c      	b.n	8000d36 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c04:	d143      	bne.n	8000c8e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b4f      	ldr	r3, [pc, #316]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a4e      	ldr	r2, [pc, #312]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b4c      	ldr	r3, [pc, #304]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	61fb      	str	r3, [r7, #28]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b49      	ldr	r3, [pc, #292]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	4a48      	ldr	r2, [pc, #288]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6193      	str	r3, [r2, #24]
 8000c2a:	4b46      	ldr	r3, [pc, #280]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8000c36:	f248 030c 	movw	r3, #32780	; 0x800c
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2302      	movs	r3, #2
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	483f      	ldr	r0, [pc, #252]	; (8000d48 <HAL_TIM_MspPostInit+0x1a0>)
 8000c4c:	f000 fa3e 	bl	80010cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c50:	2308      	movs	r3, #8
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	483a      	ldr	r0, [pc, #232]	; (8000d4c <HAL_TIM_MspPostInit+0x1a4>)
 8000c64:	f000 fa32 	bl	80010cc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000c68:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <HAL_TIM_MspPostInit+0x1a8>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
 8000c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
 8000c86:	4a32      	ldr	r2, [pc, #200]	; (8000d50 <HAL_TIM_MspPostInit+0x1a8>)
 8000c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c8a:	6053      	str	r3, [r2, #4]
}
 8000c8c:	e053      	b.n	8000d36 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a30      	ldr	r2, [pc, #192]	; (8000d54 <HAL_TIM_MspPostInit+0x1ac>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d130      	bne.n	8000cfa <HAL_TIM_MspPostInit+0x152>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a29      	ldr	r2, [pc, #164]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a23      	ldr	r2, [pc, #140]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cc8:	23c0      	movs	r3, #192	; 0xc0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	481b      	ldr	r0, [pc, #108]	; (8000d48 <HAL_TIM_MspPostInit+0x1a0>)
 8000cdc:	f000 f9f6 	bl	80010cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4816      	ldr	r0, [pc, #88]	; (8000d4c <HAL_TIM_MspPostInit+0x1a4>)
 8000cf4:	f000 f9ea 	bl	80010cc <HAL_GPIO_Init>
}
 8000cf8:	e01d      	b.n	8000d36 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <HAL_TIM_MspPostInit+0x1b0>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d118      	bne.n	8000d36 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000d0a:	f043 0308 	orr.w	r3, r3, #8
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_TIM_MspPostInit+0x19c>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d1c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2302      	movs	r3, #2
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4806      	ldr	r0, [pc, #24]	; (8000d4c <HAL_TIM_MspPostInit+0x1a4>)
 8000d32:	f000 f9cb 	bl	80010cc <HAL_GPIO_Init>
}
 8000d36:	bf00      	nop
 8000d38:	3738      	adds	r7, #56	; 0x38
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40012c00 	.word	0x40012c00
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	40010c00 	.word	0x40010c00
 8000d50:	40010000 	.word	0x40010000
 8000d54:	40000400 	.word	0x40000400
 8000d58:	40000800 	.word	0x40000800

08000d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d5e:	e003      	b.n	8000d68 <LoopCopyDataInit>

08000d60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d66:	3104      	adds	r1, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d68:	480a      	ldr	r0, [pc, #40]	; (8000d94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d70:	d3f6      	bcc.n	8000d60 <CopyDataInit>
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d74:	e002      	b.n	8000d7c <LoopFillZerobss>

08000d76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d78:	f842 3b04 	str.w	r3, [r2], #4

08000d7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d80:	d3f9      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d82:	f7ff fc1d 	bl	80005c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f001 febb 	bl	8002b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fa59 	bl	8000240 <main>
  bx lr
 8000d8e:	4770      	bx	lr
  ldr r3, =_sidata
 8000d90:	08002b9c 	.word	0x08002b9c
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d98:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000d9c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000da0:	20000150 	.word	0x20000150

08000da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_2_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x28>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f945 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fb98 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f95d 	bl	80010b2 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e10:	f000 f925 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000004 	.word	0x20000004
 8000e2c:	2000000c 	.word	0x2000000c
 8000e30:	20000008 	.word	0x20000008

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	2000000c 	.word	0x2000000c
 8000e54:	2000014c 	.word	0x2000014c

08000e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	2000014c 	.word	0x2000014c

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff fff0 	bl	8000e58 <HAL_GetTick>
 8000e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_Delay+0x40>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e92:	bf00      	nop
 8000e94:	f7ff ffe0 	bl	8000e58 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000000c 	.word	0x2000000c

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4906      	ldr	r1, [pc, #24]	; (8000f48 <__NVIC_EnableIRQ+0x34>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001028:	f7ff ff90 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff2d 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff42 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff90 	bl	8000fa0 <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5f 	bl	8000f4c <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff35 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa2 	bl	8001004 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b08b      	sub	sp, #44	; 0x2c
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	e127      	b.n	8001330 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010e0:	2201      	movs	r2, #1
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	f040 8116 	bne.w	800132a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b12      	cmp	r3, #18
 8001104:	d034      	beq.n	8001170 <HAL_GPIO_Init+0xa4>
 8001106:	2b12      	cmp	r3, #18
 8001108:	d80d      	bhi.n	8001126 <HAL_GPIO_Init+0x5a>
 800110a:	2b02      	cmp	r3, #2
 800110c:	d02b      	beq.n	8001166 <HAL_GPIO_Init+0x9a>
 800110e:	2b02      	cmp	r3, #2
 8001110:	d804      	bhi.n	800111c <HAL_GPIO_Init+0x50>
 8001112:	2b00      	cmp	r3, #0
 8001114:	d031      	beq.n	800117a <HAL_GPIO_Init+0xae>
 8001116:	2b01      	cmp	r3, #1
 8001118:	d01c      	beq.n	8001154 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800111a:	e048      	b.n	80011ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800111c:	2b03      	cmp	r3, #3
 800111e:	d043      	beq.n	80011a8 <HAL_GPIO_Init+0xdc>
 8001120:	2b11      	cmp	r3, #17
 8001122:	d01b      	beq.n	800115c <HAL_GPIO_Init+0x90>
          break;
 8001124:	e043      	b.n	80011ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001126:	4a89      	ldr	r2, [pc, #548]	; (800134c <HAL_GPIO_Init+0x280>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d026      	beq.n	800117a <HAL_GPIO_Init+0xae>
 800112c:	4a87      	ldr	r2, [pc, #540]	; (800134c <HAL_GPIO_Init+0x280>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d806      	bhi.n	8001140 <HAL_GPIO_Init+0x74>
 8001132:	4a87      	ldr	r2, [pc, #540]	; (8001350 <HAL_GPIO_Init+0x284>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d020      	beq.n	800117a <HAL_GPIO_Init+0xae>
 8001138:	4a86      	ldr	r2, [pc, #536]	; (8001354 <HAL_GPIO_Init+0x288>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01d      	beq.n	800117a <HAL_GPIO_Init+0xae>
          break;
 800113e:	e036      	b.n	80011ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001140:	4a85      	ldr	r2, [pc, #532]	; (8001358 <HAL_GPIO_Init+0x28c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0xae>
 8001146:	4a85      	ldr	r2, [pc, #532]	; (800135c <HAL_GPIO_Init+0x290>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d016      	beq.n	800117a <HAL_GPIO_Init+0xae>
 800114c:	4a84      	ldr	r2, [pc, #528]	; (8001360 <HAL_GPIO_Init+0x294>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d013      	beq.n	800117a <HAL_GPIO_Init+0xae>
          break;
 8001152:	e02c      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	623b      	str	r3, [r7, #32]
          break;
 800115a:	e028      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	3304      	adds	r3, #4
 8001162:	623b      	str	r3, [r7, #32]
          break;
 8001164:	e023      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	3308      	adds	r3, #8
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e01e      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	330c      	adds	r3, #12
 8001176:	623b      	str	r3, [r7, #32]
          break;
 8001178:	e019      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001182:	2304      	movs	r3, #4
 8001184:	623b      	str	r3, [r7, #32]
          break;
 8001186:	e012      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d105      	bne.n	800119c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001190:	2308      	movs	r3, #8
 8001192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	611a      	str	r2, [r3, #16]
          break;
 800119a:	e008      	b.n	80011ae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800119c:	2308      	movs	r3, #8
 800119e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	615a      	str	r2, [r3, #20]
          break;
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
          break;
 80011ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2bff      	cmp	r3, #255	; 0xff
 80011b2:	d801      	bhi.n	80011b8 <HAL_GPIO_Init+0xec>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	e001      	b.n	80011bc <HAL_GPIO_Init+0xf0>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3304      	adds	r3, #4
 80011bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2bff      	cmp	r3, #255	; 0xff
 80011c2:	d802      	bhi.n	80011ca <HAL_GPIO_Init+0xfe>
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x104>
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	3b08      	subs	r3, #8
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	210f      	movs	r1, #15
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	401a      	ands	r2, r3
 80011e2:	6a39      	ldr	r1, [r7, #32]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 8096 	beq.w	800132a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011fe:	4b59      	ldr	r3, [pc, #356]	; (8001364 <HAL_GPIO_Init+0x298>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4a58      	ldr	r2, [pc, #352]	; (8001364 <HAL_GPIO_Init+0x298>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6193      	str	r3, [r2, #24]
 800120a:	4b56      	ldr	r3, [pc, #344]	; (8001364 <HAL_GPIO_Init+0x298>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001216:	4a54      	ldr	r2, [pc, #336]	; (8001368 <HAL_GPIO_Init+0x29c>)
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4013      	ands	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HAL_GPIO_Init+0x2a0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x19e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4a      	ldr	r2, [pc, #296]	; (8001370 <HAL_GPIO_Init+0x2a4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x19a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a49      	ldr	r2, [pc, #292]	; (8001374 <HAL_GPIO_Init+0x2a8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x196>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a48      	ldr	r2, [pc, #288]	; (8001378 <HAL_GPIO_Init+0x2ac>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x192>
 800125a:	2303      	movs	r3, #3
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x1a0>
 800125e:	2304      	movs	r3, #4
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x1a0>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x1a0>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x1a0>
 800126a:	2300      	movs	r3, #0
 800126c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800127c:	493a      	ldr	r1, [pc, #232]	; (8001368 <HAL_GPIO_Init+0x29c>)
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001296:	4b39      	ldr	r3, [pc, #228]	; (800137c <HAL_GPIO_Init+0x2b0>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4938      	ldr	r1, [pc, #224]	; (800137c <HAL_GPIO_Init+0x2b0>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
 80012a2:	e006      	b.n	80012b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012a4:	4b35      	ldr	r3, [pc, #212]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	4933      	ldr	r1, [pc, #204]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	492e      	ldr	r1, [pc, #184]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
 80012ca:	e006      	b.n	80012da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	4929      	ldr	r1, [pc, #164]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	4924      	ldr	r1, [pc, #144]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	608b      	str	r3, [r1, #8]
 80012f2:	e006      	b.n	8001302 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	491f      	ldr	r1, [pc, #124]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012fe:	4013      	ands	r3, r2
 8001300:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_GPIO_Init+0x2b0>)
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	491a      	ldr	r1, [pc, #104]	; (800137c <HAL_GPIO_Init+0x2b0>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	60cb      	str	r3, [r1, #12]
 800131a:	e006      	b.n	800132a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_GPIO_Init+0x2b0>)
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	43db      	mvns	r3, r3
 8001324:	4915      	ldr	r1, [pc, #84]	; (800137c <HAL_GPIO_Init+0x2b0>)
 8001326:	4013      	ands	r3, r2
 8001328:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	3301      	adds	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	f47f aed0 	bne.w	80010e0 <HAL_GPIO_Init+0x14>
  }
}
 8001340:	bf00      	nop
 8001342:	372c      	adds	r7, #44	; 0x2c
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	10210000 	.word	0x10210000
 8001350:	10110000 	.word	0x10110000
 8001354:	10120000 	.word	0x10120000
 8001358:	10310000 	.word	0x10310000
 800135c:	10320000 	.word	0x10320000
 8001360:	10220000 	.word	0x10220000
 8001364:	40021000 	.word	0x40021000
 8001368:	40010000 	.word	0x40010000
 800136c:	40010800 	.word	0x40010800
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40011000 	.word	0x40011000
 8001378:	40011400 	.word	0x40011400
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800139c:	e003      	b.n	80013a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4013      	ands	r3, r2
 80013c8:	041a      	lsls	r2, r3, #16
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43d9      	mvns	r1, r3
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	400b      	ands	r3, r1
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	611a      	str	r2, [r3, #16]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e26c      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8087 	beq.w	8001512 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001404:	4b92      	ldr	r3, [pc, #584]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b04      	cmp	r3, #4
 800140e:	d00c      	beq.n	800142a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001410:	4b8f      	ldr	r3, [pc, #572]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b08      	cmp	r3, #8
 800141a:	d112      	bne.n	8001442 <HAL_RCC_OscConfig+0x5e>
 800141c:	4b8c      	ldr	r3, [pc, #560]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001428:	d10b      	bne.n	8001442 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142a:	4b89      	ldr	r3, [pc, #548]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d06c      	beq.n	8001510 <HAL_RCC_OscConfig+0x12c>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d168      	bne.n	8001510 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e246      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x76>
 800144c:	4b80      	ldr	r3, [pc, #512]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a7f      	ldr	r2, [pc, #508]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e02e      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x98>
 8001462:	4b7b      	ldr	r3, [pc, #492]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a7a      	ldr	r2, [pc, #488]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b78      	ldr	r3, [pc, #480]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a77      	ldr	r2, [pc, #476]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e01d      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0xbc>
 8001486:	4b72      	ldr	r3, [pc, #456]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a71      	ldr	r2, [pc, #452]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b6f      	ldr	r3, [pc, #444]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a6e      	ldr	r2, [pc, #440]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
 80014a0:	4b6b      	ldr	r3, [pc, #428]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a6a      	ldr	r2, [pc, #424]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b68      	ldr	r3, [pc, #416]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a67      	ldr	r2, [pc, #412]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fcca 	bl	8000e58 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fcc6 	bl	8000e58 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e1fa      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0xe4>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fcb6 	bl	8000e58 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fcb2 	bl	8000e58 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e1e6      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x10c>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d063      	beq.n	80015e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151e:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800152a:	4b49      	ldr	r3, [pc, #292]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d11c      	bne.n	8001570 <HAL_RCC_OscConfig+0x18c>
 8001536:	4b46      	ldr	r3, [pc, #280]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d116      	bne.n	8001570 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_RCC_OscConfig+0x176>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d001      	beq.n	800155a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e1ba      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4939      	ldr	r1, [pc, #228]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	e03a      	b.n	80015e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <HAL_RCC_OscConfig+0x270>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fc6b 	bl	8000e58 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff fc67 	bl	8000e58 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e19b      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4927      	ldr	r1, [pc, #156]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
 80015b8:	e015      	b.n	80015e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <HAL_RCC_OscConfig+0x270>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fc4a 	bl	8000e58 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fc46 	bl	8000e58 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e17a      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d03a      	beq.n	8001668 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d019      	beq.n	800162e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_RCC_OscConfig+0x274>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fc2a 	bl	8000e58 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff fc26 	bl	8000e58 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e15a      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001626:	2001      	movs	r0, #1
 8001628:	f000 faa8 	bl	8001b7c <RCC_Delay>
 800162c:	e01c      	b.n	8001668 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_RCC_OscConfig+0x274>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff fc10 	bl	8000e58 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163a:	e00f      	b.n	800165c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff fc0c 	bl	8000e58 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d908      	bls.n	800165c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e140      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	42420000 	.word	0x42420000
 8001658:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165c:	4b9e      	ldr	r3, [pc, #632]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1e9      	bne.n	800163c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80a6 	beq.w	80017c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167a:	4b97      	ldr	r3, [pc, #604]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10d      	bne.n	80016a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b94      	ldr	r3, [pc, #592]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	4a93      	ldr	r2, [pc, #588]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	61d3      	str	r3, [r2, #28]
 8001692:	4b91      	ldr	r3, [pc, #580]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169e:	2301      	movs	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	4b8e      	ldr	r3, [pc, #568]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d118      	bne.n	80016e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ae:	4b8b      	ldr	r3, [pc, #556]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a8a      	ldr	r2, [pc, #552]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fbcd 	bl	8000e58 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c2:	f7ff fbc9 	bl	8000e58 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e0fd      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	4b81      	ldr	r3, [pc, #516]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x312>
 80016e8:	4b7b      	ldr	r3, [pc, #492]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a7a      	ldr	r2, [pc, #488]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	e02d      	b.n	8001752 <HAL_RCC_OscConfig+0x36e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x334>
 80016fe:	4b76      	ldr	r3, [pc, #472]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4a75      	ldr	r2, [pc, #468]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6213      	str	r3, [r2, #32]
 800170a:	4b73      	ldr	r3, [pc, #460]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a72      	ldr	r2, [pc, #456]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	6213      	str	r3, [r2, #32]
 8001716:	e01c      	b.n	8001752 <HAL_RCC_OscConfig+0x36e>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d10c      	bne.n	800173a <HAL_RCC_OscConfig+0x356>
 8001720:	4b6d      	ldr	r3, [pc, #436]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a6c      	ldr	r2, [pc, #432]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	4b6a      	ldr	r3, [pc, #424]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a69      	ldr	r2, [pc, #420]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	e00b      	b.n	8001752 <HAL_RCC_OscConfig+0x36e>
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4a66      	ldr	r2, [pc, #408]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6213      	str	r3, [r2, #32]
 8001746:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4a63      	ldr	r2, [pc, #396]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d015      	beq.n	8001786 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f7ff fb7d 	bl	8000e58 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff fb79 	bl	8000e58 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e0ab      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	4b57      	ldr	r3, [pc, #348]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ee      	beq.n	8001762 <HAL_RCC_OscConfig+0x37e>
 8001784:	e014      	b.n	80017b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff fb67 	bl	8000e58 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fb63 	bl	8000e58 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e095      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ee      	bne.n	800178e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d105      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b6:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	4a47      	ldr	r2, [pc, #284]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8081 	beq.w	80018ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017cc:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d061      	beq.n	800189c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d146      	bne.n	800186e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_OscConfig+0x4fc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fb37 	bl	8000e58 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff fb33 	bl	8000e58 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e067      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001800:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f0      	bne.n	80017ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001814:	d108      	bne.n	8001828 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	492d      	ldr	r1, [pc, #180]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a19      	ldr	r1, [r3, #32]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	430b      	orrs	r3, r1
 800183a:	4927      	ldr	r1, [pc, #156]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_RCC_OscConfig+0x4fc>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fb07 	bl	8000e58 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff fb03 	bl	8000e58 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e037      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x46a>
 800186c:	e02f      	b.n	80018ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_RCC_OscConfig+0x4fc>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff faf0 	bl	8000e58 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff faec 	bl	8000e58 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e020      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x498>
 800189a:	e018      	b.n	80018ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e013      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_OscConfig+0x4f4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40007000 	.word	0x40007000
 80018e0:	42420060 	.word	0x42420060

080018e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0d0      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f8:	4b6a      	ldr	r3, [pc, #424]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d910      	bls.n	8001928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 0207 	bic.w	r2, r3, #7
 800190e:	4965      	ldr	r1, [pc, #404]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0b8      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001940:	4b59      	ldr	r3, [pc, #356]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a58      	ldr	r2, [pc, #352]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800194a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001958:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a52      	ldr	r2, [pc, #328]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001962:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001964:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	494d      	ldr	r1, [pc, #308]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d040      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d115      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e07f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e073      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06b      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4936      	ldr	r1, [pc, #216]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d4:	f7ff fa40 	bl	8000e58 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff fa3c 	bl	8000e58 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e053      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d210      	bcs.n	8001a34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0207 	bic.w	r2, r3, #7
 8001a1a:	4922      	ldr	r1, [pc, #136]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e032      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4916      	ldr	r1, [pc, #88]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a72:	f000 f821 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a76:	4601      	mov	r1, r0
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a84:	5cd3      	ldrb	r3, [r2, r3]
 8001a86:	fa21 f303 	lsr.w	r3, r1, r3
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f99e 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40022000 	.word	0x40022000
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08002b84 	.word	0x08002b84
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	b490      	push	{r4, r7}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ac0:	1d3c      	adds	r4, r7, #4
 8001ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d002      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x40>
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x46>
 8001af6:	e02d      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001afa:	623b      	str	r3, [r7, #32]
      break;
 8001afc:	e02d      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	0c9b      	lsrs	r3, r3, #18
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d013      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0c5b      	lsrs	r3, r3, #17
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	4a0f      	ldr	r2, [pc, #60]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b36:	fb02 f203 	mul.w	r2, r2, r3
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
 8001b42:	e004      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	623b      	str	r3, [r7, #32]
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b56:	623b      	str	r3, [r7, #32]
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc90      	pop	{r4, r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	08002b70 	.word	0x08002b70
 8001b6c:	08002b80 	.word	0x08002b80
 8001b70:	40021000 	.word	0x40021000
 8001b74:	007a1200 	.word	0x007a1200
 8001b78:	003d0900 	.word	0x003d0900

08001b7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <RCC_Delay+0x34>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <RCC_Delay+0x38>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0a5b      	lsrs	r3, r3, #9
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b98:	bf00      	nop
  }
  while (Delay --);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1e5a      	subs	r2, r3, #1
 8001b9e:	60fa      	str	r2, [r7, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f9      	bne.n	8001b98 <RCC_Delay+0x1c>
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000004 	.word	0x20000004
 8001bb4:	10624dd3 	.word	0x10624dd3

08001bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e041      	b.n	8001c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe ff82 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f000 fc1c 	bl	8002434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e03a      	b.n	8001ce6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <HAL_TIM_Base_Start_IT+0x98>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00e      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x58>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9a:	d009      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x58>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d004      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x58>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d111      	bne.n	8001cd4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d010      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd2:	e007      	b.n	8001ce4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	40012c00 	.word	0x40012c00
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	40000800 	.word	0x40000800

08001cfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e041      	b.n	8001d92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f839 	bl	8001d9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3304      	adds	r3, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	f000 fb7a 	bl	8002434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <HAL_TIM_PWM_Start+0x24>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e022      	b.n	8001e16 <HAL_TIM_PWM_Start+0x6a>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d109      	bne.n	8001dea <HAL_TIM_PWM_Start+0x3e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	bf14      	ite	ne
 8001de2:	2301      	movne	r3, #1
 8001de4:	2300      	moveq	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	e015      	b.n	8001e16 <HAL_TIM_PWM_Start+0x6a>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d109      	bne.n	8001e04 <HAL_TIM_PWM_Start+0x58>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	bf14      	ite	ne
 8001dfc:	2301      	movne	r3, #1
 8001dfe:	2300      	moveq	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e008      	b.n	8001e16 <HAL_TIM_PWM_Start+0x6a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	bf14      	ite	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	2300      	moveq	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e05e      	b.n	8001edc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d104      	bne.n	8001e2e <HAL_TIM_PWM_Start+0x82>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e2c:	e013      	b.n	8001e56 <HAL_TIM_PWM_Start+0xaa>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d104      	bne.n	8001e3e <HAL_TIM_PWM_Start+0x92>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e3c:	e00b      	b.n	8001e56 <HAL_TIM_PWM_Start+0xaa>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d104      	bne.n	8001e4e <HAL_TIM_PWM_Start+0xa2>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e4c:	e003      	b.n	8001e56 <HAL_TIM_PWM_Start+0xaa>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	6839      	ldr	r1, [r7, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fd68 	bl	8002934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_TIM_PWM_Start+0x138>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d107      	bne.n	8001e7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_TIM_PWM_Start+0x138>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00e      	beq.n	8001ea6 <HAL_TIM_PWM_Start+0xfa>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e90:	d009      	beq.n	8001ea6 <HAL_TIM_PWM_Start+0xfa>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_TIM_PWM_Start+0x13c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d004      	beq.n	8001ea6 <HAL_TIM_PWM_Start+0xfa>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <HAL_TIM_PWM_Start+0x140>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d111      	bne.n	8001eca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b06      	cmp	r3, #6
 8001eb6:	d010      	beq.n	8001eda <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec8:	e007      	b.n	8001eda <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40012c00 	.word	0x40012c00
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800

08001ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0202 	mvn.w	r2, #2
 8001f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fa62 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fa55 	bl	80023ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fa64 	bl	800240e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d122      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d11b      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0204 	mvn.w	r2, #4
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fa38 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa2b 	bl	80023ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fa3a 	bl	800240e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d122      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d11b      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0208 	mvn.w	r2, #8
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa0e 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fa01 	bl	80023ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 fa10 	bl	800240e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	d122      	bne.n	8002048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b10      	cmp	r3, #16
 800200e:	d11b      	bne.n	8002048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0210 	mvn.w	r2, #16
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2208      	movs	r2, #8
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f9e4 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f9d7 	bl	80023ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f9e6 	bl	800240e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d107      	bne.n	8002074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0201 	mvn.w	r2, #1
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fa18 	bl	80004a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208c:	2b80      	cmp	r3, #128	; 0x80
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fd26 	bl	8002aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b40      	cmp	r3, #64	; 0x40
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f9aa 	bl	8002420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d10e      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d107      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0220 	mvn.w	r2, #32
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fcf1 	bl	8002ada <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002116:	2302      	movs	r3, #2
 8002118:	e0ac      	b.n	8002274 <HAL_TIM_PWM_ConfigChannel+0x174>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	f200 809f 	bhi.w	8002268 <HAL_TIM_PWM_ConfigChannel+0x168>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002165 	.word	0x08002165
 8002134:	08002269 	.word	0x08002269
 8002138:	08002269 	.word	0x08002269
 800213c:	08002269 	.word	0x08002269
 8002140:	080021a5 	.word	0x080021a5
 8002144:	08002269 	.word	0x08002269
 8002148:	08002269 	.word	0x08002269
 800214c:	08002269 	.word	0x08002269
 8002150:	080021e7 	.word	0x080021e7
 8002154:	08002269 	.word	0x08002269
 8002158:	08002269 	.word	0x08002269
 800215c:	08002269 	.word	0x08002269
 8002160:	08002227 	.word	0x08002227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f9c4 	bl	80024f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0208 	orr.w	r2, r2, #8
 800217e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0204 	bic.w	r2, r2, #4
 800218e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6999      	ldr	r1, [r3, #24]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	619a      	str	r2, [r3, #24]
      break;
 80021a2:	e062      	b.n	800226a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fa0a 	bl	80025c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6999      	ldr	r1, [r3, #24]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	021a      	lsls	r2, r3, #8
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	619a      	str	r2, [r3, #24]
      break;
 80021e4:	e041      	b.n	800226a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fa53 	bl	8002698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0208 	orr.w	r2, r2, #8
 8002200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0204 	bic.w	r2, r2, #4
 8002210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69d9      	ldr	r1, [r3, #28]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	61da      	str	r2, [r3, #28]
      break;
 8002224:	e021      	b.n	800226a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fa9d 	bl	800276c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69d9      	ldr	r1, [r3, #28]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	021a      	lsls	r2, r3, #8
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	61da      	str	r2, [r3, #28]
      break;
 8002266:	e000      	b.n	800226a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_TIM_ConfigClockSource+0x18>
 8002290:	2302      	movs	r3, #2
 8002292:	e0a6      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x166>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d067      	beq.n	800239c <HAL_TIM_ConfigClockSource+0x120>
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d80b      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x6c>
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d073      	beq.n	80023bc <HAL_TIM_ConfigClockSource+0x140>
 80022d4:	2b10      	cmp	r3, #16
 80022d6:	d802      	bhi.n	80022de <HAL_TIM_ConfigClockSource+0x62>
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d06f      	beq.n	80023bc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80022dc:	e078      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d06c      	beq.n	80023bc <HAL_TIM_ConfigClockSource+0x140>
 80022e2:	2b30      	cmp	r3, #48	; 0x30
 80022e4:	d06a      	beq.n	80023bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80022e6:	e073      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80022e8:	2b70      	cmp	r3, #112	; 0x70
 80022ea:	d00d      	beq.n	8002308 <HAL_TIM_ConfigClockSource+0x8c>
 80022ec:	2b70      	cmp	r3, #112	; 0x70
 80022ee:	d804      	bhi.n	80022fa <HAL_TIM_ConfigClockSource+0x7e>
 80022f0:	2b50      	cmp	r3, #80	; 0x50
 80022f2:	d033      	beq.n	800235c <HAL_TIM_ConfigClockSource+0xe0>
 80022f4:	2b60      	cmp	r3, #96	; 0x60
 80022f6:	d041      	beq.n	800237c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80022f8:	e06a      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80022fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fe:	d066      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x152>
 8002300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002304:	d017      	beq.n	8002336 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002306:	e063      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	6899      	ldr	r1, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f000 faed 	bl	80028f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800232a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]
      break;
 8002334:	e04c      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6899      	ldr	r1, [r3, #8]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f000 fad6 	bl	80028f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002358:	609a      	str	r2, [r3, #8]
      break;
 800235a:	e039      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	461a      	mov	r2, r3
 800236a:	f000 fa4d 	bl	8002808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2150      	movs	r1, #80	; 0x50
 8002374:	4618      	mov	r0, r3
 8002376:	f000 faa4 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 800237a:	e029      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	461a      	mov	r2, r3
 800238a:	f000 fa6b 	bl	8002864 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2160      	movs	r1, #96	; 0x60
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fa94 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 800239a:	e019      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	461a      	mov	r2, r3
 80023aa:	f000 fa2d 	bl	8002808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2140      	movs	r1, #64	; 0x40
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fa84 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 80023ba:	e009      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	4610      	mov	r0, r2
 80023c8:	f000 fa7b 	bl	80028c2 <TIM_ITRx_SetConfig>
        break;
 80023cc:	e000      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80023ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
	...

08002434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a29      	ldr	r2, [pc, #164]	; (80024ec <TIM_Base_SetConfig+0xb8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00b      	beq.n	8002464 <TIM_Base_SetConfig+0x30>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002452:	d007      	beq.n	8002464 <TIM_Base_SetConfig+0x30>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <TIM_Base_SetConfig+0xbc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <TIM_Base_SetConfig+0x30>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <TIM_Base_SetConfig+0xc0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d108      	bne.n	8002476 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <TIM_Base_SetConfig+0xb8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00b      	beq.n	8002496 <TIM_Base_SetConfig+0x62>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002484:	d007      	beq.n	8002496 <TIM_Base_SetConfig+0x62>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a19      	ldr	r2, [pc, #100]	; (80024f0 <TIM_Base_SetConfig+0xbc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d003      	beq.n	8002496 <TIM_Base_SetConfig+0x62>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <TIM_Base_SetConfig+0xc0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d108      	bne.n	80024a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <TIM_Base_SetConfig+0xb8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d103      	bne.n	80024dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	615a      	str	r2, [r3, #20]
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	40012c00 	.word	0x40012c00
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40000800 	.word	0x40000800

080024f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	f023 0201 	bic.w	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f023 0302 	bic.w	r3, r3, #2
 8002540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <TIM_OC1_SetConfig+0xc8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10c      	bne.n	800256e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0308 	bic.w	r3, r3, #8
 800255a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <TIM_OC1_SetConfig+0xc8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d111      	bne.n	800259a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800257c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	621a      	str	r2, [r3, #32]
}
 80025b4:	bf00      	nop
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40012c00 	.word	0x40012c00

080025c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f023 0210 	bic.w	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f023 0320 	bic.w	r3, r3, #32
 800260e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <TIM_OC2_SetConfig+0xd0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d10d      	bne.n	8002640 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800262a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800263e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a14      	ldr	r2, [pc, #80]	; (8002694 <TIM_OC2_SetConfig+0xd0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d113      	bne.n	8002670 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800264e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	621a      	str	r2, [r3, #32]
}
 800268a:	bf00      	nop
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40012c00 	.word	0x40012c00

08002698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0303 	bic.w	r3, r3, #3
 80026ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <TIM_OC3_SetConfig+0xd0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10d      	bne.n	8002712 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <TIM_OC3_SetConfig+0xd0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d113      	bne.n	8002742 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	621a      	str	r2, [r3, #32]
}
 800275c:	bf00      	nop
 800275e:	371c      	adds	r7, #28
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40012c00 	.word	0x40012c00

0800276c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800279a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	031b      	lsls	r3, r3, #12
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <TIM_OC4_SetConfig+0x98>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d109      	bne.n	80027e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	621a      	str	r2, [r3, #32]
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	40012c00 	.word	0x40012c00

08002808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f023 0201 	bic.w	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f023 030a 	bic.w	r3, r3, #10
 8002844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	621a      	str	r2, [r3, #32]
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f023 0210 	bic.w	r2, r3, #16
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800288e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	031b      	lsls	r3, r3, #12
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	621a      	str	r2, [r3, #32]
}
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	f043 0307 	orr.w	r3, r3, #7
 80028e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	609a      	str	r2, [r3, #8]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b087      	sub	sp, #28
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002910:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	021a      	lsls	r2, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	431a      	orrs	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4313      	orrs	r3, r2
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	609a      	str	r2, [r3, #8]
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2201      	movs	r2, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	43db      	mvns	r3, r3
 8002956:	401a      	ands	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a1a      	ldr	r2, [r3, #32]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	431a      	orrs	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	621a      	str	r2, [r3, #32]
}
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002990:	2302      	movs	r3, #2
 8002992:	e046      	b.n	8002a22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00e      	beq.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d009      	beq.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d004      	beq.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d10c      	bne.n	8002a10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800

08002a38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e03d      	b.n	8002ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
	...

08002b00 <__libc_init_array>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	2500      	movs	r5, #0
 8002b04:	4e0c      	ldr	r6, [pc, #48]	; (8002b38 <__libc_init_array+0x38>)
 8002b06:	4c0d      	ldr	r4, [pc, #52]	; (8002b3c <__libc_init_array+0x3c>)
 8002b08:	1ba4      	subs	r4, r4, r6
 8002b0a:	10a4      	asrs	r4, r4, #2
 8002b0c:	42a5      	cmp	r5, r4
 8002b0e:	d109      	bne.n	8002b24 <__libc_init_array+0x24>
 8002b10:	f000 f822 	bl	8002b58 <_init>
 8002b14:	2500      	movs	r5, #0
 8002b16:	4e0a      	ldr	r6, [pc, #40]	; (8002b40 <__libc_init_array+0x40>)
 8002b18:	4c0a      	ldr	r4, [pc, #40]	; (8002b44 <__libc_init_array+0x44>)
 8002b1a:	1ba4      	subs	r4, r4, r6
 8002b1c:	10a4      	asrs	r4, r4, #2
 8002b1e:	42a5      	cmp	r5, r4
 8002b20:	d105      	bne.n	8002b2e <__libc_init_array+0x2e>
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b28:	4798      	blx	r3
 8002b2a:	3501      	adds	r5, #1
 8002b2c:	e7ee      	b.n	8002b0c <__libc_init_array+0xc>
 8002b2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b32:	4798      	blx	r3
 8002b34:	3501      	adds	r5, #1
 8002b36:	e7f2      	b.n	8002b1e <__libc_init_array+0x1e>
 8002b38:	08002b94 	.word	0x08002b94
 8002b3c:	08002b94 	.word	0x08002b94
 8002b40:	08002b94 	.word	0x08002b94
 8002b44:	08002b98 	.word	0x08002b98

08002b48 <memset>:
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4402      	add	r2, r0
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <memset+0xa>
 8002b50:	4770      	bx	lr
 8002b52:	f803 1b01 	strb.w	r1, [r3], #1
 8002b56:	e7f9      	b.n	8002b4c <memset+0x4>

08002b58 <_init>:
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5a:	bf00      	nop
 8002b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5e:	bc08      	pop	{r3}
 8002b60:	469e      	mov	lr, r3
 8002b62:	4770      	bx	lr

08002b64 <_fini>:
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	bf00      	nop
 8002b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6a:	bc08      	pop	{r3}
 8002b6c:	469e      	mov	lr, r3
 8002b6e:	4770      	bx	lr
